2019-11-25T13:12:51.948Z{
	"message": "print is not defined",
	"locations": [
		{
			"line": 2,
			"column": 3
		}
	],
	"path": [
		"prints"
	],
	"extensions": {
		"code": "INTERNAL_SERVER_ERROR",
		"exception": {
			"stacktrace": [
				"ReferenceError: print is not defined",
				"    at _callee$ (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\src\\resolvers\\query/department.js:3:25)",
				"    at tryCatch (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\regenerator-runtime\\runtime.js:45:40)",
				"    at Generator.invoke [as _invoke] (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\regenerator-runtime\\runtime.js:271:22)",
				"    at Generator.prototype.(anonymous function) [as next] (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\regenerator-runtime\\runtime.js:97:21)",
				"    at asyncGeneratorStep (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\src\\resolvers\\query\\department.js:18:103)",
				"    at _next (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\src\\resolvers\\query\\department.js:20:194)"
			]
		}
	}
}2019-11-25T13:24:39.659Z{
	"message": "Cannot return null for non-nullable field DepartmentPrint.image.",
	"locations": [
		{
			"line": 5,
			"column": 5
		}
	],
	"path": [
		"prints",
		0,
		"image"
	],
	"extensions": {
		"code": "INTERNAL_SERVER_ERROR",
		"exception": {
			"stacktrace": [
				"Error: Cannot return null for non-nullable field DepartmentPrint.image.",
				"    at completeValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:560:13)",
				"    at completeValueCatchingError (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:495:19)",
				"    at resolveField (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:435:10)",
				"    at executeFields (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:275:18)",
				"    at collectAndExecuteSubfields (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:713:10)",
				"    at completeObjectValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:703:10)",
				"    at completeValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:591:12)",
				"    at completeValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:557:21)",
				"    at completeValueCatchingError (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:495:19)",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:618:25",
				"    at Array.forEach (<anonymous>)",
				"    at forEach (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\iterall\\index.js:83:25)",
				"    at completeListValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:614:24)",
				"    at completeValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:573:12)",
				"    at completeValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:557:21)",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:492:16"
			]
		}
	}
}2019-11-25T13:25:15.359Z{
	"message": "Cannot return null for non-nullable field DepartmentPrint.image.",
	"locations": [
		{
			"line": 5,
			"column": 5
		}
	],
	"path": [
		"prints",
		0,
		"image"
	],
	"extensions": {
		"code": "INTERNAL_SERVER_ERROR",
		"exception": {
			"stacktrace": [
				"Error: Cannot return null for non-nullable field DepartmentPrint.image.",
				"    at completeValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:560:13)",
				"    at completeValueCatchingError (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:495:19)",
				"    at resolveField (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:435:10)",
				"    at executeFields (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:275:18)",
				"    at collectAndExecuteSubfields (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:713:10)",
				"    at completeObjectValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:703:10)",
				"    at completeValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:591:12)",
				"    at completeValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:557:21)",
				"    at completeValueCatchingError (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:495:19)",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:618:25",
				"    at Array.forEach (<anonymous>)",
				"    at forEach (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\iterall\\index.js:83:25)",
				"    at completeListValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:614:24)",
				"    at completeValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:573:12)",
				"    at completeValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:557:21)",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:492:16"
			]
		}
	}
}2019-11-25T13:25:57.330Z{
	"message": "Cannot return null for non-nullable field DepartmentPrint.image.",
	"locations": [
		{
			"line": 5,
			"column": 5
		}
	],
	"path": [
		"prints",
		0,
		"image"
	],
	"extensions": {
		"code": "INTERNAL_SERVER_ERROR",
		"exception": {
			"stacktrace": [
				"Error: Cannot return null for non-nullable field DepartmentPrint.image.",
				"    at completeValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:560:13)",
				"    at completeValueCatchingError (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:495:19)",
				"    at resolveField (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:435:10)",
				"    at executeFields (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:275:18)",
				"    at collectAndExecuteSubfields (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:713:10)",
				"    at completeObjectValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:703:10)",
				"    at completeValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:591:12)",
				"    at completeValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:557:21)",
				"    at completeValueCatchingError (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:495:19)",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:618:25",
				"    at Array.forEach (<anonymous>)",
				"    at forEach (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\iterall\\index.js:83:25)",
				"    at completeListValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:614:24)",
				"    at completeValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:573:12)",
				"    at completeValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:557:21)",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:492:16"
			]
		}
	}
}2019-11-25T13:27:29.073Z{
	"message": "Cannot return null for non-nullable field DepartmentPrint.image.",
	"locations": [
		{
			"line": 5,
			"column": 5
		}
	],
	"path": [
		"prints",
		0,
		"image"
	],
	"extensions": {
		"code": "INTERNAL_SERVER_ERROR",
		"exception": {
			"stacktrace": [
				"Error: Cannot return null for non-nullable field DepartmentPrint.image.",
				"    at completeValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:560:13)",
				"    at completeValueCatchingError (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:495:19)",
				"    at resolveField (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:435:10)",
				"    at executeFields (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:275:18)",
				"    at collectAndExecuteSubfields (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:713:10)",
				"    at completeObjectValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:703:10)",
				"    at completeValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:591:12)",
				"    at completeValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:557:21)",
				"    at completeValueCatchingError (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:495:19)",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:618:25",
				"    at Array.forEach (<anonymous>)",
				"    at forEach (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\iterall\\index.js:83:25)",
				"    at completeListValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:614:24)",
				"    at completeValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:573:12)",
				"    at completeValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:557:21)",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:492:16"
			]
		}
	}
}2019-11-25T13:30:32.383Z{
	"message": "Cannot return null for non-nullable field DepartmentPrint.image.",
	"locations": [
		{
			"line": 5,
			"column": 5
		}
	],
	"path": [
		"prints",
		0,
		"image"
	],
	"extensions": {
		"code": "INTERNAL_SERVER_ERROR",
		"exception": {
			"stacktrace": [
				"Error: Cannot return null for non-nullable field DepartmentPrint.image.",
				"    at completeValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:560:13)",
				"    at completeValueCatchingError (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:495:19)",
				"    at resolveField (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:435:10)",
				"    at executeFields (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:275:18)",
				"    at collectAndExecuteSubfields (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:713:10)",
				"    at completeObjectValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:703:10)",
				"    at completeValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:591:12)",
				"    at completeValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:557:21)",
				"    at completeValueCatchingError (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:495:19)",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:618:25",
				"    at Array.forEach (<anonymous>)",
				"    at forEach (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\iterall\\index.js:83:25)",
				"    at completeListValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:614:24)",
				"    at completeValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:573:12)",
				"    at completeValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:557:21)",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:492:16"
			]
		}
	}
}2019-11-25T13:31:49.212Z2019-11-25T13:32:18.489Z2019-11-25T13:35:21.906Z2019-11-25T13:44:33.813Z{
	"message": "Cannot return null for non-nullable field DepartmentPrint.image.",
	"locations": [
		{
			"line": 5,
			"column": 5
		}
	],
	"path": [
		"prints",
		0,
		"image"
	],
	"extensions": {
		"code": "INTERNAL_SERVER_ERROR",
		"exception": {
			"stacktrace": [
				"Error: Cannot return null for non-nullable field DepartmentPrint.image.",
				"    at completeValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:560:13)",
				"    at completeValueCatchingError (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:495:19)",
				"    at resolveField (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:435:10)",
				"    at executeFields (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:275:18)",
				"    at collectAndExecuteSubfields (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:713:10)",
				"    at completeObjectValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:703:10)",
				"    at completeValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:591:12)",
				"    at completeValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:557:21)",
				"    at completeValueCatchingError (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:495:19)",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:618:25",
				"    at Array.forEach (<anonymous>)",
				"    at forEach (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\iterall\\index.js:83:25)",
				"    at completeListValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:614:24)",
				"    at completeValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:573:12)",
				"    at completeValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:557:21)",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:492:16"
			]
		}
	}
}2019-11-25T13:46:01.260Z{
	"message": "Cannot return null for non-nullable field DepartmentPrint.image.",
	"locations": [
		{
			"line": 5,
			"column": 5
		}
	],
	"path": [
		"prints",
		0,
		"image"
	],
	"extensions": {
		"code": "INTERNAL_SERVER_ERROR",
		"exception": {
			"stacktrace": [
				"Error: Cannot return null for non-nullable field DepartmentPrint.image.",
				"    at completeValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:560:13)",
				"    at completeValueCatchingError (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:495:19)",
				"    at resolveField (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:435:10)",
				"    at executeFields (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:275:18)",
				"    at collectAndExecuteSubfields (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:713:10)",
				"    at completeObjectValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:703:10)",
				"    at completeValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:591:12)",
				"    at completeValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:557:21)",
				"    at completeValueCatchingError (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:495:19)",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:618:25",
				"    at Array.forEach (<anonymous>)",
				"    at forEach (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\iterall\\index.js:83:25)",
				"    at completeListValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:614:24)",
				"    at completeValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:573:12)",
				"    at completeValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:557:21)",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:492:16"
			]
		}
	}
}2019-11-25T13:51:06.471Z{
	"message": "print is not defined",
	"locations": [
		{
			"line": 2,
			"column": 3
		}
	],
	"path": [
		"prints"
	],
	"extensions": {
		"code": "INTERNAL_SERVER_ERROR",
		"exception": {
			"stacktrace": [
				"ReferenceError: print is not defined",
				"    at print (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\src\\resolvers\\query/department.js:28:78)",
				"    at tryCatch (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\regenerator-runtime\\runtime.js:45:40)",
				"    at Generator.invoke [as _invoke] (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\regenerator-runtime\\runtime.js:271:22)",
				"    at Generator.prototype.(anonymous function) [as next] (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\regenerator-runtime\\runtime.js:97:21)",
				"    at asyncGeneratorStep (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\src\\resolvers\\query\\department.js:14:103)",
				"    at _next (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\src\\resolvers\\query\\department.js:16:194)"
			]
		}
	}
}2019-11-25T13:51:21.846Z{
	"message": "Cannot return null for non-nullable field DepartmentPrint.image.",
	"locations": [
		{
			"line": 5,
			"column": 5
		}
	],
	"path": [
		"prints",
		0,
		"image"
	],
	"extensions": {
		"code": "INTERNAL_SERVER_ERROR",
		"exception": {
			"stacktrace": [
				"Error: Cannot return null for non-nullable field DepartmentPrint.image.",
				"    at completeValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:560:13)",
				"    at completeValueCatchingError (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:495:19)",
				"    at resolveField (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:435:10)",
				"    at executeFields (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:275:18)",
				"    at collectAndExecuteSubfields (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:713:10)",
				"    at completeObjectValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:703:10)",
				"    at completeValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:591:12)",
				"    at completeValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:557:21)",
				"    at completeValueCatchingError (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:495:19)",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:618:25",
				"    at Array.forEach (<anonymous>)",
				"    at forEach (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\iterall\\index.js:83:25)",
				"    at completeListValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:614:24)",
				"    at completeValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:573:12)",
				"    at completeValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:557:21)",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:492:16"
			]
		}
	}
}2019-11-25T13:52:46.941Z{
	"message": "Cannot return null for non-nullable field DepartmentPrint.image.",
	"locations": [
		{
			"line": 5,
			"column": 5
		}
	],
	"path": [
		"prints",
		0,
		"image"
	],
	"extensions": {
		"code": "INTERNAL_SERVER_ERROR",
		"exception": {
			"stacktrace": [
				"Error: Cannot return null for non-nullable field DepartmentPrint.image.",
				"    at completeValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:560:13)",
				"    at completeValueCatchingError (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:495:19)",
				"    at resolveField (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:435:10)",
				"    at executeFields (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:275:18)",
				"    at collectAndExecuteSubfields (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:713:10)",
				"    at completeObjectValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:703:10)",
				"    at completeValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:591:12)",
				"    at completeValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:557:21)",
				"    at completeValueCatchingError (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:495:19)",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:618:25",
				"    at Array.forEach (<anonymous>)",
				"    at forEach (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\iterall\\index.js:83:25)",
				"    at completeListValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:614:24)",
				"    at completeValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:573:12)",
				"    at completeValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:557:21)",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:492:16"
			]
		}
	}
}2019-11-25T13:53:54.009Z{
	"message": "Cannot return null for non-nullable field DepartmentPrint.image.",
	"locations": [
		{
			"line": 5,
			"column": 5
		}
	],
	"path": [
		"prints",
		0,
		"image"
	],
	"extensions": {
		"code": "INTERNAL_SERVER_ERROR",
		"exception": {
			"stacktrace": [
				"Error: Cannot return null for non-nullable field DepartmentPrint.image.",
				"    at completeValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:560:13)",
				"    at completeValueCatchingError (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:495:19)",
				"    at resolveField (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:435:10)",
				"    at executeFields (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:275:18)",
				"    at collectAndExecuteSubfields (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:713:10)",
				"    at completeObjectValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:703:10)",
				"    at completeValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:591:12)",
				"    at completeValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:557:21)",
				"    at completeValueCatchingError (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:495:19)",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:618:25",
				"    at Array.forEach (<anonymous>)",
				"    at forEach (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\iterall\\index.js:83:25)",
				"    at completeListValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:614:24)",
				"    at completeValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:573:12)",
				"    at completeValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:557:21)",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:492:16"
			]
		}
	}
}2019-11-25T13:55:52.579Z{
	"message": "Cannot return null for non-nullable field DepartmentPrint.image.",
	"locations": [
		{
			"line": 5,
			"column": 5
		}
	],
	"path": [
		"prints",
		0,
		"image"
	],
	"extensions": {
		"code": "INTERNAL_SERVER_ERROR",
		"exception": {
			"stacktrace": [
				"Error: Cannot return null for non-nullable field DepartmentPrint.image.",
				"    at completeValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:560:13)",
				"    at completeValueCatchingError (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:495:19)",
				"    at resolveField (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:435:10)",
				"    at executeFields (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:275:18)",
				"    at collectAndExecuteSubfields (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:713:10)",
				"    at completeObjectValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:703:10)",
				"    at completeValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:591:12)",
				"    at completeValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:557:21)",
				"    at completeValueCatchingError (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:495:19)",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:618:25",
				"    at Array.forEach (<anonymous>)",
				"    at forEach (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\iterall\\index.js:83:25)",
				"    at completeListValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:614:24)",
				"    at completeValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:573:12)",
				"    at completeValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:557:21)",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:492:16"
			]
		}
	}
}2019-11-25T14:13:26.479Z{
	"message": "Cannot return null for non-nullable field DepartmentPrint.image.",
	"locations": [
		{
			"line": 5,
			"column": 5
		}
	],
	"path": [
		"prints",
		0,
		"image"
	],
	"extensions": {
		"code": "INTERNAL_SERVER_ERROR",
		"exception": {
			"stacktrace": [
				"Error: Cannot return null for non-nullable field DepartmentPrint.image.",
				"    at completeValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:560:13)",
				"    at completeValueCatchingError (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:495:19)",
				"    at resolveField (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:435:10)",
				"    at executeFields (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:275:18)",
				"    at collectAndExecuteSubfields (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:713:10)",
				"    at completeObjectValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:703:10)",
				"    at completeValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:591:12)",
				"    at completeValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:557:21)",
				"    at completeValueCatchingError (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:495:19)",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:618:25",
				"    at Array.forEach (<anonymous>)",
				"    at forEach (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\iterall\\index.js:83:25)",
				"    at completeListValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:614:24)",
				"    at completeValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:573:12)",
				"    at completeValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:557:21)",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:492:16"
			]
		}
	}
}2019-11-25T14:16:40.872Z{
	"message": "Cannot return null for non-nullable field DepartmentPrint.image.",
	"locations": [
		{
			"line": 5,
			"column": 5
		}
	],
	"path": [
		"prints",
		0,
		"image"
	],
	"extensions": {
		"code": "INTERNAL_SERVER_ERROR",
		"exception": {
			"stacktrace": [
				"Error: Cannot return null for non-nullable field DepartmentPrint.image.",
				"    at completeValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:560:13)",
				"    at completeValueCatchingError (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:495:19)",
				"    at resolveField (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:435:10)",
				"    at executeFields (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:275:18)",
				"    at collectAndExecuteSubfields (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:713:10)",
				"    at completeObjectValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:703:10)",
				"    at completeValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:591:12)",
				"    at completeValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:557:21)",
				"    at completeValueCatchingError (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:495:19)",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:618:25",
				"    at Array.forEach (<anonymous>)",
				"    at forEach (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\iterall\\index.js:83:25)",
				"    at completeListValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:614:24)",
				"    at completeValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:573:12)",
				"    at completeValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:557:21)",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:492:16"
			]
		}
	}
}2019-11-25T14:24:53.937Z{
	"message": "Cannot return null for non-nullable field DepartmentPrint.image.",
	"locations": [
		{
			"line": 5,
			"column": 5
		}
	],
	"path": [
		"prints",
		0,
		"image"
	],
	"extensions": {
		"code": "INTERNAL_SERVER_ERROR",
		"exception": {
			"stacktrace": [
				"Error: Cannot return null for non-nullable field DepartmentPrint.image.",
				"    at completeValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:560:13)",
				"    at completeValueCatchingError (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:495:19)",
				"    at resolveField (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:435:10)",
				"    at executeFields (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:275:18)",
				"    at collectAndExecuteSubfields (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:713:10)",
				"    at completeObjectValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:703:10)",
				"    at completeValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:591:12)",
				"    at completeValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:557:21)",
				"    at completeValueCatchingError (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:495:19)",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:618:25",
				"    at Array.forEach (<anonymous>)",
				"    at forEach (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\iterall\\index.js:83:25)",
				"    at completeListValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:614:24)",
				"    at completeValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:573:12)",
				"    at completeValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:557:21)",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:492:16"
			]
		}
	}
}2019-11-25T14:25:10.308Z{
	"message": "Cannot return null for non-nullable field DepartmentPrint.image.",
	"locations": [
		{
			"line": 5,
			"column": 5
		}
	],
	"path": [
		"prints",
		0,
		"image"
	],
	"extensions": {
		"code": "INTERNAL_SERVER_ERROR",
		"exception": {
			"stacktrace": [
				"Error: Cannot return null for non-nullable field DepartmentPrint.image.",
				"    at completeValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:560:13)",
				"    at completeValueCatchingError (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:495:19)",
				"    at resolveField (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:435:10)",
				"    at executeFields (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:275:18)",
				"    at collectAndExecuteSubfields (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:713:10)",
				"    at completeObjectValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:703:10)",
				"    at completeValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:591:12)",
				"    at completeValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:557:21)",
				"    at completeValueCatchingError (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:495:19)",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:618:25",
				"    at Array.forEach (<anonymous>)",
				"    at forEach (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\iterall\\index.js:83:25)",
				"    at completeListValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:614:24)",
				"    at completeValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:573:12)",
				"    at completeValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:557:21)",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:492:16"
			]
		}
	}
}2019-11-25T14:46:53.516Z{
	"message": "Cannot return null for non-nullable field Mutation.createPrint.",
	"locations": [
		{
			"line": 2,
			"column": 3
		}
	],
	"path": [
		"createPrint"
	],
	"extensions": {
		"code": "INTERNAL_SERVER_ERROR",
		"exception": {
			"stacktrace": [
				"Error: Cannot return null for non-nullable field Mutation.createPrint.",
				"    at completeValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:560:13)",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:492:16",
				"    at process._tickCallback (internal/process/next_tick.js:68:7)"
			]
		}
	}
}2019-11-25T14:48:42.773Z{
	"message": "Cannot return null for non-nullable field Mutation.createPrint.",
	"locations": [
		{
			"line": 2,
			"column": 3
		}
	],
	"path": [
		"createPrint"
	],
	"extensions": {
		"code": "INTERNAL_SERVER_ERROR",
		"exception": {
			"stacktrace": [
				"Error: Cannot return null for non-nullable field Mutation.createPrint.",
				"    at completeValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:560:13)",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:492:16",
				"    at process._tickCallback (internal/process/next_tick.js:68:7)"
			]
		}
	}
}2019-11-25T15:11:08.499Z{
	"message": "Cannot return null for non-nullable field Mutation.createPrint.",
	"locations": [
		{
			"line": 2,
			"column": 3
		}
	],
	"path": [
		"createPrint"
	],
	"extensions": {
		"code": "INTERNAL_SERVER_ERROR",
		"exception": {
			"stacktrace": [
				"Error: Cannot return null for non-nullable field Mutation.createPrint.",
				"    at completeValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:560:13)",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:492:16",
				"    at process._tickCallback (internal/process/next_tick.js:68:7)"
			]
		}
	}
}2019-11-25T15:18:21.812Z{
	"message": "Cannot return null for non-nullable field Mutation.createPrint.",
	"locations": [
		{
			"line": 2,
			"column": 3
		}
	],
	"path": [
		"createPrint"
	],
	"extensions": {
		"code": "INTERNAL_SERVER_ERROR",
		"exception": {
			"stacktrace": [
				"Error: Cannot return null for non-nullable field Mutation.createPrint.",
				"    at completeValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:560:13)",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:492:16",
				"    at process._tickCallback (internal/process/next_tick.js:68:7)"
			]
		}
	}
}2019-11-25T15:33:44.031Z{
	"message": "Cannot return null for non-nullable field Mutation.createPrint.",
	"locations": [
		{
			"line": 2,
			"column": 3
		}
	],
	"path": [
		"createPrint"
	],
	"extensions": {
		"code": "INTERNAL_SERVER_ERROR",
		"exception": {
			"stacktrace": [
				"Error: Cannot return null for non-nullable field Mutation.createPrint.",
				"    at completeValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:560:13)",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:492:16",
				"    at process._tickCallback (internal/process/next_tick.js:68:7)"
			]
		}
	}
}2019-11-25T15:35:48.593Z{
	"message": "Cannot return null for non-nullable field Mutation.createPrint.",
	"locations": [
		{
			"line": 2,
			"column": 3
		}
	],
	"path": [
		"createPrint"
	],
	"extensions": {
		"code": "INTERNAL_SERVER_ERROR",
		"exception": {
			"stacktrace": [
				"Error: Cannot return null for non-nullable field Mutation.createPrint.",
				"    at completeValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:560:13)",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:492:16",
				"    at process._tickCallback (internal/process/next_tick.js:68:7)"
			]
		}
	}
}2019-11-25T15:38:12.956Z{
	"message": "Cannot return null for non-nullable field Mutation.createPrint.",
	"locations": [
		{
			"line": 2,
			"column": 3
		}
	],
	"path": [
		"createPrint"
	],
	"extensions": {
		"code": "INTERNAL_SERVER_ERROR",
		"exception": {
			"stacktrace": [
				"Error: Cannot return null for non-nullable field Mutation.createPrint.",
				"    at completeValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:560:13)",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:492:16",
				"    at process._tickCallback (internal/process/next_tick.js:68:7)"
			]
		}
	}
}2019-11-25T17:35:01.591Z{
	"message": "gm is not defined",
	"locations": [
		{
			"line": 2,
			"column": 3
		}
	],
	"path": [
		"createPrint"
	],
	"extensions": {
		"code": "INTERNAL_SERVER_ERROR",
		"exception": {
			"stacktrace": [
				"ReferenceError: gm is not defined",
				"    at gmToBuffer (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\src\\resolvers\\mutation/department.js:185:5)",
				"    at tryCatch (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\regenerator-runtime\\runtime.js:45:40)",
				"    at Generator.invoke [as _invoke] (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\regenerator-runtime\\runtime.js:271:22)",
				"    at Generator.prototype.(anonymous function) [as next] (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\regenerator-runtime\\runtime.js:97:21)",
				"    at asyncGeneratorStep (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\src\\resolvers\\mutation\\department.js:26:103)",
				"    at _next (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\src\\resolvers\\mutation\\department.js:28:194)",
				"    at process._tickCallback (internal/process/next_tick.js:68:7)"
			]
		}
	}
}2019-11-25T17:36:57.271Z{
	"message": "Cannot return null for non-nullable field Mutation.createPrint.",
	"locations": [
		{
			"line": 2,
			"column": 3
		}
	],
	"path": [
		"createPrint"
	],
	"extensions": {
		"code": "INTERNAL_SERVER_ERROR",
		"exception": {
			"stacktrace": [
				"Error: Cannot return null for non-nullable field Mutation.createPrint.",
				"    at completeValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:560:13)",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:492:16",
				"    at process._tickCallback (internal/process/next_tick.js:68:7)"
			]
		}
	}
}2019-11-25T17:39:55.127Z{
	"message": "Cannot return null for non-nullable field Mutation.createPrint.",
	"locations": [
		{
			"line": 2,
			"column": 3
		}
	],
	"path": [
		"createPrint"
	],
	"extensions": {
		"code": "INTERNAL_SERVER_ERROR",
		"exception": {
			"stacktrace": [
				"Error: Cannot return null for non-nullable field Mutation.createPrint.",
				"    at completeValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:560:13)",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:492:16",
				"    at process._tickCallback (internal/process/next_tick.js:68:7)"
			]
		}
	}
}2019-11-25T17:40:39.415Z{
	"message": "Cannot return null for non-nullable field Mutation.createPrint.",
	"locations": [
		{
			"line": 2,
			"column": 3
		}
	],
	"path": [
		"createPrint"
	],
	"extensions": {
		"code": "INTERNAL_SERVER_ERROR",
		"exception": {
			"stacktrace": [
				"Error: Cannot return null for non-nullable field Mutation.createPrint.",
				"    at completeValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:560:13)",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:492:16",
				"    at process._tickCallback (internal/process/next_tick.js:68:7)"
			]
		}
	}
}2019-11-25T17:44:05.266Z{
	"message": "Cannot return null for non-nullable field Mutation.createPrint.",
	"locations": [
		{
			"line": 2,
			"column": 3
		}
	],
	"path": [
		"createPrint"
	],
	"extensions": {
		"code": "INTERNAL_SERVER_ERROR",
		"exception": {
			"stacktrace": [
				"Error: Cannot return null for non-nullable field Mutation.createPrint.",
				"    at completeValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:560:13)",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:492:16",
				"    at process._tickCallback (internal/process/next_tick.js:68:7)"
			]
		}
	}
}2019-11-25T17:55:51.098Z{
	"message": "Cannot return null for non-nullable field Mutation.createPrint.",
	"locations": [
		{
			"line": 2,
			"column": 3
		}
	],
	"path": [
		"createPrint"
	],
	"extensions": {
		"code": "INTERNAL_SERVER_ERROR",
		"exception": {
			"stacktrace": [
				"Error: Cannot return null for non-nullable field Mutation.createPrint.",
				"    at completeValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:560:13)",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:492:16",
				"    at process._tickCallback (internal/process/next_tick.js:68:7)"
			]
		}
	}
}2019-11-25T18:03:35.887Z{
	"message": "Cannot return null for non-nullable field Mutation.createPrint.",
	"locations": [
		{
			"line": 2,
			"column": 3
		}
	],
	"path": [
		"createPrint"
	],
	"extensions": {
		"code": "INTERNAL_SERVER_ERROR",
		"exception": {
			"stacktrace": [
				"Error: Cannot return null for non-nullable field Mutation.createPrint.",
				"    at completeValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:560:13)",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:492:16",
				"    at process._tickCallback (internal/process/next_tick.js:68:7)"
			]
		}
	}
}2019-11-25T18:05:49.953Z{
	"message": "Cannot return null for non-nullable field Mutation.createPrint.",
	"locations": [
		{
			"line": 2,
			"column": 3
		}
	],
	"path": [
		"createPrint"
	],
	"extensions": {
		"code": "INTERNAL_SERVER_ERROR",
		"exception": {
			"stacktrace": [
				"Error: Cannot return null for non-nullable field Mutation.createPrint.",
				"    at completeValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:560:13)",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:492:16",
				"    at process._tickCallback (internal/process/next_tick.js:68:7)"
			]
		}
	}
}2019-11-25T18:08:49.214Z{
	"message": "Cannot return null for non-nullable field Mutation.createPrint.",
	"locations": [
		{
			"line": 2,
			"column": 3
		}
	],
	"path": [
		"createPrint"
	],
	"extensions": {
		"code": "INTERNAL_SERVER_ERROR",
		"exception": {
			"stacktrace": [
				"Error: Cannot return null for non-nullable field Mutation.createPrint.",
				"    at completeValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:560:13)",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:492:16",
				"    at process._tickCallback (internal/process/next_tick.js:68:7)"
			]
		}
	}
}2019-11-25T18:14:01.122Z{
	"message": "Cannot return null for non-nullable field Mutation.createPrint.",
	"locations": [
		{
			"line": 2,
			"column": 3
		}
	],
	"path": [
		"createPrint"
	],
	"extensions": {
		"code": "INTERNAL_SERVER_ERROR",
		"exception": {
			"stacktrace": [
				"Error: Cannot return null for non-nullable field Mutation.createPrint.",
				"    at completeValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:560:13)",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:492:16",
				"    at process._tickCallback (internal/process/next_tick.js:68:7)"
			]
		}
	}
}2019-11-25T18:16:09.005Z{
	"message": "Invalid attempt to spread non-iterable instance",
	"locations": [
		{
			"line": 2,
			"column": 3
		}
	],
	"path": [
		"createPrint"
	],
	"extensions": {
		"code": "INTERNAL_SERVER_ERROR",
		"exception": {
			"stacktrace": [
				"TypeError: Invalid attempt to spread non-iterable instance",
				"    at _nonIterableSpread (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\src\\resolvers\\mutation\\department.js:18:39)",
				"    at _toConsumableArray (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\src\\resolvers\\mutation\\department.js:16:95)",
				"    at _callee11$ (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\src\\resolvers\\mutation/department.js:201:12)",
				"    at tryCatch (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\regenerator-runtime\\runtime.js:45:40)",
				"    at Generator.invoke [as _invoke] (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\regenerator-runtime\\runtime.js:271:22)",
				"    at Generator.prototype.(anonymous function) [as next] (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\regenerator-runtime\\runtime.js:97:21)",
				"    at asyncGeneratorStep (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\src\\resolvers\\mutation\\department.js:34:103)",
				"    at _next (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\src\\resolvers\\mutation\\department.js:36:194)",
				"    at process._tickCallback (internal/process/next_tick.js:68:7)"
			]
		}
	}
}2019-11-25T18:18:37.492Z{
	"message": "value too long for type character varying(255)",
	"locations": [
		{
			"line": 2,
			"column": 3
		}
	],
	"path": [
		"createPrint"
	],
	"extensions": {
		"code": "INTERNAL_SERVER_ERROR",
		"exception": {
			"name": "SequelizeDatabaseError",
			"parent": {
				"name": "error",
				"length": 99,
				"severity": "ERROR",
				"code": "22001",
				"file": "varchar.c",
				"line": "624",
				"routine": "varchar",
				"sql": "INSERT INTO \"biophys\".\"departmentPrints\" (\"id\",\"fileLink\",\"title\",\"image\",\"description\",\"createdAt\",\"updatedAt\") VALUES (DEFAULT,$1,$2,$3,$4,$5,$6) RETURNING *;",
				"parameters": [
					"/files/prints/55189a65-88bb-4b85-9e80-03f6191b5e57.pdf",
					"wwwwwwwwwwww",
					"",
					"wwwwwwwwwwwwwwwwwwwwwwwwww",
					"2019-11-25 18:18:37.438 +00:00",
					"2019-11-25 18:18:37.438 +00:00"
				]
			},
			"original": {
				"name": "error",
				"length": 99,
				"severity": "ERROR",
				"code": "22001",
				"file": "varchar.c",
				"line": "624",
				"routine": "varchar",
				"sql": "INSERT INTO \"biophys\".\"departmentPrints\" (\"id\",\"fileLink\",\"title\",\"image\",\"description\",\"createdAt\",\"updatedAt\") VALUES (DEFAULT,$1,$2,$3,$4,$5,$6) RETURNING *;",
				"parameters": [
					"/files/prints/55189a65-88bb-4b85-9e80-03f6191b5e57.pdf",
					"wwwwwwwwwwww",
					"",
					"wwwwwwwwwwwwwwwwwwwwwwwwww",
					"2019-11-25 18:18:37.438 +00:00",
					"2019-11-25 18:18:37.438 +00:00"
				]
			},
			"sql": "INSERT INTO \"biophys\".\"departmentPrints\" (\"id\",\"fileLink\",\"title\",\"image\",\"description\",\"createdAt\",\"updatedAt\") VALUES (DEFAULT,$1,$2,$3,$4,$5,$6) RETURNING *;",
			"parameters": [
				"/files/prints/55189a65-88bb-4b85-9e80-03f6191b5e57.pdf",
				"wwwwwwwwwwww",
				"",
				"wwwwwwwwwwwwwwwwwwwwwwwwww",
				"2019-11-25 18:18:37.438 +00:00",
				"2019-11-25 18:18:37.438 +00:00"
			],
			"stacktrace": [
				"SequelizeDatabaseError: value too long for type character varying(255)",
				"    at Query.formatError (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\sequelize\\lib\\dialects\\postgres\\query.js:366:16)",
				"    at query.catch.err (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\sequelize\\lib\\dialects\\postgres\\query.js:72:18)",
				"    at tryCatcher (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\util.js:16:23)",
				"    at Promise._settlePromiseFromHandler (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\promise.js:517:31)",
				"    at Promise._settlePromise (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\promise.js:574:18)",
				"    at Promise._settlePromise0 (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\promise.js:619:10)",
				"    at Promise._settlePromises (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\promise.js:695:18)",
				"    at _drainQueueStep (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\async.js:138:12)",
				"    at _drainQueue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\async.js:131:9)",
				"    at Async._drainQueues (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\async.js:147:5)",
				"    at Immediate.Async.drainQueues [as _onImmediate] (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\async.js:17:14)",
				"    at runCallback (timers.js:705:18)",
				"    at tryOnImmediate (timers.js:676:5)",
				"    at processImmediate (timers.js:658:5)"
			]
		}
	}
<<<<<<< HEAD
}2019-11-26T11:06:02.324Z{
	"message": "The \"path\" argument must be of type string. Received type undefined",
=======
}2019-11-23T20:39:37.260Z2019-11-23T20:39:37.263Z{
	"message": "Cannot query field \"link\" on type \"DepartmentPrint\". Did you mean \"fileLink\"?",
	"locations": [
		{
			"line": 4,
			"column": 5
		}
	],
	"extensions": {
		"code": "GRAPHQL_VALIDATION_FAILED",
		"exception": {
			"stacktrace": [
				"GraphQLError: Cannot query field \"link\" on type \"DepartmentPrint\". Did you mean \"fileLink\"?",
				"    at Object.Field (C:\\Users\\HPPro\\Documents\\projects\\biophys-docker\\node\\node_modules\\graphql\\validation\\rules\\FieldsOnCorrectType.js:53:31)",
				"    at Object.enter (C:\\Users\\HPPro\\Documents\\projects\\biophys-docker\\node\\node_modules\\graphql\\language\\visitor.js:324:29)",
				"    at Object.enter (C:\\Users\\HPPro\\Documents\\projects\\biophys-docker\\node\\node_modules\\graphql\\language\\visitor.js:375:25)",
				"    at visit (C:\\Users\\HPPro\\Documents\\projects\\biophys-docker\\node\\node_modules\\graphql\\language\\visitor.js:242:26)",
				"    at Object.validate (C:\\Users\\HPPro\\Documents\\projects\\biophys-docker\\node\\node_modules\\graphql\\validation\\validate.js:73:24)",
				"    at validate (C:\\Users\\HPPro\\Documents\\projects\\biophys-docker\\node\\node_modules\\apollo-server-core\\src\\requestPipeline.ts:426:22)",
				"    at Object.<anonymous> (C:\\Users\\HPPro\\Documents\\projects\\biophys-docker\\node\\node_modules\\apollo-server-core\\src\\requestPipeline.ts:250:32)",
				"    at Generator.next (<anonymous>)",
				"    at fulfilled (C:\\Users\\HPPro\\Documents\\projects\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:5:58)",
				"    at process._tickCallback (internal/process/next_tick.js:68:7)"
			]
		}
	}
}{
	"message": "Cannot query field \"imageUrl\" on type \"DepartmentPrint\".",
	"locations": [
		{
			"line": 5,
			"column": 5
		}
	],
	"extensions": {
		"code": "GRAPHQL_VALIDATION_FAILED",
		"exception": {
			"stacktrace": [
				"GraphQLError: Cannot query field \"imageUrl\" on type \"DepartmentPrint\".",
				"    at Object.Field (C:\\Users\\HPPro\\Documents\\projects\\biophys-docker\\node\\node_modules\\graphql\\validation\\rules\\FieldsOnCorrectType.js:53:31)",
				"    at Object.enter (C:\\Users\\HPPro\\Documents\\projects\\biophys-docker\\node\\node_modules\\graphql\\language\\visitor.js:324:29)",
				"    at Object.enter (C:\\Users\\HPPro\\Documents\\projects\\biophys-docker\\node\\node_modules\\graphql\\language\\visitor.js:375:25)",
				"    at visit (C:\\Users\\HPPro\\Documents\\projects\\biophys-docker\\node\\node_modules\\graphql\\language\\visitor.js:242:26)",
				"    at Object.validate (C:\\Users\\HPPro\\Documents\\projects\\biophys-docker\\node\\node_modules\\graphql\\validation\\validate.js:73:24)",
				"    at validate (C:\\Users\\HPPro\\Documents\\projects\\biophys-docker\\node\\node_modules\\apollo-server-core\\src\\requestPipeline.ts:426:22)",
				"    at Object.<anonymous> (C:\\Users\\HPPro\\Documents\\projects\\biophys-docker\\node\\node_modules\\apollo-server-core\\src\\requestPipeline.ts:250:32)",
				"    at Generator.next (<anonymous>)",
				"    at fulfilled (C:\\Users\\HPPro\\Documents\\projects\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:5:58)",
				"    at process._tickCallback (internal/process/next_tick.js:68:7)"
			]
		}
	}
}2019-11-23T20:42:03.015Z{
	"message": "uploadedImage is not defined",
	"locations": [
		{
			"line": 2,
			"column": 3
		}
	],
	"path": [
		"createPrint"
	],
	"extensions": {
		"code": "INTERNAL_SERVER_ERROR",
		"exception": {
			"stacktrace": [
				"ReferenceError: uploadedImage is not defined",
				"    at uploadedImage (C:\\Users\\HPPro\\Documents\\projects\\biophys-docker\\node\\src\\resolvers\\mutation/department.js:165:43)",
				"    at tryCatch (C:\\Users\\HPPro\\Documents\\projects\\biophys-docker\\node\\node_modules\\regenerator-runtime\\runtime.js:45:40)",
				"    at Generator.invoke [as _invoke] (C:\\Users\\HPPro\\Documents\\projects\\biophys-docker\\node\\node_modules\\regenerator-runtime\\runtime.js:271:22)",
				"    at Generator.prototype.(anonymous function) [as next] (C:\\Users\\HPPro\\Documents\\projects\\biophys-docker\\node\\node_modules\\regenerator-runtime\\runtime.js:97:21)",
				"    at asyncGeneratorStep (C:\\Users\\HPPro\\Documents\\projects\\biophys-docker\\node\\src\\resolvers\\mutation\\department.js:26:103)",
				"    at _next (C:\\Users\\HPPro\\Documents\\projects\\biophys-docker\\node\\src\\resolvers\\mutation\\department.js:28:194)",
				"    at process._tickCallback (internal/process/next_tick.js:68:7)"
			]
		}
	}
}2019-11-23T21:12:32.265Z{
	"message": "Validation error: Title required,\nValidation error: Minimem 5 characters, Maximum 100 characters,\nValidation error: Description required,\nValidation error: Maximum 1200 characters",
>>>>>>> 387644cbf9ab03cd84bb7d09138a9705e8cbf007
	"locations": [
		{
			"line": 2,
			"column": 3
		}
	],
	"path": [
<<<<<<< HEAD
		"deletePrint"
=======
		"createPrint"
>>>>>>> 387644cbf9ab03cd84bb7d09138a9705e8cbf007
	],
	"extensions": {
		"code": "INTERNAL_SERVER_ERROR",
		"exception": {
<<<<<<< HEAD
			"stacktrace": [
				"TypeError [ERR_INVALID_ARG_TYPE]: The \"path\" argument must be of type string. Received type undefined",
				"    at assertPath (path.js:39:11)",
				"    at Object.basename (path.js:749:5)",
				"    at basename (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\src\\utils/imageFunctions.js:22:30)",
				"    at _callee13$ (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\src\\resolvers\\mutation/department.js:199:5)",
				"    at tryCatch (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\regenerator-runtime\\runtime.js:45:40)",
				"    at Generator.invoke [as _invoke] (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\regenerator-runtime\\runtime.js:271:22)",
				"    at Generator.prototype.(anonymous function) [as next] (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\regenerator-runtime\\runtime.js:97:21)",
				"    at asyncGeneratorStep (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\src\\resolvers\\mutation\\department.js:30:103)",
				"    at _next (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\src\\resolvers\\mutation\\department.js:32:194)"
=======
			"name": "SequelizeValidationError",
			"errors": [
				{
					"message": "Title required",
					"type": "Validation error",
					"path": "title",
					"value": "",
					"origin": "FUNCTION",
					"instance": {
						"id": null,
						"description": "",
						"title": "",
						"fileLink": "files/prints/520edeb5-6144-4980-97c5-4a1ce6864bf5.pdf",
						"updatedAt": "2019-11-23T21:12:32.154Z",
						"createdAt": "2019-11-23T21:12:32.154Z"
					},
					"validatorKey": "notEmpty",
					"validatorName": "notEmpty",
					"validatorArgs": [
						true
					],
					"original": {
						"validatorName": "notEmpty",
						"validatorArgs": [
							true
						]
					}
				},
				{
					"message": "Minimem 5 characters, Maximum 100 characters",
					"type": "Validation error",
					"path": "title",
					"value": "",
					"origin": "FUNCTION",
					"instance": {
						"id": null,
						"description": "",
						"title": "",
						"fileLink": "files/prints/520edeb5-6144-4980-97c5-4a1ce6864bf5.pdf",
						"updatedAt": "2019-11-23T21:12:32.154Z",
						"createdAt": "2019-11-23T21:12:32.154Z"
					},
					"validatorKey": "len",
					"validatorName": "len",
					"validatorArgs": [
						5,
						100
					],
					"original": {
						"validatorName": "len",
						"validatorArgs": [
							5,
							100
						]
					}
				},
				{
					"message": "Description required",
					"type": "Validation error",
					"path": "description",
					"value": "",
					"origin": "FUNCTION",
					"instance": {
						"id": null,
						"description": "",
						"title": "",
						"fileLink": "files/prints/520edeb5-6144-4980-97c5-4a1ce6864bf5.pdf",
						"updatedAt": "2019-11-23T21:12:32.154Z",
						"createdAt": "2019-11-23T21:12:32.154Z"
					},
					"validatorKey": "notEmpty",
					"validatorName": "notEmpty",
					"validatorArgs": [
						true
					],
					"original": {
						"validatorName": "notEmpty",
						"validatorArgs": [
							true
						]
					}
				},
				{
					"message": "Maximum 1200 characters",
					"type": "Validation error",
					"path": "description",
					"value": "",
					"origin": "FUNCTION",
					"instance": {
						"id": null,
						"description": "",
						"title": "",
						"fileLink": "files/prints/520edeb5-6144-4980-97c5-4a1ce6864bf5.pdf",
						"updatedAt": "2019-11-23T21:12:32.154Z",
						"createdAt": "2019-11-23T21:12:32.154Z"
					},
					"validatorKey": "len",
					"validatorName": "len",
					"validatorArgs": [
						5,
						1200
					],
					"original": {
						"validatorName": "len",
						"validatorArgs": [
							5,
							1200
						]
					}
				}
			],
			"stacktrace": [
				"SequelizeValidationError: Validation error: Title required,",
				"Validation error: Minimem 5 characters, Maximum 100 characters,",
				"Validation error: Description required,",
				"Validation error: Maximum 1200 characters",
				"    at Promise.all.then (C:\\Users\\HPPro\\Documents\\projects\\biophys-docker\\node\\node_modules\\sequelize\\lib\\instance-validator.js:74:15)",
				"    at tryCatcher (C:\\Users\\HPPro\\Documents\\projects\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\util.js:16:23)",
				"    at Promise._settlePromiseFromHandler (C:\\Users\\HPPro\\Documents\\projects\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\promise.js:517:31)",
				"    at Promise._settlePromise (C:\\Users\\HPPro\\Documents\\projects\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\promise.js:574:18)",
				"    at Promise._settlePromise0 (C:\\Users\\HPPro\\Documents\\projects\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\promise.js:619:10)",
				"    at Promise._settlePromises (C:\\Users\\HPPro\\Documents\\projects\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\promise.js:699:18)",
				"    at Promise._fulfill (C:\\Users\\HPPro\\Documents\\projects\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\promise.js:643:18)",
				"    at PromiseArray._resolve (C:\\Users\\HPPro\\Documents\\projects\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\promise_array.js:126:19)",
				"    at PromiseArray._promiseFulfilled (C:\\Users\\HPPro\\Documents\\projects\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\promise_array.js:144:14)",
				"    at Promise._settlePromise (C:\\Users\\HPPro\\Documents\\projects\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\promise.js:579:26)",
				"    at Promise._settlePromise0 (C:\\Users\\HPPro\\Documents\\projects\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\promise.js:619:10)",
				"    at Promise._settlePromises (C:\\Users\\HPPro\\Documents\\projects\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\promise.js:699:18)",
				"    at _drainQueueStep (C:\\Users\\HPPro\\Documents\\projects\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\async.js:138:12)",
				"    at _drainQueue (C:\\Users\\HPPro\\Documents\\projects\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\async.js:131:9)",
				"    at Async._drainQueues (C:\\Users\\HPPro\\Documents\\projects\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\async.js:147:5)",
				"    at Immediate.Async.drainQueues [as _onImmediate] (C:\\Users\\HPPro\\Documents\\projects\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\async.js:17:14)",
				"    at runCallback (timers.js:705:18)",
				"    at tryOnImmediate (timers.js:676:5)",
				"    at processImmediate (timers.js:658:5)"
>>>>>>> 387644cbf9ab03cd84bb7d09138a9705e8cbf007
			]
		}
	}
}2019-12-02T11:35:46.073Z{
	"message": "Variable \"$title\" of required type \"String!\" was not provided.",
	"locations": [
		{
			"line": 1,
			"column": 29
		}
	],
	"extensions": {
		"code": "INTERNAL_SERVER_ERROR",
		"exception": {
			"stacktrace": [
				"GraphQLError: Variable \"$title\" of required type \"String!\" was not provided.",
				"    at _loop (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\values.js:94:17)",
				"    at coerceVariableValues (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\values.js:121:16)",
				"    at getVariableValues (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\values.js:48:19)",
				"    at buildExecutionContext (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:184:61)",
				"    at executeImpl (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:89:20)",
				"    at Object.execute (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:64:35)",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\src\\requestPipeline.ts:464:30",
				"    at Generator.next (<anonymous>)",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:8:71",
				"    at new Promise (<anonymous>)",
				"    at __awaiter (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:4:12)",
				"    at execute (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:219:20)",
				"    at Object.<anonymous> (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\src\\requestPipeline.ts:345:30)",
				"    at Generator.next (<anonymous>)",
				"    at fulfilled (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:5:58)",
				"    at process._tickCallback (internal/process/next_tick.js:68:7)"
			]
		}
	}
}2019-12-12T06:43:37.648Z{
	"message": "Variable \"$title\" of required type \"String!\" was not provided.",
	"locations": [
		{
			"line": 1,
			"column": 29
		}
	],
	"extensions": {
		"code": "INTERNAL_SERVER_ERROR",
		"exception": {
			"stacktrace": [
				"GraphQLError: Variable \"$title\" of required type \"String!\" was not provided.",
				"    at _loop (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\values.js:94:17)",
				"    at coerceVariableValues (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\values.js:121:16)",
				"    at getVariableValues (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\values.js:48:19)",
				"    at buildExecutionContext (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:184:61)",
				"    at executeImpl (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:89:20)",
				"    at Object.execute (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:64:35)",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\src\\requestPipeline.ts:464:30",
				"    at Generator.next (<anonymous>)",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:8:71",
				"    at new Promise (<anonymous>)",
				"    at __awaiter (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:4:12)",
				"    at execute (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:219:20)",
				"    at Object.<anonymous> (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\src\\requestPipeline.ts:345:30)",
				"    at Generator.next (<anonymous>)",
				"    at fulfilled (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:5:58)",
				"    at process._tickCallback (internal/process/next_tick.js:68:7)"
			]
		}
	}
}2019-12-12T06:44:56.790Z{
	"message": "Variable \"$title\" of required type \"String!\" was not provided.",
	"locations": [
		{
			"line": 1,
			"column": 29
		}
	],
	"extensions": {
		"code": "INTERNAL_SERVER_ERROR",
		"exception": {
			"stacktrace": [
				"GraphQLError: Variable \"$title\" of required type \"String!\" was not provided.",
				"    at _loop (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\values.js:94:17)",
				"    at coerceVariableValues (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\values.js:121:16)",
				"    at getVariableValues (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\values.js:48:19)",
				"    at buildExecutionContext (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:184:61)",
				"    at executeImpl (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:89:20)",
				"    at Object.execute (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:64:35)",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\src\\requestPipeline.ts:464:30",
				"    at Generator.next (<anonymous>)",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:8:71",
				"    at new Promise (<anonymous>)",
				"    at __awaiter (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:4:12)",
				"    at execute (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:219:20)",
				"    at Object.<anonymous> (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\src\\requestPipeline.ts:345:30)",
				"    at Generator.next (<anonymous>)",
				"    at fulfilled (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:5:58)",
				"    at process._tickCallback (internal/process/next_tick.js:68:7)"
			]
		}
	}
}2019-12-12T06:47:09.494Z{
	"message": "Cannot return null for non-nullable field Mutation.createScheduleYear.",
	"locations": [
		{
			"line": 2,
			"column": 3
		}
	],
	"path": [
		"createScheduleYear"
	],
	"extensions": {
		"code": "INTERNAL_SERVER_ERROR",
		"exception": {
			"stacktrace": [
				"Error: Cannot return null for non-nullable field Mutation.createScheduleYear.",
				"    at completeValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:560:13)",
				"    at completeValueCatchingError (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:495:19)",
				"    at resolveField (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:435:10)",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:244:18",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\jsutils\\promiseReduce.js:23:10",
				"    at Array.reduce (<anonymous>)",
				"    at promiseReduce (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\jsutils\\promiseReduce.js:20:17)",
				"    at executeFieldsSerially (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:241:37)",
				"    at executeOperation (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:219:55)",
				"    at executeImpl (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:104:14)",
				"    at Object.execute (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:64:35)",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\src\\requestPipeline.ts:464:30",
				"    at Generator.next (<anonymous>)",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:8:71",
				"    at new Promise (<anonymous>)",
				"    at __awaiter (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:4:12)",
				"    at execute (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:219:20)",
				"    at Object.<anonymous> (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\src\\requestPipeline.ts:345:30)",
				"    at Generator.next (<anonymous>)",
				"    at fulfilled (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:5:58)",
				"    at process._tickCallback (internal/process/next_tick.js:68:7)"
			]
		}
	}
}2019-12-12T07:01:11.737Z{
	"message": "Unknown argument \"title\" on field \"createScheduleYear\" of type \"Mutation\".",
	"locations": [
		{
			"line": 2,
			"column": 22
		}
	],
	"extensions": {
		"code": "GRAPHQL_VALIDATION_FAILED",
		"exception": {
			"stacktrace": [
				"GraphQLError: Unknown argument \"title\" on field \"createScheduleYear\" of type \"Mutation\".",
				"    at Object.Argument (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\validation\\rules\\KnownArgumentNames.js:60:29)",
				"    at Object.enter (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\language\\visitor.js:324:29)",
				"    at Object.enter (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\language\\visitor.js:375:25)",
				"    at visit (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\language\\visitor.js:242:26)",
				"    at Object.validate (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\validation\\validate.js:73:24)",
				"    at validate (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\src\\requestPipeline.ts:426:22)",
				"    at Object.<anonymous> (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\src\\requestPipeline.ts:250:32)",
				"    at Generator.next (<anonymous>)",
				"    at fulfilled (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:5:58)",
				"    at process._tickCallback (internal/process/next_tick.js:68:7)"
			]
		}
	}
}2019-12-12T07:04:56.350Z2019-12-12T07:04:56.351Z{
	"message": "Variable \"$inputData\" got invalid value { title: \"Бакалавриат 1 курс\", year: 2019, term: 1 }; Field calendarYear of required type Int! was not provided.",
	"locations": [
		{
			"line": 1,
			"column": 29
		}
	],
	"extensions": {
		"code": "INTERNAL_SERVER_ERROR",
		"exception": {
			"stacktrace": [
				"GraphQLError: Variable \"$inputData\" got invalid value { title: \"Бакалавриат 1 курс\", year: 2019, term: 1 }; Field calendarYear of required type Int! was not provided.",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\values.js:116:15",
				"    at coerceInputValueImpl (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\utilities\\coerceInputValue.js:99:11)",
				"    at coerceInputValueImpl (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\utilities\\coerceInputValue.js:54:14)",
				"    at coerceInputValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\utilities\\coerceInputValue.js:37:10)",
				"    at _loop (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\values.js:109:69)",
				"    at coerceVariableValues (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\values.js:121:16)",
				"    at getVariableValues (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\values.js:48:19)",
				"    at buildExecutionContext (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:184:61)",
				"    at executeImpl (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:89:20)",
				"    at Object.execute (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:64:35)",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\src\\requestPipeline.ts:464:30",
				"    at Generator.next (<anonymous>)",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:8:71",
				"    at new Promise (<anonymous>)",
				"    at __awaiter (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:4:12)",
				"    at execute (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:219:20)",
				"    at Object.<anonymous> (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\src\\requestPipeline.ts:345:30)",
				"    at Generator.next (<anonymous>)",
				"    at fulfilled (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:5:58)",
				"    at process._tickCallback (internal/process/next_tick.js:68:7)"
			]
		}
	}
}{
	"message": "Variable \"$inputData\" got invalid value { title: \"Бакалавриат 1 курс\", year: 2019, term: 1 }; Field \"year\" is not defined by type ScheduleYearCreateData.",
	"locations": [
		{
			"line": 1,
			"column": 29
		}
	],
	"extensions": {
		"code": "INTERNAL_SERVER_ERROR",
		"exception": {
			"stacktrace": [
				"GraphQLError: Variable \"$inputData\" got invalid value { title: \"Бакалавриат 1 курс\", year: 2019, term: 1 }; Field \"year\" is not defined by type ScheduleYearCreateData.",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\values.js:116:15",
				"    at coerceInputValueImpl (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\utilities\\coerceInputValue.js:114:9)",
				"    at coerceInputValueImpl (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\utilities\\coerceInputValue.js:54:14)",
				"    at coerceInputValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\utilities\\coerceInputValue.js:37:10)",
				"    at _loop (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\values.js:109:69)",
				"    at coerceVariableValues (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\values.js:121:16)",
				"    at getVariableValues (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\values.js:48:19)",
				"    at buildExecutionContext (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:184:61)",
				"    at executeImpl (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:89:20)",
				"    at Object.execute (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:64:35)",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\src\\requestPipeline.ts:464:30",
				"    at Generator.next (<anonymous>)",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:8:71",
				"    at new Promise (<anonymous>)",
				"    at __awaiter (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:4:12)",
				"    at execute (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:219:20)",
				"    at Object.<anonymous> (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\src\\requestPipeline.ts:345:30)",
				"    at Generator.next (<anonymous>)",
				"    at fulfilled (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:5:58)",
				"    at process._tickCallback (internal/process/next_tick.js:68:7)"
			]
		}
	}
}2019-12-12T07:07:30.840Z{
	"message": "column scheduleYear.calendarYear does not exist",
	"locations": [
		{
			"line": 2,
			"column": 3
		}
	],
	"path": [
		"years"
	],
	"extensions": {
		"code": "INTERNAL_SERVER_ERROR",
		"exception": {
			"name": "SequelizeDatabaseError",
			"parent": {
				"name": "error",
				"length": 124,
				"severity": "ERROR",
				"code": "42703",
				"position": "118",
				"file": "parse_relation.c",
				"line": "3294",
				"routine": "errorMissingColumn",
				"sql": "SELECT \"id\", \"title\", \"year\", \"term\", \"createdAt\", \"updatedAt\" FROM \"biophys\".\"scheduleYear\" AS \"scheduleYear\" WHERE \"scheduleYear\".\"calendarYear\" = 2019 AND \"scheduleYear\".\"term\" = 1;"
			},
			"original": {
				"name": "error",
				"length": 124,
				"severity": "ERROR",
				"code": "42703",
				"position": "118",
				"file": "parse_relation.c",
				"line": "3294",
				"routine": "errorMissingColumn",
				"sql": "SELECT \"id\", \"title\", \"year\", \"term\", \"createdAt\", \"updatedAt\" FROM \"biophys\".\"scheduleYear\" AS \"scheduleYear\" WHERE \"scheduleYear\".\"calendarYear\" = 2019 AND \"scheduleYear\".\"term\" = 1;"
			},
			"sql": "SELECT \"id\", \"title\", \"year\", \"term\", \"createdAt\", \"updatedAt\" FROM \"biophys\".\"scheduleYear\" AS \"scheduleYear\" WHERE \"scheduleYear\".\"calendarYear\" = 2019 AND \"scheduleYear\".\"term\" = 1;",
			"stacktrace": [
				"SequelizeDatabaseError: column scheduleYear.calendarYear does not exist",
				"    at Query.formatError (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\sequelize\\lib\\dialects\\postgres\\query.js:366:16)",
				"    at query.catch.err (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\sequelize\\lib\\dialects\\postgres\\query.js:72:18)",
				"    at tryCatcher (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\util.js:16:23)",
				"    at Promise._settlePromiseFromHandler (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\promise.js:517:31)",
				"    at Promise._settlePromise (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\promise.js:574:18)",
				"    at Promise._settlePromise0 (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\promise.js:619:10)",
				"    at Promise._settlePromises (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\promise.js:695:18)",
				"    at _drainQueueStep (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\async.js:138:12)",
				"    at _drainQueue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\async.js:131:9)",
				"    at Async._drainQueues (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\async.js:147:5)",
				"    at Immediate.Async.drainQueues [as _onImmediate] (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\async.js:17:14)",
				"    at runCallback (timers.js:705:18)",
				"    at tryOnImmediate (timers.js:676:5)",
				"    at processImmediate (timers.js:658:5)"
			]
		}
	}
}2019-12-12T07:08:37.853Z2019-12-12T07:08:37.854Z{
	"message": "Variable \"$inputData\" got invalid value { title: \"Бакалавриат 1 курс\", year: 2019, term: 1 }; Field calendarYear of required type Int! was not provided.",
	"locations": [
		{
			"line": 1,
			"column": 29
		}
	],
	"extensions": {
		"code": "INTERNAL_SERVER_ERROR",
		"exception": {
			"stacktrace": [
				"GraphQLError: Variable \"$inputData\" got invalid value { title: \"Бакалавриат 1 курс\", year: 2019, term: 1 }; Field calendarYear of required type Int! was not provided.",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\values.js:116:15",
				"    at coerceInputValueImpl (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\utilities\\coerceInputValue.js:99:11)",
				"    at coerceInputValueImpl (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\utilities\\coerceInputValue.js:54:14)",
				"    at coerceInputValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\utilities\\coerceInputValue.js:37:10)",
				"    at _loop (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\values.js:109:69)",
				"    at coerceVariableValues (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\values.js:121:16)",
				"    at getVariableValues (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\values.js:48:19)",
				"    at buildExecutionContext (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:184:61)",
				"    at executeImpl (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:89:20)",
				"    at Object.execute (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:64:35)",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\src\\requestPipeline.ts:464:30",
				"    at Generator.next (<anonymous>)",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:8:71",
				"    at new Promise (<anonymous>)",
				"    at __awaiter (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:4:12)",
				"    at execute (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:219:20)",
				"    at Object.<anonymous> (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\src\\requestPipeline.ts:345:30)",
				"    at Generator.next (<anonymous>)",
				"    at fulfilled (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:5:58)",
				"    at process._tickCallback (internal/process/next_tick.js:68:7)"
			]
		}
	}
}{
	"message": "Variable \"$inputData\" got invalid value { title: \"Бакалавриат 1 курс\", year: 2019, term: 1 }; Field \"year\" is not defined by type ScheduleYearCreateData.",
	"locations": [
		{
			"line": 1,
			"column": 29
		}
	],
	"extensions": {
		"code": "INTERNAL_SERVER_ERROR",
		"exception": {
			"stacktrace": [
				"GraphQLError: Variable \"$inputData\" got invalid value { title: \"Бакалавриат 1 курс\", year: 2019, term: 1 }; Field \"year\" is not defined by type ScheduleYearCreateData.",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\values.js:116:15",
				"    at coerceInputValueImpl (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\utilities\\coerceInputValue.js:114:9)",
				"    at coerceInputValueImpl (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\utilities\\coerceInputValue.js:54:14)",
				"    at coerceInputValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\utilities\\coerceInputValue.js:37:10)",
				"    at _loop (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\values.js:109:69)",
				"    at coerceVariableValues (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\values.js:121:16)",
				"    at getVariableValues (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\values.js:48:19)",
				"    at buildExecutionContext (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:184:61)",
				"    at executeImpl (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:89:20)",
				"    at Object.execute (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:64:35)",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\src\\requestPipeline.ts:464:30",
				"    at Generator.next (<anonymous>)",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:8:71",
				"    at new Promise (<anonymous>)",
				"    at __awaiter (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:4:12)",
				"    at execute (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:219:20)",
				"    at Object.<anonymous> (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\src\\requestPipeline.ts:345:30)",
				"    at Generator.next (<anonymous>)",
				"    at fulfilled (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:5:58)",
				"    at process._tickCallback (internal/process/next_tick.js:68:7)"
			]
		}
	}
}2019-12-12T07:58:31.504Z{
	"message": "This year already exists",
	"locations": [
		{
			"line": 2,
			"column": 3
		}
	],
	"path": [
		"createScheduleYear"
	],
	"extensions": {
		"code": "INTERNAL_SERVER_ERROR",
		"exception": {
			"stacktrace": [
				"Error: This year already exists",
				"    at _callee$ (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\src\\resolvers\\mutation/education.js:6:23)",
				"    at tryCatch (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\regenerator-runtime\\runtime.js:45:40)",
				"    at Generator.invoke [as _invoke] (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\regenerator-runtime\\runtime.js:271:22)",
				"    at Generator.prototype.(anonymous function) [as next] (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\regenerator-runtime\\runtime.js:97:21)",
				"    at asyncGeneratorStep (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\src\\resolvers\\mutation\\education.js:16:103)",
				"    at _next (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\src\\resolvers\\mutation\\education.js:18:194)"
			]
		}
	}
}2019-12-12T08:16:11.836Z{
	"message": "odels is not defined",
	"locations": [
		{
			"line": 2,
			"column": 3
		}
	],
	"path": [
		"days"
	],
	"extensions": {
		"code": "INTERNAL_SERVER_ERROR",
		"exception": {
			"stacktrace": [
				"ReferenceError: odels is not defined",
				"    at days (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\src\\resolvers\\query/education.js:20:5)",
				"    at field.resolve (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql-extensions\\src\\index.ts:274:18)",
				"    at resolveFieldValueOrError (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:467:18)",
				"    at resolveField (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:434:16)",
				"    at executeFields (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:275:18)",
				"    at executeOperation (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:219:122)",
				"    at executeImpl (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:104:14)",
				"    at Object.execute (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:64:35)",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\src\\requestPipeline.ts:464:30",
				"    at Generator.next (<anonymous>)",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:8:71",
				"    at new Promise (<anonymous>)",
				"    at __awaiter (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:4:12)",
				"    at execute (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:219:20)",
				"    at Object.<anonymous> (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\src\\requestPipeline.ts:345:30)",
				"    at Generator.next (<anonymous>)",
				"    at fulfilled (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:5:58)",
				"    at process._tickCallback (internal/process/next_tick.js:68:7)"
			]
		}
	}
}2019-12-12T08:18:02.005Z{
	"message": "String cannot represent value: { title: \"Понедельник\" }",
	"locations": [
		{
			"line": 2,
			"column": 3
		}
	],
	"path": [
		"days",
		0
	],
	"extensions": {
		"code": "INTERNAL_SERVER_ERROR",
		"exception": {
			"stacktrace": [
				"TypeError: String cannot represent value: { title: \"Понедельник\" }",
				"    at GraphQLScalarType.serializeString [as serialize] (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\type\\scalars.js:159:9)",
				"    at completeLeafValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:635:37)",
				"    at completeValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:579:12)",
				"    at completeValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:557:21)",
				"    at completeValueCatchingError (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:495:19)",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:618:25",
				"    at Array.forEach (<anonymous>)",
				"    at forEach (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\iterall\\index.js:83:25)",
				"    at completeListValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:614:24)",
				"    at completeValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:573:12)",
				"    at completeValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:557:21)",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:492:16",
				"    at tryCatcher (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\util.js:16:23)",
				"    at Promise._settlePromiseFromHandler (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\promise.js:517:31)",
				"    at Promise._settlePromise (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\promise.js:574:18)",
				"    at Promise._settlePromise0 (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\promise.js:619:10)",
				"    at Promise._settlePromises (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\promise.js:699:18)",
				"    at _drainQueueStep (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\async.js:138:12)",
				"    at _drainQueue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\async.js:131:9)",
				"    at Async._drainQueues (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\async.js:147:5)",
				"    at Immediate.Async.drainQueues [as _onImmediate] (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\async.js:17:14)",
				"    at runCallback (timers.js:705:18)"
			]
		}
	}
}2019-12-12T08:19:17.731Z{
	"message": "String cannot represent value: { title: \"Понедельник\" }",
	"locations": [
		{
			"line": 2,
			"column": 3
		}
	],
	"path": [
		"days",
		0
	],
	"extensions": {
		"code": "INTERNAL_SERVER_ERROR",
		"exception": {
			"stacktrace": [
				"TypeError: String cannot represent value: { title: \"Понедельник\" }",
				"    at GraphQLScalarType.serializeString [as serialize] (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\type\\scalars.js:159:9)",
				"    at completeLeafValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:635:37)",
				"    at completeValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:579:12)",
				"    at completeValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:557:21)",
				"    at completeValueCatchingError (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:495:19)",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:618:25",
				"    at Array.forEach (<anonymous>)",
				"    at forEach (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\iterall\\index.js:83:25)",
				"    at completeListValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:614:24)",
				"    at completeValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:573:12)",
				"    at completeValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:557:21)",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:492:16"
			]
		}
	}
}2019-12-12T08:19:39.131Z{
	"message": "String cannot represent value: { title: \"Понедельник\" }",
	"locations": [
		{
			"line": 2,
			"column": 3
		}
	],
	"path": [
		"days",
		0
	],
	"extensions": {
		"code": "INTERNAL_SERVER_ERROR",
		"exception": {
			"stacktrace": [
				"TypeError: String cannot represent value: { title: \"Понедельник\" }",
				"    at GraphQLScalarType.serializeString [as serialize] (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\type\\scalars.js:159:9)",
				"    at completeLeafValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:635:37)",
				"    at completeValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:579:12)",
				"    at completeValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:557:21)",
				"    at completeValueCatchingError (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:495:19)",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:618:25",
				"    at Array.forEach (<anonymous>)",
				"    at forEach (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\iterall\\index.js:83:25)",
				"    at completeListValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:614:24)",
				"    at completeValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:573:12)",
				"    at completeValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:557:21)",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:492:16"
			]
		}
	}
}2019-12-12T08:20:37.614Z{
	"message": "String cannot represent value: { title: \"Понедельник\" }",
	"locations": [
		{
			"line": 2,
			"column": 3
		}
	],
	"path": [
		"days",
		0
	],
	"extensions": {
		"code": "INTERNAL_SERVER_ERROR",
		"exception": {
			"stacktrace": [
				"TypeError: String cannot represent value: { title: \"Понедельник\" }",
				"    at GraphQLScalarType.serializeString [as serialize] (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\type\\scalars.js:159:9)",
				"    at completeLeafValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:635:37)",
				"    at completeValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:579:12)",
				"    at completeValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:557:21)",
				"    at completeValueCatchingError (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:495:19)",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:618:25",
				"    at Array.forEach (<anonymous>)",
				"    at forEach (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\iterall\\index.js:83:25)",
				"    at completeListValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:614:24)",
				"    at completeValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:573:12)",
				"    at completeValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:557:21)",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:492:16"
			]
		}
	}
}2020-01-20T14:37:38.009Z{
	"message": "Field \"day\" of type \"ScheduleDay!\" must have a selection of subfields. Did you mean \"day { ... }\"?",
	"locations": [
		{
			"line": 9,
			"column": 7
		}
	],
	"extensions": {
		"code": "GRAPHQL_VALIDATION_FAILED",
		"exception": {
			"stacktrace": [
				"GraphQLError: Field \"day\" of type \"ScheduleDay!\" must have a selection of subfields. Did you mean \"day { ... }\"?",
				"    at Object.Field (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\validation\\rules\\ScalarLeafs.js:45:31)",
				"    at Object.enter (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\language\\visitor.js:324:29)",
				"    at Object.enter (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\language\\visitor.js:375:25)",
				"    at visit (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\language\\visitor.js:242:26)",
				"    at Object.validate (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\validation\\validate.js:73:24)",
				"    at validate (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\src\\requestPipeline.ts:443:22)",
				"    at Object.<anonymous> (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\src\\requestPipeline.ts:252:32)",
				"    at Generator.next (<anonymous>)",
				"    at fulfilled (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:5:58)",
				"    at process._tickCallback (internal/process/next_tick.js:68:7)"
			]
		}
	}
}2020-01-20T14:37:47.769Z{
	"message": "Cannot return null for non-nullable field ScheduleYear.timetable.",
	"locations": [
		{
			"line": 7,
			"column": 5
		}
	],
	"path": [
		"years",
		0,
		"timetable"
	],
	"extensions": {
		"code": "INTERNAL_SERVER_ERROR",
		"exception": {
			"stacktrace": [
				"Error: Cannot return null for non-nullable field ScheduleYear.timetable.",
				"    at completeValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:560:13)",
				"    at completeValueCatchingError (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:495:19)",
				"    at resolveField (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:435:10)",
				"    at executeFields (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:275:18)",
				"    at collectAndExecuteSubfields (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:713:10)",
				"    at completeObjectValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:703:10)",
				"    at completeValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:591:12)",
				"    at completeValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:557:21)",
				"    at completeValueCatchingError (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:495:19)",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:618:25",
				"    at Array.forEach (<anonymous>)",
				"    at forEach (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\iterall\\index.js:83:25)",
				"    at completeListValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:614:24)",
				"    at completeValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:573:12)",
				"    at completeValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:557:21)",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:492:16"
			]
		}
	}
}2020-01-20T14:38:16.355Z{
	"message": "Cannot return null for non-nullable field ScheduleYear.timetable.",
	"locations": [
		{
			"line": 7,
			"column": 5
		}
	],
	"path": [
		"years",
		0,
		"timetable"
	],
	"extensions": {
		"code": "INTERNAL_SERVER_ERROR",
		"exception": {
			"stacktrace": [
				"Error: Cannot return null for non-nullable field ScheduleYear.timetable.",
				"    at completeValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:560:13)",
				"    at completeValueCatchingError (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:495:19)",
				"    at resolveField (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:435:10)",
				"    at executeFields (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:275:18)",
				"    at collectAndExecuteSubfields (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:713:10)",
				"    at completeObjectValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:703:10)",
				"    at completeValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:591:12)",
				"    at completeValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:557:21)",
				"    at completeValueCatchingError (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:495:19)",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:618:25",
				"    at Array.forEach (<anonymous>)",
				"    at forEach (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\iterall\\index.js:83:25)",
				"    at completeListValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:614:24)",
				"    at completeValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:573:12)",
				"    at completeValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:557:21)",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:492:16"
			]
		}
	}
}2020-01-20T14:38:55.292Z{
	"message": "Cannot return null for non-nullable field ScheduleYear.timetable.",
	"locations": [
		{
			"line": 7,
			"column": 5
		}
	],
	"path": [
		"years",
		0,
		"timetable"
	],
	"extensions": {
		"code": "INTERNAL_SERVER_ERROR",
		"exception": {
			"stacktrace": [
				"Error: Cannot return null for non-nullable field ScheduleYear.timetable.",
				"    at completeValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:560:13)",
				"    at completeValueCatchingError (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:495:19)",
				"    at resolveField (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:435:10)",
				"    at executeFields (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:275:18)",
				"    at collectAndExecuteSubfields (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:713:10)",
				"    at completeObjectValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:703:10)",
				"    at completeValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:591:12)",
				"    at completeValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:557:21)",
				"    at completeValueCatchingError (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:495:19)",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:618:25",
				"    at Array.forEach (<anonymous>)",
				"    at forEach (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\iterall\\index.js:83:25)",
				"    at completeListValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:614:24)",
				"    at completeValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:573:12)",
				"    at completeValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:557:21)",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:492:16"
			]
		}
	}
}2020-01-20T14:41:46.286Z{
	"message": "WHERE parameter \"year\" has invalid \"undefined\" value",
	"locations": [
		{
			"line": 7,
			"column": 5
		}
	],
	"path": [
		"years",
		0,
		"timetable"
	],
	"extensions": {
		"code": "INTERNAL_SERVER_ERROR",
		"exception": {
			"stacktrace": [
				"Error: WHERE parameter \"year\" has invalid \"undefined\" value",
				"    at PostgresQueryGenerator.whereItemQuery (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\sequelize\\lib\\dialects\\abstract\\query-generator.js:2184:13)",
				"    at Utils.getComplexKeys.forEach.prop (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\sequelize\\lib\\dialects\\abstract\\query-generator.js:2173:25)",
				"    at Array.forEach (<anonymous>)",
				"    at PostgresQueryGenerator.whereItemsQuery (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\sequelize\\lib\\dialects\\abstract\\query-generator.js:2171:35)",
				"    at PostgresQueryGenerator.getWhereConditions (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\sequelize\\lib\\dialects\\abstract\\query-generator.js:2583:19)",
				"    at PostgresQueryGenerator.selectQuery (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\sequelize\\lib\\dialects\\abstract\\query-generator.js:1315:28)",
				"    at QueryInterface.select (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\sequelize\\lib\\query-interface.js:1122:27)",
				"    at Promise.try.then.then.then (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\sequelize\\lib\\model.js:1757:34)",
				"    at tryCatcher (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\util.js:16:23)",
				"    at Promise._settlePromiseFromHandler (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\promise.js:547:31)",
				"    at Promise._settlePromise (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\promise.js:604:18)",
				"    at Promise._settlePromise0 (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\promise.js:649:10)",
				"    at Promise._settlePromises (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\promise.js:729:18)",
				"    at _drainQueueStep (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\async.js:93:12)",
				"    at _drainQueue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\async.js:86:9)",
				"    at Async._drainQueues (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\async.js:102:5)",
				"    at Immediate.Async.drainQueues [as _onImmediate] (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\async.js:15:14)",
				"    at runCallback (timers.js:705:18)",
				"    at tryOnImmediate (timers.js:676:5)",
				"    at processImmediate (timers.js:658:5)",
				"    at process.topLevelDomainCallback (domain.js:120:23)"
			]
		}
	}
}2020-01-20T14:42:15.282Z{
	"message": "WHERE parameter \"year\" has invalid \"undefined\" value",
	"locations": [
		{
			"line": 7,
			"column": 5
		}
	],
	"path": [
		"years",
		0,
		"timetable"
	],
	"extensions": {
		"code": "INTERNAL_SERVER_ERROR",
		"exception": {
			"stacktrace": [
				"Error: WHERE parameter \"year\" has invalid \"undefined\" value",
				"    at PostgresQueryGenerator.whereItemQuery (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\sequelize\\lib\\dialects\\abstract\\query-generator.js:2184:13)",
				"    at Utils.getComplexKeys.forEach.prop (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\sequelize\\lib\\dialects\\abstract\\query-generator.js:2173:25)",
				"    at Array.forEach (<anonymous>)",
				"    at PostgresQueryGenerator.whereItemsQuery (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\sequelize\\lib\\dialects\\abstract\\query-generator.js:2171:35)",
				"    at PostgresQueryGenerator.getWhereConditions (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\sequelize\\lib\\dialects\\abstract\\query-generator.js:2583:19)",
				"    at PostgresQueryGenerator.selectQuery (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\sequelize\\lib\\dialects\\abstract\\query-generator.js:1315:28)",
				"    at QueryInterface.select (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\sequelize\\lib\\query-interface.js:1122:27)",
				"    at Promise.try.then.then.then (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\sequelize\\lib\\model.js:1757:34)",
				"    at tryCatcher (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\util.js:16:23)",
				"    at Promise._settlePromiseFromHandler (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\promise.js:547:31)",
				"    at Promise._settlePromise (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\promise.js:604:18)",
				"    at Promise._settlePromise0 (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\promise.js:649:10)",
				"    at Promise._settlePromises (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\promise.js:729:18)",
				"    at _drainQueueStep (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\async.js:93:12)",
				"    at _drainQueue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\async.js:86:9)",
				"    at Async._drainQueues (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\async.js:102:5)",
				"    at Immediate.Async.drainQueues [as _onImmediate] (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\async.js:15:14)",
				"    at runCallback (timers.js:705:18)",
				"    at tryOnImmediate (timers.js:676:5)",
				"    at processImmediate (timers.js:658:5)",
				"    at process.topLevelDomainCallback (domain.js:120:23)"
			]
		}
	}
}2020-01-20T14:42:54.055Z{
	"message": "column scheduleTimetable.year does not exist",
	"locations": [
		{
			"line": 7,
			"column": 5
		}
	],
	"path": [
		"years",
		0,
		"timetable"
	],
	"extensions": {
		"code": "INTERNAL_SERVER_ERROR",
		"exception": {
			"name": "SequelizeDatabaseError",
			"parent": {
				"name": "error",
				"length": 192,
				"severity": "ERROR",
				"code": "42703",
				"hint": "Perhaps you meant to reference the column \"scheduleTimetable.yearId\".",
				"position": "218",
				"file": "parse_relation.c",
				"line": "3294",
				"routine": "errorMissingColumn",
				"sql": "SELECT \"id\", \"discipline\", \"lectureHall\", \"lector\", \"timeFrom\", \"timeTo\", \"startDate\", \"yearId\", \"dayId\", \"isEven\", \"isDouble\", \"createdAt\", \"updatedAt\" FROM \"biophys\".\"scheduleTimetable\" AS \"scheduleTimetable\" WHERE \"scheduleTimetable\".\"year\" = 1 ORDER BY \"scheduleTimetable\".\"dayId\" ASC, \"scheduleTimetable\".\"timeFrom\" ASC, \"scheduleTimetable\".\"isEven\" ASC;"
			},
			"original": {
				"name": "error",
				"length": 192,
				"severity": "ERROR",
				"code": "42703",
				"hint": "Perhaps you meant to reference the column \"scheduleTimetable.yearId\".",
				"position": "218",
				"file": "parse_relation.c",
				"line": "3294",
				"routine": "errorMissingColumn",
				"sql": "SELECT \"id\", \"discipline\", \"lectureHall\", \"lector\", \"timeFrom\", \"timeTo\", \"startDate\", \"yearId\", \"dayId\", \"isEven\", \"isDouble\", \"createdAt\", \"updatedAt\" FROM \"biophys\".\"scheduleTimetable\" AS \"scheduleTimetable\" WHERE \"scheduleTimetable\".\"year\" = 1 ORDER BY \"scheduleTimetable\".\"dayId\" ASC, \"scheduleTimetable\".\"timeFrom\" ASC, \"scheduleTimetable\".\"isEven\" ASC;"
			},
			"sql": "SELECT \"id\", \"discipline\", \"lectureHall\", \"lector\", \"timeFrom\", \"timeTo\", \"startDate\", \"yearId\", \"dayId\", \"isEven\", \"isDouble\", \"createdAt\", \"updatedAt\" FROM \"biophys\".\"scheduleTimetable\" AS \"scheduleTimetable\" WHERE \"scheduleTimetable\".\"year\" = 1 ORDER BY \"scheduleTimetable\".\"dayId\" ASC, \"scheduleTimetable\".\"timeFrom\" ASC, \"scheduleTimetable\".\"isEven\" ASC;",
			"stacktrace": [
				"SequelizeDatabaseError: column scheduleTimetable.year does not exist",
				"    at Query.formatError (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\sequelize\\lib\\dialects\\postgres\\query.js:366:16)",
				"    at query.catch.err (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\sequelize\\lib\\dialects\\postgres\\query.js:72:18)",
				"    at tryCatcher (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\util.js:16:23)",
				"    at Promise._settlePromiseFromHandler (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\promise.js:547:31)",
				"    at Promise._settlePromise (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\promise.js:604:18)",
				"    at Promise._settlePromise0 (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\promise.js:649:10)",
				"    at Promise._settlePromises (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\promise.js:725:18)",
				"    at _drainQueueStep (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\async.js:93:12)",
				"    at _drainQueue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\async.js:86:9)",
				"    at Async._drainQueues (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\async.js:102:5)",
				"    at Immediate.Async.drainQueues [as _onImmediate] (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\async.js:15:14)",
				"    at runCallback (timers.js:705:18)",
				"    at tryOnImmediate (timers.js:676:5)",
				"    at processImmediate (timers.js:658:5)",
				"    at process.topLevelDomainCallback (domain.js:120:23)"
			]
		}
	}
}2020-01-20T14:43:21.269Z{
	"message": "Cannot return null for non-nullable field ScheduleTimetable.id.",
	"locations": [
		{
			"line": 8,
			"column": 7
		}
	],
	"path": [
		"years",
		0,
		"timetable",
		"id"
	],
	"extensions": {
		"code": "INTERNAL_SERVER_ERROR",
		"exception": {
			"stacktrace": [
				"Error: Cannot return null for non-nullable field ScheduleTimetable.id.",
				"    at completeValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:560:13)",
				"    at completeValueCatchingError (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:495:19)",
				"    at resolveField (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:435:10)",
				"    at executeFields (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:275:18)",
				"    at collectAndExecuteSubfields (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:713:10)",
				"    at completeObjectValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:703:10)",
				"    at completeValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:591:12)",
				"    at completeValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:557:21)",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:492:16"
			]
		}
	}
}2020-01-20T14:43:54.445Z{
	"message": "Cannot return null for non-nullable field ScheduleTimetable.id.",
	"locations": [
		{
			"line": 8,
			"column": 7
		}
	],
	"path": [
		"years",
		0,
		"timetable",
		"id"
	],
	"extensions": {
		"code": "INTERNAL_SERVER_ERROR",
		"exception": {
			"stacktrace": [
				"Error: Cannot return null for non-nullable field ScheduleTimetable.id.",
				"    at completeValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:560:13)",
				"    at completeValueCatchingError (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:495:19)",
				"    at resolveField (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:435:10)",
				"    at executeFields (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:275:18)",
				"    at collectAndExecuteSubfields (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:713:10)",
				"    at completeObjectValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:703:10)",
				"    at completeValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:591:12)",
				"    at completeValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:557:21)",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:492:16"
			]
		}
	}
}2020-01-20T14:45:31.589Z{
	"message": "Cannot return null for non-nullable field ScheduleTimetable.id.",
	"locations": [
		{
			"line": 8,
			"column": 7
		}
	],
	"path": [
		"years",
		0,
		"timetable",
		"id"
	],
	"extensions": {
		"code": "INTERNAL_SERVER_ERROR",
		"exception": {
			"stacktrace": [
				"Error: Cannot return null for non-nullable field ScheduleTimetable.id.",
				"    at completeValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:560:13)",
				"    at completeValueCatchingError (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:495:19)",
				"    at resolveField (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:435:10)",
				"    at executeFields (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:275:18)",
				"    at collectAndExecuteSubfields (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:713:10)",
				"    at completeObjectValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:703:10)",
				"    at completeValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:591:12)",
				"    at completeValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:557:21)",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:492:16"
			]
		}
	}
}2020-01-20T14:46:56.815Z{
	"message": "Cannot return null for non-nullable field ScheduleTimetable.id.",
	"locations": [
		{
			"line": 8,
			"column": 7
		}
	],
	"path": [
		"years",
		0,
		"timetable",
		"id"
	],
	"extensions": {
		"code": "INTERNAL_SERVER_ERROR",
		"exception": {
			"stacktrace": [
				"Error: Cannot return null for non-nullable field ScheduleTimetable.id.",
				"    at completeValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:560:13)",
				"    at completeValueCatchingError (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:495:19)",
				"    at resolveField (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:435:10)",
				"    at executeFields (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:275:18)",
				"    at collectAndExecuteSubfields (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:713:10)",
				"    at completeObjectValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:703:10)",
				"    at completeValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:591:12)",
				"    at completeValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:557:21)",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:492:16"
			]
		}
	}
}2020-01-20T14:47:58.356Z{
	"message": "Cannot return null for non-nullable field ScheduleTimetable.id.",
	"locations": [
		{
			"line": 8,
			"column": 7
		}
	],
	"path": [
		"years",
		0,
		"timetable",
		"id"
	],
	"extensions": {
		"code": "INTERNAL_SERVER_ERROR",
		"exception": {
			"stacktrace": [
				"Error: Cannot return null for non-nullable field ScheduleTimetable.id.",
				"    at completeValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:560:13)",
				"    at completeValueCatchingError (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:495:19)",
				"    at resolveField (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:435:10)",
				"    at executeFields (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:275:18)",
				"    at collectAndExecuteSubfields (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:713:10)",
				"    at completeObjectValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:703:10)",
				"    at completeValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:591:12)",
				"    at completeValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:557:21)",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:492:16"
			]
		}
	}
}2020-01-20T14:52:20.112Z{
	"message": "Cannot return null for non-nullable field ScheduleTimetable.id.",
	"locations": [
		{
			"line": 8,
			"column": 7
		}
	],
	"path": [
		"years",
		0,
		"timetable",
		"id"
	],
	"extensions": {
		"code": "INTERNAL_SERVER_ERROR",
		"exception": {
			"stacktrace": [
				"Error: Cannot return null for non-nullable field ScheduleTimetable.id.",
				"    at completeValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:560:13)",
				"    at completeValueCatchingError (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:495:19)",
				"    at resolveField (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:435:10)",
				"    at executeFields (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:275:18)",
				"    at collectAndExecuteSubfields (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:713:10)",
				"    at completeObjectValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:703:10)",
				"    at completeValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:591:12)",
				"    at completeValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:557:21)",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:492:16"
			]
		}
	}
}2020-01-20T14:52:25.704Z{
	"message": "Cannot return null for non-nullable field ScheduleTimetable.id.",
	"locations": [
		{
			"line": 8,
			"column": 7
		}
	],
	"path": [
		"years",
		0,
		"timetable",
		"id"
	],
	"extensions": {
		"code": "INTERNAL_SERVER_ERROR",
		"exception": {
			"stacktrace": [
				"Error: Cannot return null for non-nullable field ScheduleTimetable.id.",
				"    at completeValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:560:13)",
				"    at completeValueCatchingError (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:495:19)",
				"    at resolveField (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:435:10)",
				"    at executeFields (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:275:18)",
				"    at collectAndExecuteSubfields (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:713:10)",
				"    at completeObjectValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:703:10)",
				"    at completeValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:591:12)",
				"    at completeValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:557:21)",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:492:16"
			]
		}
	}
}2020-01-20T14:53:09.504Z{
	"message": "Cannot return null for non-nullable field ScheduleTimetable.id.",
	"locations": [
		{
			"line": 8,
			"column": 7
		}
	],
	"path": [
		"years",
		0,
		"timetable",
		"id"
	],
	"extensions": {
		"code": "INTERNAL_SERVER_ERROR",
		"exception": {
			"stacktrace": [
				"Error: Cannot return null for non-nullable field ScheduleTimetable.id.",
				"    at completeValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:560:13)",
				"    at completeValueCatchingError (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:495:19)",
				"    at resolveField (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:435:10)",
				"    at executeFields (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:275:18)",
				"    at collectAndExecuteSubfields (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:713:10)",
				"    at completeObjectValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:703:10)",
				"    at completeValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:591:12)",
				"    at completeValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:557:21)",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:492:16"
			]
		}
	}
}2020-01-20T14:55:36.679Z{
	"message": "Cannot return null for non-nullable field ScheduleTimetable.id.",
	"locations": [
		{
			"line": 8,
			"column": 7
		}
	],
	"path": [
		"years",
		0,
		"timetable",
		"id"
	],
	"extensions": {
		"code": "INTERNAL_SERVER_ERROR",
		"exception": {
			"stacktrace": [
				"Error: Cannot return null for non-nullable field ScheduleTimetable.id.",
				"    at completeValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:560:13)",
				"    at completeValueCatchingError (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:495:19)",
				"    at resolveField (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:435:10)",
				"    at executeFields (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:275:18)",
				"    at collectAndExecuteSubfields (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:713:10)",
				"    at completeObjectValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:703:10)",
				"    at completeValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:591:12)",
				"    at completeValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:557:21)",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:492:16"
			]
		}
	}
}2020-01-20T15:01:30.948Z{
	"message": "Cannot return null for non-nullable field ScheduleTimetable.id.",
	"locations": [
		{
			"line": 8,
			"column": 7
		}
	],
	"path": [
		"years",
		0,
		"timetable",
		"id"
	],
	"extensions": {
		"code": "INTERNAL_SERVER_ERROR",
		"exception": {
			"stacktrace": [
				"Error: Cannot return null for non-nullable field ScheduleTimetable.id.",
				"    at completeValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:560:13)",
				"    at completeValueCatchingError (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:495:19)",
				"    at resolveField (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:435:10)",
				"    at executeFields (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:275:18)",
				"    at collectAndExecuteSubfields (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:713:10)",
				"    at completeObjectValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:703:10)",
				"    at completeValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:591:12)",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:492:16"
			]
		}
	}
}2020-01-20T15:02:27.816Z{
	"message": "Field \"year\" of type \"ScheduleYear!\" must have a selection of subfields. Did you mean \"year { ... }\"?",
	"locations": [
		{
			"line": 15,
			"column": 7
		}
	],
	"extensions": {
		"code": "GRAPHQL_VALIDATION_FAILED",
		"exception": {
			"stacktrace": [
				"GraphQLError: Field \"year\" of type \"ScheduleYear!\" must have a selection of subfields. Did you mean \"year { ... }\"?",
				"    at Object.Field (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\validation\\rules\\ScalarLeafs.js:45:31)",
				"    at Object.enter (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\language\\visitor.js:324:29)",
				"    at Object.enter (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\language\\visitor.js:375:25)",
				"    at visit (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\language\\visitor.js:242:26)",
				"    at Object.validate (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\validation\\validate.js:73:24)",
				"    at validate (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\src\\requestPipeline.ts:443:22)",
				"    at Object.<anonymous> (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\src\\requestPipeline.ts:252:32)",
				"    at Generator.next (<anonymous>)",
				"    at fulfilled (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:5:58)",
				"    at process._tickCallback (internal/process/next_tick.js:68:7)"
			]
		}
	}
}2020-02-14T11:49:01.278Z{
	"message": "Variable \"$yearId\" of required type \"ID!\" was not provided.",
	"locations": [
		{
			"line": 1,
			"column": 34
		}
	],
	"extensions": {
		"code": "INTERNAL_SERVER_ERROR",
		"exception": {
			"stacktrace": [
				"GraphQLError: Variable \"$yearId\" of required type \"ID!\" was not provided.",
				"    at _loop (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\values.js:92:17)",
				"    at coerceVariableValues (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\values.js:119:16)",
				"    at getVariableValues (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\values.js:48:19)",
				"    at buildExecutionContext (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:184:61)",
				"    at executeImpl (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:89:20)",
				"    at Object.execute (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:64:35)",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\src\\requestPipeline.ts:481:30",
				"    at Generator.next (<anonymous>)",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:8:71",
				"    at new Promise (<anonymous>)",
				"    at __awaiter (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:4:12)",
				"    at execute (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:225:20)",
				"    at Object.<anonymous> (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\src\\requestPipeline.ts:364:30)",
				"    at Generator.next (<anonymous>)",
				"    at fulfilled (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:5:58)",
				"    at process._tickCallback (internal/process/next_tick.js:68:7)"
			]
		}
	}
}2020-02-14T11:49:01.280Z2020-02-14T11:49:01.279Z{
	"message": "Variable \"$inputData\" got invalid value \"0\" at \"inputData.isEven\"; Expected type Int. Int cannot represent non-integer value: \"0\"",
	"locations": [
		{
			"line": 1,
			"column": 61
		}
	],
	"extensions": {
		"code": "INTERNAL_SERVER_ERROR",
		"exception": {
			"stacktrace": [
				"TypeError: Int cannot represent non-integer value: \"0\"",
				"    at GraphQLScalarType.coerceInt [as parseValue] (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\type\\scalars.js:55:11)",
				"    at coerceInputValueImpl (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\utilities\\coerceInputValue.js:127:26)",
				"    at coerceInputValueImpl (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\utilities\\coerceInputValue.js:54:14)",
				"    at coerceInputValueImpl (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\utilities\\coerceInputValue.js:105:35)",
				"    at coerceInputValueImpl (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\utilities\\coerceInputValue.js:54:14)",
				"    at coerceInputValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\utilities\\coerceInputValue.js:37:10)",
				"    at _loop (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\values.js:107:69)",
				"    at coerceVariableValues (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\values.js:119:16)",
				"    at getVariableValues (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\values.js:48:19)",
				"    at buildExecutionContext (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:184:61)",
				"    at executeImpl (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:89:20)",
				"    at Object.execute (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:64:35)",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\src\\requestPipeline.ts:481:30",
				"    at Generator.next (<anonymous>)",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:8:71",
				"    at new Promise (<anonymous>)",
				"    at __awaiter (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:4:12)",
				"    at execute (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:225:20)",
				"    at Object.<anonymous> (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\src\\requestPipeline.ts:364:30)",
				"    at Generator.next (<anonymous>)",
				"    at fulfilled (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:5:58)",
				"    at process._tickCallback (internal/process/next_tick.js:68:7)"
			]
		}
	}
}{
	"message": "Variable \"$dayId\" of required type \"ID!\" was not provided.",
	"locations": [
		{
			"line": 1,
			"column": 48
		}
	],
	"extensions": {
		"code": "INTERNAL_SERVER_ERROR",
		"exception": {
			"stacktrace": [
				"GraphQLError: Variable \"$dayId\" of required type \"ID!\" was not provided.",
				"    at _loop (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\values.js:92:17)",
				"    at coerceVariableValues (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\values.js:119:16)",
				"    at getVariableValues (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\values.js:48:19)",
				"    at buildExecutionContext (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:184:61)",
				"    at executeImpl (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:89:20)",
				"    at Object.execute (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:64:35)",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\src\\requestPipeline.ts:481:30",
				"    at Generator.next (<anonymous>)",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:8:71",
				"    at new Promise (<anonymous>)",
				"    at __awaiter (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:4:12)",
				"    at execute (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:225:20)",
				"    at Object.<anonymous> (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\src\\requestPipeline.ts:364:30)",
				"    at Generator.next (<anonymous>)",
				"    at fulfilled (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:5:58)",
				"    at process._tickCallback (internal/process/next_tick.js:68:7)"
			]
		}
	}
}2020-02-14T11:49:01.282Z{
	"message": "Variable \"$inputData\" got invalid value { timeFrom: \"9:30\", timeTo: \"10:45\", discipline: \"Электрофизика\", lector: \"\", startDate: null, isEven: \"0\" }; Field isDouble of required type Int! was not provided.",
	"locations": [
		{
			"line": 1,
			"column": 61
		}
	],
	"extensions": {
		"code": "INTERNAL_SERVER_ERROR",
		"exception": {
			"stacktrace": [
				"GraphQLError: Variable \"$inputData\" got invalid value { timeFrom: \"9:30\", timeTo: \"10:45\", discipline: \"Электрофизика\", lector: \"\", startDate: null, isEven: \"0\" }; Field isDouble of required type Int! was not provided.",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\values.js:114:15",
				"    at coerceInputValueImpl (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\utilities\\coerceInputValue.js:99:11)",
				"    at coerceInputValueImpl (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\utilities\\coerceInputValue.js:54:14)",
				"    at coerceInputValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\utilities\\coerceInputValue.js:37:10)",
				"    at _loop (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\values.js:107:69)",
				"    at coerceVariableValues (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\values.js:119:16)",
				"    at getVariableValues (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\values.js:48:19)",
				"    at buildExecutionContext (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:184:61)",
				"    at executeImpl (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:89:20)",
				"    at Object.execute (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:64:35)",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\src\\requestPipeline.ts:481:30",
				"    at Generator.next (<anonymous>)",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:8:71",
				"    at new Promise (<anonymous>)",
				"    at __awaiter (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:4:12)",
				"    at execute (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:225:20)",
				"    at Object.<anonymous> (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\src\\requestPipeline.ts:364:30)",
				"    at Generator.next (<anonymous>)",
				"    at fulfilled (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:5:58)",
				"    at process._tickCallback (internal/process/next_tick.js:68:7)"
			]
		}
	}
}2020-02-14T11:52:09.330Z2020-02-14T11:52:09.341Z{
	"message": "Variable \"$inputData\" got invalid value \"0\" at \"inputData.isEven\"; Expected type Int. Int cannot represent non-integer value: \"0\"",
	"locations": [
		{
			"line": 1,
			"column": 61
		}
	],
	"extensions": {
		"code": "INTERNAL_SERVER_ERROR",
		"exception": {
			"stacktrace": [
				"TypeError: Int cannot represent non-integer value: \"0\"",
				"    at GraphQLScalarType.coerceInt [as parseValue] (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\type\\scalars.js:55:11)",
				"    at coerceInputValueImpl (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\utilities\\coerceInputValue.js:127:26)",
				"    at coerceInputValueImpl (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\utilities\\coerceInputValue.js:54:14)",
				"    at coerceInputValueImpl (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\utilities\\coerceInputValue.js:105:35)",
				"    at coerceInputValueImpl (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\utilities\\coerceInputValue.js:54:14)",
				"    at coerceInputValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\utilities\\coerceInputValue.js:37:10)",
				"    at _loop (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\values.js:107:69)",
				"    at coerceVariableValues (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\values.js:119:16)",
				"    at getVariableValues (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\values.js:48:19)",
				"    at buildExecutionContext (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:184:61)",
				"    at executeImpl (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:89:20)",
				"    at Object.execute (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:64:35)",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\src\\requestPipeline.ts:481:30",
				"    at Generator.next (<anonymous>)",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:8:71",
				"    at new Promise (<anonymous>)",
				"    at __awaiter (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:4:12)",
				"    at execute (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:225:20)",
				"    at Object.<anonymous> (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\src\\requestPipeline.ts:364:30)",
				"    at Generator.next (<anonymous>)",
				"    at fulfilled (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:5:58)",
				"    at process._tickCallback (internal/process/next_tick.js:68:7)"
			]
		}
	}
}{
	"message": "Variable \"$inputData\" got invalid value { timeFrom: \"9:30\", timeTo: \"10:45\", discipline: \"Электрофизика\", lector: \"\", startDate: null, isEven: \"0\" }; Field isDouble of required type Int! was not provided.",
	"locations": [
		{
			"line": 1,
			"column": 61
		}
	],
	"extensions": {
		"code": "INTERNAL_SERVER_ERROR",
		"exception": {
			"stacktrace": [
				"GraphQLError: Variable \"$inputData\" got invalid value { timeFrom: \"9:30\", timeTo: \"10:45\", discipline: \"Электрофизика\", lector: \"\", startDate: null, isEven: \"0\" }; Field isDouble of required type Int! was not provided.",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\values.js:114:15",
				"    at coerceInputValueImpl (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\utilities\\coerceInputValue.js:99:11)",
				"    at coerceInputValueImpl (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\utilities\\coerceInputValue.js:54:14)",
				"    at coerceInputValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\utilities\\coerceInputValue.js:37:10)",
				"    at _loop (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\values.js:107:69)",
				"    at coerceVariableValues (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\values.js:119:16)",
				"    at getVariableValues (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\values.js:48:19)",
				"    at buildExecutionContext (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:184:61)",
				"    at executeImpl (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:89:20)",
				"    at Object.execute (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:64:35)",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\src\\requestPipeline.ts:481:30",
				"    at Generator.next (<anonymous>)",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:8:71",
				"    at new Promise (<anonymous>)",
				"    at __awaiter (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:4:12)",
				"    at execute (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:225:20)",
				"    at Object.<anonymous> (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\src\\requestPipeline.ts:364:30)",
				"    at Generator.next (<anonymous>)",
				"    at fulfilled (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:5:58)",
				"    at process._tickCallback (internal/process/next_tick.js:68:7)"
			]
		}
	}
}2020-02-14T11:54:06.529Z2020-02-14T11:54:06.530Z{
	"message": "Variable \"$inputData\" got invalid value \"0\" at \"inputData.isEven\"; Expected type Int. Int cannot represent non-integer value: \"0\"",
	"locations": [
		{
			"line": 1,
			"column": 61
		}
	],
	"extensions": {
		"code": "INTERNAL_SERVER_ERROR",
		"exception": {
			"stacktrace": [
				"TypeError: Int cannot represent non-integer value: \"0\"",
				"    at GraphQLScalarType.coerceInt [as parseValue] (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\type\\scalars.js:55:11)",
				"    at coerceInputValueImpl (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\utilities\\coerceInputValue.js:127:26)",
				"    at coerceInputValueImpl (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\utilities\\coerceInputValue.js:54:14)",
				"    at coerceInputValueImpl (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\utilities\\coerceInputValue.js:105:35)",
				"    at coerceInputValueImpl (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\utilities\\coerceInputValue.js:54:14)",
				"    at coerceInputValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\utilities\\coerceInputValue.js:37:10)",
				"    at _loop (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\values.js:107:69)",
				"    at coerceVariableValues (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\values.js:119:16)",
				"    at getVariableValues (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\values.js:48:19)",
				"    at buildExecutionContext (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:184:61)",
				"    at executeImpl (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:89:20)",
				"    at Object.execute (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:64:35)",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\src\\requestPipeline.ts:481:30",
				"    at Generator.next (<anonymous>)",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:8:71",
				"    at new Promise (<anonymous>)",
				"    at __awaiter (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:4:12)",
				"    at execute (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:225:20)",
				"    at Object.<anonymous> (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\src\\requestPipeline.ts:364:30)",
				"    at Generator.next (<anonymous>)",
				"    at fulfilled (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:5:58)",
				"    at process._tickCallback (internal/process/next_tick.js:68:7)"
			]
		}
	}
}{
	"message": "Variable \"$inputData\" got invalid value { timeFrom: \"9:30\", timeTo: \"10:45\", discipline: \"Электрофизика\", lector: \"\", startDate: null, isEven: \"0\" }; Field isDouble of required type Int! was not provided.",
	"locations": [
		{
			"line": 1,
			"column": 61
		}
	],
	"extensions": {
		"code": "INTERNAL_SERVER_ERROR",
		"exception": {
			"stacktrace": [
				"GraphQLError: Variable \"$inputData\" got invalid value { timeFrom: \"9:30\", timeTo: \"10:45\", discipline: \"Электрофизика\", lector: \"\", startDate: null, isEven: \"0\" }; Field isDouble of required type Int! was not provided.",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\values.js:114:15",
				"    at coerceInputValueImpl (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\utilities\\coerceInputValue.js:99:11)",
				"    at coerceInputValueImpl (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\utilities\\coerceInputValue.js:54:14)",
				"    at coerceInputValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\utilities\\coerceInputValue.js:37:10)",
				"    at _loop (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\values.js:107:69)",
				"    at coerceVariableValues (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\values.js:119:16)",
				"    at getVariableValues (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\values.js:48:19)",
				"    at buildExecutionContext (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:184:61)",
				"    at executeImpl (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:89:20)",
				"    at Object.execute (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:64:35)",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\src\\requestPipeline.ts:481:30",
				"    at Generator.next (<anonymous>)",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:8:71",
				"    at new Promise (<anonymous>)",
				"    at __awaiter (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:4:12)",
				"    at execute (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:225:20)",
				"    at Object.<anonymous> (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\src\\requestPipeline.ts:364:30)",
				"    at Generator.next (<anonymous>)",
				"    at fulfilled (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:5:58)",
				"    at process._tickCallback (internal/process/next_tick.js:68:7)"
			]
		}
	}
}2020-02-14T11:57:09.226Z{
	"message": "This day does not exist",
	"locations": [
		{
			"line": 2,
			"column": 3
		}
	],
	"path": [
		"createScheduleTimetable"
	],
	"extensions": {
		"code": "INTERNAL_SERVER_ERROR",
		"exception": {
			"stacktrace": [
				"Error: This day does not exist",
				"    at _callee4$ (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\src\\resolvers\\mutation/education.js:32:23)",
				"    at tryCatch (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\regenerator-runtime\\runtime.js:45:40)",
				"    at Generator.invoke [as _invoke] (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\regenerator-runtime\\runtime.js:271:22)",
				"    at Generator.prototype.(anonymous function) [as next] (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\regenerator-runtime\\runtime.js:97:21)",
				"    at asyncGeneratorStep (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\src\\resolvers\\mutation\\education.js:16:103)",
				"    at _next (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\src\\resolvers\\mutation\\education.js:18:194)"
			]
		}
	}
}2020-02-14T11:57:37.626Z{
	"message": "This day does not exist0",
	"locations": [
		{
			"line": 2,
			"column": 3
		}
	],
	"path": [
		"createScheduleTimetable"
	],
	"extensions": {
		"code": "INTERNAL_SERVER_ERROR",
		"exception": {
			"stacktrace": [
				"Error: This day does not exist0",
				"    at _callee4$ (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\src\\resolvers\\mutation/education.js:32:23)",
				"    at tryCatch (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\regenerator-runtime\\runtime.js:45:40)",
				"    at Generator.invoke [as _invoke] (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\regenerator-runtime\\runtime.js:271:22)",
				"    at Generator.prototype.(anonymous function) [as next] (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\regenerator-runtime\\runtime.js:97:21)",
				"    at asyncGeneratorStep (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\src\\resolvers\\mutation\\education.js:16:103)",
				"    at _next (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\src\\resolvers\\mutation\\education.js:18:194)"
			]
		}
	}
}2020-02-14T12:04:56.109Z{
	"message": "isEven is not defined",
	"locations": [
		{
			"line": 2,
			"column": 3
		}
	],
	"path": [
		"createScheduleTimetable"
	],
	"extensions": {
		"code": "INTERNAL_SERVER_ERROR",
		"exception": {
			"stacktrace": [
				"ReferenceError: isEven is not defined",
				"    at _callee4$ (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\src\\resolvers\\mutation/education.js:34:98)",
				"    at tryCatch (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\regenerator-runtime\\runtime.js:45:40)",
				"    at Generator.invoke [as _invoke] (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\regenerator-runtime\\runtime.js:271:22)",
				"    at Generator.prototype.(anonymous function) [as next] (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\regenerator-runtime\\runtime.js:97:21)",
				"    at asyncGeneratorStep (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\src\\resolvers\\mutation\\education.js:16:103)",
				"    at _next (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\src\\resolvers\\mutation\\education.js:18:194)"
			]
		}
	}
}2020-02-14T12:23:02.827Z{
	"message": "Year not found",
	"locations": [
		{
			"line": 2,
			"column": 3
		}
	],
	"path": [
		"deleteScheduleYear"
	],
	"extensions": {
		"code": "INTERNAL_SERVER_ERROR",
		"exception": {
			"stacktrace": [
				"Error: Year not found",
				"    at _callee3$ (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\src\\resolvers\\mutation/education.js:22:24)",
				"    at tryCatch (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\regenerator-runtime\\runtime.js:45:40)",
				"    at Generator.invoke [as _invoke] (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\regenerator-runtime\\runtime.js:271:22)",
				"    at Generator.prototype.(anonymous function) [as next] (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\regenerator-runtime\\runtime.js:97:21)",
				"    at asyncGeneratorStep (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\src\\resolvers\\mutation\\education.js:16:103)",
				"    at _next (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\src\\resolvers\\mutation\\education.js:18:194)"
			]
		}
	}
}2020-02-14T12:24:09.834Z{
	"message": "Field \"deleteScheduleTimetable\" must not have a selection since type \"ID!\" has no subfields.",
	"locations": [
		{
			"line": 2,
			"column": 36
		}
	],
	"extensions": {
		"code": "GRAPHQL_VALIDATION_FAILED",
		"exception": {
			"stacktrace": [
				"GraphQLError: Field \"deleteScheduleTimetable\" must not have a selection since type \"ID!\" has no subfields.",
				"    at Object.Field (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\validation\\rules\\ScalarLeafs.js:42:33)",
				"    at Object.enter (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\language\\visitor.js:324:29)",
				"    at Object.enter (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\language\\visitor.js:375:25)",
				"    at visit (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\language\\visitor.js:242:26)",
				"    at Object.validate (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\validation\\validate.js:73:24)",
				"    at validate (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\src\\requestPipeline.ts:443:22)",
				"    at Object.<anonymous> (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\src\\requestPipeline.ts:252:32)",
				"    at Generator.next (<anonymous>)",
				"    at fulfilled (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:5:58)",
				"    at process._tickCallback (internal/process/next_tick.js:68:7)"
			]
		}
	}
}2020-02-14T17:02:30.606Z{
	"message": "Expected Iterable, but did not find one for field Mutation.updateScheduleTimetable.",
	"locations": [
		{
			"line": 2,
			"column": 3
		}
	],
	"path": [
		"updateScheduleTimetable"
	],
	"extensions": {
		"code": "INTERNAL_SERVER_ERROR",
		"exception": {
			"message": "Expected Iterable, but did not find one for field Mutation.updateScheduleTimetable.",
			"stacktrace": [
				"GraphQLError: Expected Iterable, but did not find one for field Mutation.updateScheduleTimetable.",
				"    at completeListValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:606:11)",
				"    at completeValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:573:12)",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:492:16"
			]
		}
	}
}2020-02-14T17:04:57.782Z{
	"message": "Cannot return null for non-nullable field ScheduleTimetable.day.",
	"locations": [
		{
			"line": 4,
			"column": 5
		}
	],
	"path": [
		"updateScheduleTimetable",
		"day"
	],
	"extensions": {
		"code": "INTERNAL_SERVER_ERROR",
		"exception": {
			"stacktrace": [
				"Error: Cannot return null for non-nullable field ScheduleTimetable.day.",
				"    at completeValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:560:13)",
				"    at completeValueCatchingError (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:495:19)",
				"    at resolveField (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:435:10)",
				"    at executeFields (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:275:18)",
				"    at collectAndExecuteSubfields (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:713:10)",
				"    at completeObjectValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:703:10)",
				"    at completeValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:591:12)",
				"    at completeValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:557:21)",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:492:16"
			]
		}
	}
}2020-02-14T17:05:47.702Z{
	"message": "Variable \"$id\" of required type \"ID!\" was not provided.",
	"locations": [
		{
			"line": 1,
			"column": 34
		}
	],
	"extensions": {
		"code": "INTERNAL_SERVER_ERROR",
		"exception": {
			"stacktrace": [
				"GraphQLError: Variable \"$id\" of required type \"ID!\" was not provided.",
				"    at _loop (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\values.js:92:17)",
				"    at coerceVariableValues (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\values.js:119:16)",
				"    at getVariableValues (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\values.js:48:19)",
				"    at buildExecutionContext (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:184:61)",
				"    at executeImpl (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:89:20)",
				"    at Object.execute (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:64:35)",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\src\\requestPipeline.ts:481:30",
				"    at Generator.next (<anonymous>)",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:8:71",
				"    at new Promise (<anonymous>)",
				"    at __awaiter (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:4:12)",
				"    at execute (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:225:20)",
				"    at Object.<anonymous> (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\src\\requestPipeline.ts:364:30)",
				"    at Generator.next (<anonymous>)",
				"    at fulfilled (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:5:58)",
				"    at process._tickCallback (internal/process/next_tick.js:68:7)"
			]
		}
	}
}2020-02-14T17:23:50.964Z{
	"message": "Cannot return null for non-nullable field ScheduleTimetable.id.",
	"locations": [
		{
			"line": 3,
			"column": 5
		}
	],
	"path": [
		"createScheduleTimetable",
		"id"
	],
	"extensions": {
		"code": "INTERNAL_SERVER_ERROR",
		"exception": {
			"stacktrace": [
				"Error: Cannot return null for non-nullable field ScheduleTimetable.id.",
				"    at completeValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:560:13)",
				"    at completeValueCatchingError (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:495:19)",
				"    at resolveField (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:435:10)",
				"    at executeFields (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:275:18)",
				"    at collectAndExecuteSubfields (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:713:10)",
				"    at completeObjectValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:703:10)",
				"    at completeValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:591:12)",
				"    at completeValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:557:21)",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:492:16"
			]
		}
	}
}2020-02-14T17:34:14.662Z{
	"message": "Cannot query field \"text\" on type \"Query\".",
	"locations": [
		{
			"line": 2,
			"column": 3
		}
	],
	"extensions": {
		"code": "GRAPHQL_VALIDATION_FAILED",
		"exception": {
			"stacktrace": [
				"GraphQLError: Cannot query field \"text\" on type \"Query\".",
				"    at Object.Field (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\validation\\rules\\FieldsOnCorrectType.js:53:31)",
				"    at Object.enter (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\language\\visitor.js:324:29)",
				"    at Object.enter (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\language\\visitor.js:375:25)",
				"    at visit (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\language\\visitor.js:242:26)",
				"    at Object.validate (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\validation\\validate.js:73:24)",
				"    at validate (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\src\\requestPipeline.ts:443:22)",
				"    at Object.<anonymous> (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\src\\requestPipeline.ts:252:32)",
				"    at Generator.next (<anonymous>)",
				"    at fulfilled (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:5:58)",
				"    at process._tickCallback (internal/process/next_tick.js:68:7)"
			]
		}
	}
}2020-02-14T17:34:21.871Z{
	"message": "Cannot query field \"text\" on type \"Query\".",
	"locations": [
		{
			"line": 2,
			"column": 3
		}
	],
	"extensions": {
		"code": "GRAPHQL_VALIDATION_FAILED",
		"exception": {
			"stacktrace": [
				"GraphQLError: Cannot query field \"text\" on type \"Query\".",
				"    at Object.Field (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\validation\\rules\\FieldsOnCorrectType.js:53:31)",
				"    at Object.enter (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\language\\visitor.js:324:29)",
				"    at Object.enter (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\language\\visitor.js:375:25)",
				"    at visit (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\language\\visitor.js:242:26)",
				"    at Object.validate (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\validation\\validate.js:73:24)",
				"    at validate (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\src\\requestPipeline.ts:443:22)",
				"    at Object.<anonymous> (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\src\\requestPipeline.ts:252:32)",
				"    at Generator.next (<anonymous>)",
				"    at fulfilled (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:5:58)",
				"    at process._tickCallback (internal/process/next_tick.js:68:7)"
			]
		}
	}
}2020-02-15T16:45:43.735Z{
	"message": "column \"description\" does not exist",
	"locations": [
		{
			"line": 9,
			"column": 5
		}
	],
	"path": [
		"courses",
		0,
		"resourses"
	],
	"extensions": {
		"code": "INTERNAL_SERVER_ERROR",
		"exception": {
			"name": "SequelizeDatabaseError",
			"parent": {
				"name": "error",
				"length": 111,
				"severity": "ERROR",
				"code": "42703",
				"position": "31",
				"file": "parse_relation.c",
				"line": "3294",
				"routine": "errorMissingColumn",
				"sql": "SELECT \"id\", \"title\", \"type\", \"description\", \"image\", \"fileLink\", \"createdAt\", \"updatedAt\", \"educationFormId\", \"educationCourseId\" FROM \"biophys\".\"educationResourses\" AS \"educationResourse\" WHERE \"educationResourse\".\"educationCourseId\" = 1 ORDER BY \"educationResourse\".\"educationFormId\" ASC;"
			},
			"original": {
				"name": "error",
				"length": 111,
				"severity": "ERROR",
				"code": "42703",
				"position": "31",
				"file": "parse_relation.c",
				"line": "3294",
				"routine": "errorMissingColumn",
				"sql": "SELECT \"id\", \"title\", \"type\", \"description\", \"image\", \"fileLink\", \"createdAt\", \"updatedAt\", \"educationFormId\", \"educationCourseId\" FROM \"biophys\".\"educationResourses\" AS \"educationResourse\" WHERE \"educationResourse\".\"educationCourseId\" = 1 ORDER BY \"educationResourse\".\"educationFormId\" ASC;"
			},
			"sql": "SELECT \"id\", \"title\", \"type\", \"description\", \"image\", \"fileLink\", \"createdAt\", \"updatedAt\", \"educationFormId\", \"educationCourseId\" FROM \"biophys\".\"educationResourses\" AS \"educationResourse\" WHERE \"educationResourse\".\"educationCourseId\" = 1 ORDER BY \"educationResourse\".\"educationFormId\" ASC;",
			"stacktrace": [
				"SequelizeDatabaseError: column \"description\" does not exist",
				"    at Query.formatError (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\sequelize\\lib\\dialects\\postgres\\query.js:366:16)",
				"    at query.catch.err (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\sequelize\\lib\\dialects\\postgres\\query.js:72:18)",
				"    at tryCatcher (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\util.js:16:23)",
				"    at Promise._settlePromiseFromHandler (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\promise.js:547:31)",
				"    at Promise._settlePromise (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\promise.js:604:18)",
				"    at Promise._settlePromise0 (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\promise.js:649:10)",
				"    at Promise._settlePromises (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\promise.js:725:18)",
				"    at _drainQueueStep (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\async.js:93:12)",
				"    at _drainQueue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\async.js:86:9)",
				"    at Async._drainQueues (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\async.js:102:5)",
				"    at Immediate.Async.drainQueues [as _onImmediate] (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\async.js:15:14)",
				"    at runCallback (timers.js:705:18)",
				"    at tryOnImmediate (timers.js:676:5)",
				"    at processImmediate (timers.js:658:5)",
				"    at process.topLevelDomainCallback (domain.js:120:23)"
			]
		}
	}
}2020-02-15T16:47:16.314Z{
	"message": "column \"description\" does not exist",
	"locations": [
		{
			"line": 9,
			"column": 5
		}
	],
	"path": [
		"courses",
		0,
		"resourses"
	],
	"extensions": {
		"code": "INTERNAL_SERVER_ERROR",
		"exception": {
			"name": "SequelizeDatabaseError",
			"parent": {
				"name": "error",
				"length": 111,
				"severity": "ERROR",
				"code": "42703",
				"position": "31",
				"file": "parse_relation.c",
				"line": "3294",
				"routine": "errorMissingColumn",
				"sql": "SELECT \"id\", \"title\", \"type\", \"description\", \"image\", \"fileLink\", \"createdAt\", \"updatedAt\", \"educationFormId\", \"educationCourseId\" FROM \"biophys\".\"educationResourses\" AS \"educationResourse\" WHERE \"educationResourse\".\"educationCourseId\" = 1 ORDER BY \"educationResourse\".\"educationFormId\" ASC;"
			},
			"original": {
				"name": "error",
				"length": 111,
				"severity": "ERROR",
				"code": "42703",
				"position": "31",
				"file": "parse_relation.c",
				"line": "3294",
				"routine": "errorMissingColumn",
				"sql": "SELECT \"id\", \"title\", \"type\", \"description\", \"image\", \"fileLink\", \"createdAt\", \"updatedAt\", \"educationFormId\", \"educationCourseId\" FROM \"biophys\".\"educationResourses\" AS \"educationResourse\" WHERE \"educationResourse\".\"educationCourseId\" = 1 ORDER BY \"educationResourse\".\"educationFormId\" ASC;"
			},
			"sql": "SELECT \"id\", \"title\", \"type\", \"description\", \"image\", \"fileLink\", \"createdAt\", \"updatedAt\", \"educationFormId\", \"educationCourseId\" FROM \"biophys\".\"educationResourses\" AS \"educationResourse\" WHERE \"educationResourse\".\"educationCourseId\" = 1 ORDER BY \"educationResourse\".\"educationFormId\" ASC;",
			"stacktrace": [
				"SequelizeDatabaseError: column \"description\" does not exist",
				"    at Query.formatError (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\sequelize\\lib\\dialects\\postgres\\query.js:366:16)",
				"    at query.catch.err (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\sequelize\\lib\\dialects\\postgres\\query.js:72:18)",
				"    at tryCatcher (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\util.js:16:23)",
				"    at Promise._settlePromiseFromHandler (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\promise.js:547:31)",
				"    at Promise._settlePromise (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\promise.js:604:18)",
				"    at Promise._settlePromise0 (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\promise.js:649:10)",
				"    at Promise._settlePromises (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\promise.js:725:18)",
				"    at _drainQueueStep (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\async.js:93:12)",
				"    at _drainQueue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\async.js:86:9)",
				"    at Async._drainQueues (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\async.js:102:5)",
				"    at Immediate.Async.drainQueues [as _onImmediate] (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\async.js:15:14)",
				"    at runCallback (timers.js:705:18)",
				"    at tryOnImmediate (timers.js:676:5)",
				"    at processImmediate (timers.js:658:5)",
				"    at process.topLevelDomainCallback (domain.js:120:23)"
			]
		}
	}
}2020-02-15T16:47:18.263Z{
	"message": "column \"description\" does not exist",
	"locations": [
		{
			"line": 9,
			"column": 5
		}
	],
	"path": [
		"courses",
		0,
		"resourses"
	],
	"extensions": {
		"code": "INTERNAL_SERVER_ERROR",
		"exception": {
			"name": "SequelizeDatabaseError",
			"parent": {
				"name": "error",
				"length": 111,
				"severity": "ERROR",
				"code": "42703",
				"position": "31",
				"file": "parse_relation.c",
				"line": "3294",
				"routine": "errorMissingColumn",
				"sql": "SELECT \"id\", \"title\", \"type\", \"description\", \"image\", \"fileLink\", \"createdAt\", \"updatedAt\", \"educationFormId\", \"educationCourseId\" FROM \"biophys\".\"educationResourses\" AS \"educationResourse\" WHERE \"educationResourse\".\"educationCourseId\" = 1 ORDER BY \"educationResourse\".\"educationFormId\" ASC;"
			},
			"original": {
				"name": "error",
				"length": 111,
				"severity": "ERROR",
				"code": "42703",
				"position": "31",
				"file": "parse_relation.c",
				"line": "3294",
				"routine": "errorMissingColumn",
				"sql": "SELECT \"id\", \"title\", \"type\", \"description\", \"image\", \"fileLink\", \"createdAt\", \"updatedAt\", \"educationFormId\", \"educationCourseId\" FROM \"biophys\".\"educationResourses\" AS \"educationResourse\" WHERE \"educationResourse\".\"educationCourseId\" = 1 ORDER BY \"educationResourse\".\"educationFormId\" ASC;"
			},
			"sql": "SELECT \"id\", \"title\", \"type\", \"description\", \"image\", \"fileLink\", \"createdAt\", \"updatedAt\", \"educationFormId\", \"educationCourseId\" FROM \"biophys\".\"educationResourses\" AS \"educationResourse\" WHERE \"educationResourse\".\"educationCourseId\" = 1 ORDER BY \"educationResourse\".\"educationFormId\" ASC;",
			"stacktrace": [
				"SequelizeDatabaseError: column \"description\" does not exist",
				"    at Query.formatError (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\sequelize\\lib\\dialects\\postgres\\query.js:366:16)",
				"    at query.catch.err (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\sequelize\\lib\\dialects\\postgres\\query.js:72:18)",
				"    at tryCatcher (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\util.js:16:23)",
				"    at Promise._settlePromiseFromHandler (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\promise.js:547:31)",
				"    at Promise._settlePromise (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\promise.js:604:18)",
				"    at Promise._settlePromise0 (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\promise.js:649:10)",
				"    at Promise._settlePromises (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\promise.js:725:18)",
				"    at _drainQueueStep (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\async.js:93:12)",
				"    at _drainQueue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\async.js:86:9)",
				"    at Async._drainQueues (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\async.js:102:5)",
				"    at Immediate.Async.drainQueues [as _onImmediate] (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\async.js:15:14)",
				"    at runCallback (timers.js:705:18)",
				"    at tryOnImmediate (timers.js:676:5)",
				"    at processImmediate (timers.js:658:5)",
				"    at process.topLevelDomainCallback (domain.js:120:23)"
			]
		}
	}
}2020-02-15T16:47:31.071Z{
	"message": "column \"description\" does not exist",
	"locations": [
		{
			"line": 9,
			"column": 5
		}
	],
	"path": [
		"courses",
		0,
		"resourses"
	],
	"extensions": {
		"code": "INTERNAL_SERVER_ERROR",
		"exception": {
			"name": "SequelizeDatabaseError",
			"parent": {
				"name": "error",
				"length": 111,
				"severity": "ERROR",
				"code": "42703",
				"position": "31",
				"file": "parse_relation.c",
				"line": "3294",
				"routine": "errorMissingColumn",
				"sql": "SELECT \"id\", \"title\", \"type\", \"description\", \"image\", \"fileLink\", \"createdAt\", \"updatedAt\", \"educationFormId\", \"educationCourseId\" FROM \"biophys\".\"educationResourses\" AS \"educationResourse\" WHERE \"educationResourse\".\"educationCourseId\" = 1 ORDER BY \"educationResourse\".\"educationFormId\" ASC;"
			},
			"original": {
				"name": "error",
				"length": 111,
				"severity": "ERROR",
				"code": "42703",
				"position": "31",
				"file": "parse_relation.c",
				"line": "3294",
				"routine": "errorMissingColumn",
				"sql": "SELECT \"id\", \"title\", \"type\", \"description\", \"image\", \"fileLink\", \"createdAt\", \"updatedAt\", \"educationFormId\", \"educationCourseId\" FROM \"biophys\".\"educationResourses\" AS \"educationResourse\" WHERE \"educationResourse\".\"educationCourseId\" = 1 ORDER BY \"educationResourse\".\"educationFormId\" ASC;"
			},
			"sql": "SELECT \"id\", \"title\", \"type\", \"description\", \"image\", \"fileLink\", \"createdAt\", \"updatedAt\", \"educationFormId\", \"educationCourseId\" FROM \"biophys\".\"educationResourses\" AS \"educationResourse\" WHERE \"educationResourse\".\"educationCourseId\" = 1 ORDER BY \"educationResourse\".\"educationFormId\" ASC;",
			"stacktrace": [
				"SequelizeDatabaseError: column \"description\" does not exist",
				"    at Query.formatError (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\sequelize\\lib\\dialects\\postgres\\query.js:366:16)",
				"    at query.catch.err (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\sequelize\\lib\\dialects\\postgres\\query.js:72:18)",
				"    at tryCatcher (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\util.js:16:23)",
				"    at Promise._settlePromiseFromHandler (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\promise.js:547:31)",
				"    at Promise._settlePromise (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\promise.js:604:18)",
				"    at Promise._settlePromise0 (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\promise.js:649:10)",
				"    at Promise._settlePromises (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\promise.js:725:18)",
				"    at _drainQueueStep (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\async.js:93:12)",
				"    at _drainQueue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\async.js:86:9)",
				"    at Async._drainQueues (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\async.js:102:5)",
				"    at Immediate.Async.drainQueues [as _onImmediate] (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\async.js:15:14)",
				"    at runCallback (timers.js:705:18)",
				"    at tryOnImmediate (timers.js:676:5)",
				"    at processImmediate (timers.js:658:5)",
				"    at process.topLevelDomainCallback (domain.js:120:23)"
			]
		}
	}
}2020-02-17T06:28:05.761Z{
	"message": "Variable \"$inputData\" got invalid value \"\" at \"inputData.onTop\"; Expected type Boolean. Boolean cannot represent a non boolean value: \"\"",
	"locations": [
		{
			"line": 1,
			"column": 31
		}
	],
	"extensions": {
		"code": "INTERNAL_SERVER_ERROR",
		"exception": {
			"stacktrace": [
				"TypeError: Boolean cannot represent a non boolean value: \"\"",
				"    at GraphQLScalarType.coerceBoolean [as parseValue] (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\type\\scalars.js:195:11)",
				"    at coerceInputValueImpl (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\utilities\\coerceInputValue.js:127:26)",
				"    at coerceInputValueImpl (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\utilities\\coerceInputValue.js:105:35)",
				"    at coerceInputValueImpl (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\utilities\\coerceInputValue.js:54:14)",
				"    at coerceInputValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\utilities\\coerceInputValue.js:37:10)",
				"    at _loop (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\values.js:107:69)",
				"    at coerceVariableValues (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\values.js:119:16)",
				"    at getVariableValues (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\values.js:48:19)",
				"    at buildExecutionContext (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:184:61)",
				"    at executeImpl (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:89:20)",
				"    at Object.execute (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:64:35)",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\src\\requestPipeline.ts:481:30",
				"    at Generator.next (<anonymous>)",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:8:71",
				"    at new Promise (<anonymous>)",
				"    at __awaiter (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:4:12)",
				"    at execute (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:225:20)",
				"    at Object.<anonymous> (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\src\\requestPipeline.ts:364:30)",
				"    at Generator.next (<anonymous>)",
				"    at fulfilled (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:5:58)",
				"    at process._tickCallback (internal/process/next_tick.js:68:7)"
			]
		}
	}
}2020-02-17T06:30:30.539Z{
	"message": "Variable \"$inputData\" got invalid value \"\" at \"inputData.onTop\"; Expected type Boolean. Boolean cannot represent a non boolean value: \"\"",
	"locations": [
		{
			"line": 1,
			"column": 31
		}
	],
	"extensions": {
		"code": "INTERNAL_SERVER_ERROR",
		"exception": {
			"stacktrace": [
				"TypeError: Boolean cannot represent a non boolean value: \"\"",
				"    at GraphQLScalarType.coerceBoolean [as parseValue] (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\type\\scalars.js:195:11)",
				"    at coerceInputValueImpl (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\utilities\\coerceInputValue.js:127:26)",
				"    at coerceInputValueImpl (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\utilities\\coerceInputValue.js:105:35)",
				"    at coerceInputValueImpl (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\utilities\\coerceInputValue.js:54:14)",
				"    at coerceInputValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\utilities\\coerceInputValue.js:37:10)",
				"    at _loop (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\values.js:107:69)",
				"    at coerceVariableValues (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\values.js:119:16)",
				"    at getVariableValues (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\values.js:48:19)",
				"    at buildExecutionContext (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:184:61)",
				"    at executeImpl (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:89:20)",
				"    at Object.execute (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:64:35)",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\src\\requestPipeline.ts:481:30",
				"    at Generator.next (<anonymous>)",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:8:71",
				"    at new Promise (<anonymous>)",
				"    at __awaiter (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:4:12)",
				"    at execute (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:225:20)",
				"    at Object.<anonymous> (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\src\\requestPipeline.ts:364:30)",
				"    at Generator.next (<anonymous>)",
				"    at fulfilled (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:5:58)",
				"    at process._tickCallback (internal/process/next_tick.js:68:7)"
			]
		}
	}
}2020-02-17T06:33:09.008Z{
	"message": "Variable \"$inputData\" got invalid value \"\" at \"inputData.onTop\"; Expected type Boolean. Boolean cannot represent a non boolean value: \"\"",
	"locations": [
		{
			"line": 1,
			"column": 31
		}
	],
	"extensions": {
		"code": "INTERNAL_SERVER_ERROR",
		"exception": {
			"stacktrace": [
				"TypeError: Boolean cannot represent a non boolean value: \"\"",
				"    at GraphQLScalarType.coerceBoolean [as parseValue] (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\type\\scalars.js:195:11)",
				"    at coerceInputValueImpl (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\utilities\\coerceInputValue.js:127:26)",
				"    at coerceInputValueImpl (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\utilities\\coerceInputValue.js:105:35)",
				"    at coerceInputValueImpl (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\utilities\\coerceInputValue.js:54:14)",
				"    at coerceInputValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\utilities\\coerceInputValue.js:37:10)",
				"    at _loop (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\values.js:107:69)",
				"    at coerceVariableValues (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\values.js:119:16)",
				"    at getVariableValues (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\values.js:48:19)",
				"    at buildExecutionContext (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:184:61)",
				"    at executeImpl (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:89:20)",
				"    at Object.execute (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:64:35)",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\src\\requestPipeline.ts:481:30",
				"    at Generator.next (<anonymous>)",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:8:71",
				"    at new Promise (<anonymous>)",
				"    at __awaiter (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:4:12)",
				"    at execute (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:225:20)",
				"    at Object.<anonymous> (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\src\\requestPipeline.ts:364:30)",
				"    at Generator.next (<anonymous>)",
				"    at fulfilled (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:5:58)",
				"    at process._tickCallback (internal/process/next_tick.js:68:7)"
			]
		}
	}
}2020-02-18T14:08:32.357Z2020-02-18T14:08:32.359Z{
	"message": "Variable \"$inputData\" got invalid value { course: { course: \"Биофизика 1 курс\", year: 2020, term: 1 }, year: 2020, term: 2 }; Field title of required type String! was not provided.",
	"locations": [
		{
			"line": 1,
			"column": 29
		}
	],
	"extensions": {
		"code": "INTERNAL_SERVER_ERROR",
		"exception": {
			"stacktrace": [
				"GraphQLError: Variable \"$inputData\" got invalid value { course: { course: \"Биофизика 1 курс\", year: 2020, term: 1 }, year: 2020, term: 2 }; Field title of required type String! was not provided.",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\values.js:114:15",
				"    at coerceInputValueImpl (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\utilities\\coerceInputValue.js:99:11)",
				"    at coerceInputValueImpl (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\utilities\\coerceInputValue.js:54:14)",
				"    at coerceInputValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\utilities\\coerceInputValue.js:37:10)",
				"    at _loop (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\values.js:107:69)",
				"    at coerceVariableValues (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\values.js:119:16)",
				"    at getVariableValues (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\values.js:48:19)",
				"    at buildExecutionContext (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:184:61)",
				"    at executeImpl (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:89:20)",
				"    at Object.execute (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:64:35)",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\src\\requestPipeline.ts:481:30",
				"    at Generator.next (<anonymous>)",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:8:71",
				"    at new Promise (<anonymous>)",
				"    at __awaiter (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:4:12)",
				"    at execute (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:225:20)",
				"    at Object.<anonymous> (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\src\\requestPipeline.ts:364:30)",
				"    at Generator.next (<anonymous>)",
				"    at fulfilled (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:5:58)",
				"    at process._tickCallback (internal/process/next_tick.js:68:7)"
			]
		}
	}
}{
	"message": "Variable \"$inputData\" got invalid value { course: { course: \"Биофизика 1 курс\", year: 2020, term: 1 }, year: 2020, term: 2 }; Field \"course\" is not defined by type ScheduleYearCreateData.",
	"locations": [
		{
			"line": 1,
			"column": 29
		}
	],
	"extensions": {
		"code": "INTERNAL_SERVER_ERROR",
		"exception": {
			"stacktrace": [
				"GraphQLError: Variable \"$inputData\" got invalid value { course: { course: \"Биофизика 1 курс\", year: 2020, term: 1 }, year: 2020, term: 2 }; Field \"course\" is not defined by type ScheduleYearCreateData.",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\values.js:114:15",
				"    at coerceInputValueImpl (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\utilities\\coerceInputValue.js:114:9)",
				"    at coerceInputValueImpl (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\utilities\\coerceInputValue.js:54:14)",
				"    at coerceInputValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\utilities\\coerceInputValue.js:37:10)",
				"    at _loop (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\values.js:107:69)",
				"    at coerceVariableValues (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\values.js:119:16)",
				"    at getVariableValues (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\values.js:48:19)",
				"    at buildExecutionContext (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:184:61)",
				"    at executeImpl (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:89:20)",
				"    at Object.execute (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:64:35)",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\src\\requestPipeline.ts:481:30",
				"    at Generator.next (<anonymous>)",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:8:71",
				"    at new Promise (<anonymous>)",
				"    at __awaiter (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:4:12)",
				"    at execute (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:225:20)",
				"    at Object.<anonymous> (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\src\\requestPipeline.ts:364:30)",
				"    at Generator.next (<anonymous>)",
				"    at fulfilled (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:5:58)",
				"    at process._tickCallback (internal/process/next_tick.js:68:7)"
			]
		}
	}
}2020-02-18T14:10:42.605Z2020-02-18T14:10:42.606Z2020-02-18T14:10:42.608Z2020-02-18T14:10:42.609Z{
	"message": "Variable \"$inputData\" got invalid value { course: { course: \"Биофизика 1 курс\", year: 2020, term: 1 } }; Field title of required type String! was not provided.",
	"locations": [
		{
			"line": 1,
			"column": 29
		}
	],
	"extensions": {
		"code": "INTERNAL_SERVER_ERROR",
		"exception": {
			"stacktrace": [
				"GraphQLError: Variable \"$inputData\" got invalid value { course: { course: \"Биофизика 1 курс\", year: 2020, term: 1 } }; Field title of required type String! was not provided.",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\values.js:114:15",
				"    at coerceInputValueImpl (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\utilities\\coerceInputValue.js:99:11)",
				"    at coerceInputValueImpl (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\utilities\\coerceInputValue.js:54:14)",
				"    at coerceInputValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\utilities\\coerceInputValue.js:37:10)",
				"    at _loop (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\values.js:107:69)",
				"    at coerceVariableValues (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\values.js:119:16)",
				"    at getVariableValues (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\values.js:48:19)",
				"    at buildExecutionContext (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:184:61)",
				"    at executeImpl (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:89:20)",
				"    at Object.execute (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:64:35)",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\src\\requestPipeline.ts:481:30",
				"    at Generator.next (<anonymous>)",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:8:71",
				"    at new Promise (<anonymous>)",
				"    at __awaiter (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:4:12)",
				"    at execute (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:225:20)",
				"    at Object.<anonymous> (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\src\\requestPipeline.ts:364:30)",
				"    at Generator.next (<anonymous>)",
				"    at fulfilled (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:5:58)",
				"    at process._tickCallback (internal/process/next_tick.js:68:7)"
			]
		}
	}
}{
	"message": "Variable \"$inputData\" got invalid value { course: { course: \"Биофизика 1 курс\", year: 2020, term: 1 } }; Field year of required type Int! was not provided.",
	"locations": [
		{
			"line": 1,
			"column": 29
		}
	],
	"extensions": {
		"code": "INTERNAL_SERVER_ERROR",
		"exception": {
			"stacktrace": [
				"GraphQLError: Variable \"$inputData\" got invalid value { course: { course: \"Биофизика 1 курс\", year: 2020, term: 1 } }; Field year of required type Int! was not provided.",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\values.js:114:15",
				"    at coerceInputValueImpl (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\utilities\\coerceInputValue.js:99:11)",
				"    at coerceInputValueImpl (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\utilities\\coerceInputValue.js:54:14)",
				"    at coerceInputValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\utilities\\coerceInputValue.js:37:10)",
				"    at _loop (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\values.js:107:69)",
				"    at coerceVariableValues (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\values.js:119:16)",
				"    at getVariableValues (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\values.js:48:19)",
				"    at buildExecutionContext (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:184:61)",
				"    at executeImpl (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:89:20)",
				"    at Object.execute (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:64:35)",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\src\\requestPipeline.ts:481:30",
				"    at Generator.next (<anonymous>)",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:8:71",
				"    at new Promise (<anonymous>)",
				"    at __awaiter (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:4:12)",
				"    at execute (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:225:20)",
				"    at Object.<anonymous> (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\src\\requestPipeline.ts:364:30)",
				"    at Generator.next (<anonymous>)",
				"    at fulfilled (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:5:58)",
				"    at process._tickCallback (internal/process/next_tick.js:68:7)"
			]
		}
	}
}{
	"message": "Variable \"$inputData\" got invalid value { course: { course: \"Биофизика 1 курс\", year: 2020, term: 1 } }; Field term of required type Int! was not provided.",
	"locations": [
		{
			"line": 1,
			"column": 29
		}
	],
	"extensions": {
		"code": "INTERNAL_SERVER_ERROR",
		"exception": {
			"stacktrace": [
				"GraphQLError: Variable \"$inputData\" got invalid value { course: { course: \"Биофизика 1 курс\", year: 2020, term: 1 } }; Field term of required type Int! was not provided.",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\values.js:114:15",
				"    at coerceInputValueImpl (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\utilities\\coerceInputValue.js:99:11)",
				"    at coerceInputValueImpl (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\utilities\\coerceInputValue.js:54:14)",
				"    at coerceInputValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\utilities\\coerceInputValue.js:37:10)",
				"    at _loop (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\values.js:107:69)",
				"    at coerceVariableValues (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\values.js:119:16)",
				"    at getVariableValues (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\values.js:48:19)",
				"    at buildExecutionContext (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:184:61)",
				"    at executeImpl (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:89:20)",
				"    at Object.execute (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:64:35)",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\src\\requestPipeline.ts:481:30",
				"    at Generator.next (<anonymous>)",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:8:71",
				"    at new Promise (<anonymous>)",
				"    at __awaiter (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:4:12)",
				"    at execute (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:225:20)",
				"    at Object.<anonymous> (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\src\\requestPipeline.ts:364:30)",
				"    at Generator.next (<anonymous>)",
				"    at fulfilled (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:5:58)",
				"    at process._tickCallback (internal/process/next_tick.js:68:7)"
			]
		}
	}
}{
	"message": "Variable \"$inputData\" got invalid value { course: { course: \"Биофизика 1 курс\", year: 2020, term: 1 } }; Field \"course\" is not defined by type ScheduleYearCreateData.",
	"locations": [
		{
			"line": 1,
			"column": 29
		}
	],
	"extensions": {
		"code": "INTERNAL_SERVER_ERROR",
		"exception": {
			"stacktrace": [
				"GraphQLError: Variable \"$inputData\" got invalid value { course: { course: \"Биофизика 1 курс\", year: 2020, term: 1 } }; Field \"course\" is not defined by type ScheduleYearCreateData.",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\values.js:114:15",
				"    at coerceInputValueImpl (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\utilities\\coerceInputValue.js:114:9)",
				"    at coerceInputValueImpl (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\utilities\\coerceInputValue.js:54:14)",
				"    at coerceInputValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\utilities\\coerceInputValue.js:37:10)",
				"    at _loop (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\values.js:107:69)",
				"    at coerceVariableValues (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\values.js:119:16)",
				"    at getVariableValues (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\values.js:48:19)",
				"    at buildExecutionContext (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:184:61)",
				"    at executeImpl (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:89:20)",
				"    at Object.execute (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:64:35)",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\src\\requestPipeline.ts:481:30",
				"    at Generator.next (<anonymous>)",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:8:71",
				"    at new Promise (<anonymous>)",
				"    at __awaiter (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:4:12)",
				"    at execute (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:225:20)",
				"    at Object.<anonymous> (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\src\\requestPipeline.ts:364:30)",
				"    at Generator.next (<anonymous>)",
				"    at fulfilled (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:5:58)",
				"    at process._tickCallback (internal/process/next_tick.js:68:7)"
			]
		}
	}
}2020-02-18T14:11:40.875Z2020-02-18T14:11:40.876Z{
	"message": "Variable \"$inputData\" got invalid value { course: \"Биофизика\", year: 2020, term: 1 }; Field title of required type String! was not provided.",
	"locations": [
		{
			"line": 1,
			"column": 29
		}
	],
	"extensions": {
		"code": "INTERNAL_SERVER_ERROR",
		"exception": {
			"stacktrace": [
				"GraphQLError: Variable \"$inputData\" got invalid value { course: \"Биофизика\", year: 2020, term: 1 }; Field title of required type String! was not provided.",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\values.js:114:15",
				"    at coerceInputValueImpl (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\utilities\\coerceInputValue.js:99:11)",
				"    at coerceInputValueImpl (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\utilities\\coerceInputValue.js:54:14)",
				"    at coerceInputValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\utilities\\coerceInputValue.js:37:10)",
				"    at _loop (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\values.js:107:69)",
				"    at coerceVariableValues (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\values.js:119:16)",
				"    at getVariableValues (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\values.js:48:19)",
				"    at buildExecutionContext (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:184:61)",
				"    at executeImpl (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:89:20)",
				"    at Object.execute (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:64:35)",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\src\\requestPipeline.ts:481:30",
				"    at Generator.next (<anonymous>)",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:8:71",
				"    at new Promise (<anonymous>)",
				"    at __awaiter (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:4:12)",
				"    at execute (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:225:20)",
				"    at Object.<anonymous> (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\src\\requestPipeline.ts:364:30)",
				"    at Generator.next (<anonymous>)",
				"    at fulfilled (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:5:58)",
				"    at process._tickCallback (internal/process/next_tick.js:68:7)"
			]
		}
	}
}{
	"message": "Variable \"$inputData\" got invalid value { course: \"Биофизика\", year: 2020, term: 1 }; Field \"course\" is not defined by type ScheduleYearCreateData.",
	"locations": [
		{
			"line": 1,
			"column": 29
		}
	],
	"extensions": {
		"code": "INTERNAL_SERVER_ERROR",
		"exception": {
			"stacktrace": [
				"GraphQLError: Variable \"$inputData\" got invalid value { course: \"Биофизика\", year: 2020, term: 1 }; Field \"course\" is not defined by type ScheduleYearCreateData.",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\values.js:114:15",
				"    at coerceInputValueImpl (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\utilities\\coerceInputValue.js:114:9)",
				"    at coerceInputValueImpl (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\utilities\\coerceInputValue.js:54:14)",
				"    at coerceInputValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\utilities\\coerceInputValue.js:37:10)",
				"    at _loop (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\values.js:107:69)",
				"    at coerceVariableValues (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\values.js:119:16)",
				"    at getVariableValues (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\values.js:48:19)",
				"    at buildExecutionContext (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:184:61)",
				"    at executeImpl (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:89:20)",
				"    at Object.execute (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:64:35)",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\src\\requestPipeline.ts:481:30",
				"    at Generator.next (<anonymous>)",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:8:71",
				"    at new Promise (<anonymous>)",
				"    at __awaiter (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:4:12)",
				"    at execute (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:225:20)",
				"    at Object.<anonymous> (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\src\\requestPipeline.ts:364:30)",
				"    at Generator.next (<anonymous>)",
				"    at fulfilled (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:5:58)",
				"    at process._tickCallback (internal/process/next_tick.js:68:7)"
			]
		}
	}
}2020-02-18T14:15:18.276Z{
	"message": "Variable \"$inputData\" got invalid value \"2\" at \"inputData.term\"; Expected type Int. Int cannot represent non-integer value: \"2\"",
	"locations": [
		{
			"line": 1,
			"column": 29
		}
	],
	"extensions": {
		"code": "INTERNAL_SERVER_ERROR",
		"exception": {
			"stacktrace": [
				"TypeError: Int cannot represent non-integer value: \"2\"",
				"    at GraphQLScalarType.coerceInt [as parseValue] (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\type\\scalars.js:55:11)",
				"    at coerceInputValueImpl (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\utilities\\coerceInputValue.js:127:26)",
				"    at coerceInputValueImpl (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\utilities\\coerceInputValue.js:54:14)",
				"    at coerceInputValueImpl (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\utilities\\coerceInputValue.js:105:35)",
				"    at coerceInputValueImpl (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\utilities\\coerceInputValue.js:54:14)",
				"    at coerceInputValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\utilities\\coerceInputValue.js:37:10)",
				"    at _loop (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\values.js:107:69)",
				"    at coerceVariableValues (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\values.js:119:16)",
				"    at getVariableValues (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\values.js:48:19)",
				"    at buildExecutionContext (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:184:61)",
				"    at executeImpl (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:89:20)",
				"    at Object.execute (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:64:35)",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\src\\requestPipeline.ts:481:30",
				"    at Generator.next (<anonymous>)",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:8:71",
				"    at new Promise (<anonymous>)",
				"    at __awaiter (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:4:12)",
				"    at execute (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:225:20)",
				"    at Object.<anonymous> (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\src\\requestPipeline.ts:364:30)",
				"    at Generator.next (<anonymous>)",
				"    at fulfilled (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:5:58)",
				"    at process._tickCallback (internal/process/next_tick.js:68:7)"
			]
		}
	}
}2020-02-18T14:17:20.917Z{
	"message": "Variable \"$inputData\" got invalid value \"2\" at \"inputData.term\"; Expected type Int. Int cannot represent non-integer value: \"2\"",
	"locations": [
		{
			"line": 1,
			"column": 29
		}
	],
	"extensions": {
		"code": "INTERNAL_SERVER_ERROR",
		"exception": {
			"stacktrace": [
				"TypeError: Int cannot represent non-integer value: \"2\"",
				"    at GraphQLScalarType.coerceInt [as parseValue] (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\type\\scalars.js:55:11)",
				"    at coerceInputValueImpl (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\utilities\\coerceInputValue.js:127:26)",
				"    at coerceInputValueImpl (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\utilities\\coerceInputValue.js:54:14)",
				"    at coerceInputValueImpl (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\utilities\\coerceInputValue.js:105:35)",
				"    at coerceInputValueImpl (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\utilities\\coerceInputValue.js:54:14)",
				"    at coerceInputValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\utilities\\coerceInputValue.js:37:10)",
				"    at _loop (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\values.js:107:69)",
				"    at coerceVariableValues (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\values.js:119:16)",
				"    at getVariableValues (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\values.js:48:19)",
				"    at buildExecutionContext (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:184:61)",
				"    at executeImpl (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:89:20)",
				"    at Object.execute (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:64:35)",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\src\\requestPipeline.ts:481:30",
				"    at Generator.next (<anonymous>)",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:8:71",
				"    at new Promise (<anonymous>)",
				"    at __awaiter (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:4:12)",
				"    at execute (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:225:20)",
				"    at Object.<anonymous> (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\src\\requestPipeline.ts:364:30)",
				"    at Generator.next (<anonymous>)",
				"    at fulfilled (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:5:58)",
				"    at process._tickCallback (internal/process/next_tick.js:68:7)"
			]
		}
	}
}2020-02-18T16:16:33.598Z{
	"message": "column scheduleYear.calendarYear does not exist",
	"locations": [
		{
			"line": 2,
			"column": 3
		}
	],
	"path": [
		"years"
	],
	"extensions": {
		"code": "INTERNAL_SERVER_ERROR",
		"exception": {
			"name": "SequelizeDatabaseError",
			"parent": {
				"name": "error",
				"length": 124,
				"severity": "ERROR",
				"code": "42703",
				"position": "118",
				"file": "parse_relation.c",
				"line": "3294",
				"routine": "errorMissingColumn",
				"sql": "SELECT \"id\", \"title\", \"year\", \"term\", \"createdAt\", \"updatedAt\" FROM \"biophys\".\"scheduleYear\" AS \"scheduleYear\" WHERE \"scheduleYear\".\"calendarYear\" = 2020 AND \"scheduleYear\".\"term\" = 2;"
			},
			"original": {
				"name": "error",
				"length": 124,
				"severity": "ERROR",
				"code": "42703",
				"position": "118",
				"file": "parse_relation.c",
				"line": "3294",
				"routine": "errorMissingColumn",
				"sql": "SELECT \"id\", \"title\", \"year\", \"term\", \"createdAt\", \"updatedAt\" FROM \"biophys\".\"scheduleYear\" AS \"scheduleYear\" WHERE \"scheduleYear\".\"calendarYear\" = 2020 AND \"scheduleYear\".\"term\" = 2;"
			},
			"sql": "SELECT \"id\", \"title\", \"year\", \"term\", \"createdAt\", \"updatedAt\" FROM \"biophys\".\"scheduleYear\" AS \"scheduleYear\" WHERE \"scheduleYear\".\"calendarYear\" = 2020 AND \"scheduleYear\".\"term\" = 2;",
			"stacktrace": [
				"SequelizeDatabaseError: column scheduleYear.calendarYear does not exist",
				"    at Query.formatError (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\sequelize\\lib\\dialects\\postgres\\query.js:366:16)",
				"    at query.catch.err (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\sequelize\\lib\\dialects\\postgres\\query.js:72:18)",
				"    at tryCatcher (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\util.js:16:23)",
				"    at Promise._settlePromiseFromHandler (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\promise.js:547:31)",
				"    at Promise._settlePromise (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\promise.js:604:18)",
				"    at Promise._settlePromise0 (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\promise.js:649:10)",
				"    at Promise._settlePromises (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\promise.js:725:18)",
				"    at _drainQueueStep (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\async.js:93:12)",
				"    at _drainQueue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\async.js:86:9)",
				"    at Async._drainQueues (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\async.js:102:5)",
				"    at Immediate.Async.drainQueues [as _onImmediate] (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\async.js:15:14)",
				"    at runCallback (timers.js:705:18)",
				"    at tryOnImmediate (timers.js:676:5)",
				"    at processImmediate (timers.js:658:5)",
				"    at process.topLevelDomainCallback (domain.js:120:23)"
			]
		}
	}
}2020-02-18T16:17:11.448Z{
	"message": "Unknown argument \"year\" on field \"years\" of type \"Query\".",
	"locations": [
		{
			"line": 2,
			"column": 9
		}
	],
	"extensions": {
		"code": "GRAPHQL_VALIDATION_FAILED",
		"exception": {
			"stacktrace": [
				"GraphQLError: Unknown argument \"year\" on field \"years\" of type \"Query\".",
				"    at Object.Argument (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\validation\\rules\\KnownArgumentNames.js:60:29)",
				"    at Object.enter (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\language\\visitor.js:324:29)",
				"    at Object.enter (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\language\\visitor.js:375:25)",
				"    at visit (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\language\\visitor.js:242:26)",
				"    at Object.validate (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\validation\\validate.js:73:24)",
				"    at validate (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\src\\requestPipeline.ts:443:22)",
				"    at Object.<anonymous> (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\src\\requestPipeline.ts:252:32)",
				"    at Generator.next (<anonymous>)",
				"    at fulfilled (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:5:58)",
				"    at process._tickCallback (internal/process/next_tick.js:68:7)"
			]
		}
	}
}2020-02-18T16:50:14.046Z{
	"message": "This day does not exist 0",
	"locations": [
		{
			"line": 2,
			"column": 3
		}
	],
	"path": [
		"createScheduleTimetable"
	],
	"extensions": {
		"code": "INTERNAL_SERVER_ERROR",
		"exception": {
			"stacktrace": [
				"Error: This day does not exist 0",
				"    at _callee4$ (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\src\\resolvers\\mutation/education.js:32:23)",
				"    at tryCatch (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\regenerator-runtime\\runtime.js:45:40)",
				"    at Generator.invoke [as _invoke] (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\regenerator-runtime\\runtime.js:271:22)",
				"    at Generator.prototype.(anonymous function) [as next] (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\regenerator-runtime\\runtime.js:97:21)",
				"    at asyncGeneratorStep (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\src\\resolvers\\mutation\\education.js:16:103)",
				"    at _next (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\src\\resolvers\\mutation\\education.js:18:194)"
			]
		}
	}
}2020-02-19T10:06:44.795Z{
	"message": "This day does not exist 0",
	"locations": [
		{
			"line": 2,
			"column": 3
		}
	],
	"path": [
		"createScheduleTimetable"
	],
	"extensions": {
		"code": "INTERNAL_SERVER_ERROR",
		"exception": {
			"stacktrace": [
				"Error: This day does not exist 0",
				"    at _callee4$ (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\src\\resolvers\\mutation/education.js:32:23)",
				"    at tryCatch (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\regenerator-runtime\\runtime.js:45:40)",
				"    at Generator.invoke [as _invoke] (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\regenerator-runtime\\runtime.js:271:22)",
				"    at Generator.prototype.(anonymous function) [as next] (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\regenerator-runtime\\runtime.js:97:21)",
				"    at asyncGeneratorStep (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\src\\resolvers\\mutation\\education.js:16:103)",
				"    at _next (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\src\\resolvers\\mutation\\education.js:18:194)"
			]
		}
	}
}2020-02-19T12:24:52.853Z{
	"message": "day is not defined",
	"locations": [
		{
			"line": 2,
			"column": 3
		}
	],
	"path": [
		"createScheduleTimetable"
	],
	"extensions": {
		"code": "INTERNAL_SERVER_ERROR",
		"exception": {
			"stacktrace": [
				"ReferenceError: day is not defined",
				"    at _callee4$ (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\src\\resolvers\\mutation/education.js:35:7)",
				"    at tryCatch (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\regenerator-runtime\\runtime.js:45:40)",
				"    at Generator.invoke [as _invoke] (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\regenerator-runtime\\runtime.js:271:22)",
				"    at Generator.prototype.(anonymous function) [as next] (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\regenerator-runtime\\runtime.js:97:21)",
				"    at asyncGeneratorStep (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\src\\resolvers\\mutation\\education.js:16:103)",
				"    at _next (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\src\\resolvers\\mutation\\education.js:18:194)"
			]
		}
	}
}2020-02-19T19:11:28.657Z{
	"message": "Variable \"$inputData\" got invalid value { timeFrom: \"18:40\", timeTo: \"19:40\", discipline: \"gggggggggggggg\", lector: \"\", startDate: null, isEven: \"0\", isDouble: { isDouble: \"40\", isOneDouble: true } }; Field \"isDouble\" is not defined by type ScheduleTimetableCreateData.",
	"locations": [
		{
			"line": 1,
			"column": 61
		}
	],
	"extensions": {
		"code": "INTERNAL_SERVER_ERROR",
		"exception": {
			"stacktrace": [
				"GraphQLError: Variable \"$inputData\" got invalid value { timeFrom: \"18:40\", timeTo: \"19:40\", discipline: \"gggggggggggggg\", lector: \"\", startDate: null, isEven: \"0\", isDouble: { isDouble: \"40\", isOneDouble: true } }; Field \"isDouble\" is not defined by type ScheduleTimetableCreateData.",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\values.js:114:15",
				"    at coerceInputValueImpl (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\utilities\\coerceInputValue.js:114:9)",
				"    at coerceInputValueImpl (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\utilities\\coerceInputValue.js:54:14)",
				"    at coerceInputValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\utilities\\coerceInputValue.js:37:10)",
				"    at _loop (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\values.js:107:69)",
				"    at coerceVariableValues (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\values.js:119:16)",
				"    at getVariableValues (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\values.js:48:19)",
				"    at buildExecutionContext (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:184:61)",
				"    at executeImpl (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:89:20)",
				"    at Object.execute (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:64:35)",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\src\\requestPipeline.ts:481:30",
				"    at Generator.next (<anonymous>)",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:8:71",
				"    at new Promise (<anonymous>)",
				"    at __awaiter (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:4:12)",
				"    at execute (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:225:20)",
				"    at Object.<anonymous> (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\src\\requestPipeline.ts:364:30)",
				"    at Generator.next (<anonymous>)",
				"    at fulfilled (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:5:58)",
				"    at process._tickCallback (internal/process/next_tick.js:68:7)"
			]
		}
	}
}2020-02-19T19:20:26.067Z2020-02-19T19:20:26.068Z{
	"message": "Variable \"$inputData\" got invalid value 0 at \"inputData.isEven\"; Expected type String. String cannot represent a non string value: 0",
	"locations": [
		{
			"line": 1,
			"column": 61
		}
	],
	"extensions": {
		"code": "INTERNAL_SERVER_ERROR",
		"exception": {
			"stacktrace": [
				"TypeError: String cannot represent a non string value: 0",
				"    at GraphQLScalarType.coerceString [as parseValue] (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\type\\scalars.js:164:11)",
				"    at coerceInputValueImpl (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\utilities\\coerceInputValue.js:127:26)",
				"    at coerceInputValueImpl (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\utilities\\coerceInputValue.js:54:14)",
				"    at coerceInputValueImpl (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\utilities\\coerceInputValue.js:105:35)",
				"    at coerceInputValueImpl (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\utilities\\coerceInputValue.js:54:14)",
				"    at coerceInputValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\utilities\\coerceInputValue.js:37:10)",
				"    at _loop (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\values.js:107:69)",
				"    at coerceVariableValues (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\values.js:119:16)",
				"    at getVariableValues (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\values.js:48:19)",
				"    at buildExecutionContext (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:184:61)",
				"    at executeImpl (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:89:20)",
				"    at Object.execute (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:64:35)",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\src\\requestPipeline.ts:481:30",
				"    at Generator.next (<anonymous>)",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:8:71",
				"    at new Promise (<anonymous>)",
				"    at __awaiter (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:4:12)",
				"    at execute (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:225:20)",
				"    at Object.<anonymous> (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\src\\requestPipeline.ts:364:30)",
				"    at Generator.next (<anonymous>)",
				"    at fulfilled (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:5:58)",
				"    at process._tickCallback (internal/process/next_tick.js:68:7)"
			]
		}
	}
}{
	"message": "Variable \"$inputData\" got invalid value { timeFrom: \"18:40\", timeTo: \"19:00\", discipline: \"ddddddddddddd\", lector: \"\", startDate: null, isEven: 0, isDouble: \"40\" }; Field \"isDouble\" is not defined by type ScheduleTimetableCreateData.",
	"locations": [
		{
			"line": 1,
			"column": 61
		}
	],
	"extensions": {
		"code": "INTERNAL_SERVER_ERROR",
		"exception": {
			"stacktrace": [
				"GraphQLError: Variable \"$inputData\" got invalid value { timeFrom: \"18:40\", timeTo: \"19:00\", discipline: \"ddddddddddddd\", lector: \"\", startDate: null, isEven: 0, isDouble: \"40\" }; Field \"isDouble\" is not defined by type ScheduleTimetableCreateData.",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\values.js:114:15",
				"    at coerceInputValueImpl (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\utilities\\coerceInputValue.js:114:9)",
				"    at coerceInputValueImpl (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\utilities\\coerceInputValue.js:54:14)",
				"    at coerceInputValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\utilities\\coerceInputValue.js:37:10)",
				"    at _loop (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\values.js:107:69)",
				"    at coerceVariableValues (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\values.js:119:16)",
				"    at getVariableValues (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\values.js:48:19)",
				"    at buildExecutionContext (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:184:61)",
				"    at executeImpl (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:89:20)",
				"    at Object.execute (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:64:35)",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\src\\requestPipeline.ts:481:30",
				"    at Generator.next (<anonymous>)",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:8:71",
				"    at new Promise (<anonymous>)",
				"    at __awaiter (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:4:12)",
				"    at execute (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:225:20)",
				"    at Object.<anonymous> (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\src\\requestPipeline.ts:364:30)",
				"    at Generator.next (<anonymous>)",
				"    at fulfilled (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:5:58)",
				"    at process._tickCallback (internal/process/next_tick.js:68:7)"
			]
		}
	}
}2020-02-19T19:22:51.966Z{
	"message": "Variable \"$inputData\" got invalid value \"40\" at \"inputData.isDouble\"; Expected type Int. Int cannot represent non-integer value: \"40\"",
	"locations": [
		{
			"line": 1,
			"column": 61
		}
	],
	"extensions": {
		"code": "INTERNAL_SERVER_ERROR",
		"exception": {
			"stacktrace": [
				"TypeError: Int cannot represent non-integer value: \"40\"",
				"    at GraphQLScalarType.coerceInt [as parseValue] (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\type\\scalars.js:55:11)",
				"    at coerceInputValueImpl (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\utilities\\coerceInputValue.js:127:26)",
				"    at coerceInputValueImpl (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\utilities\\coerceInputValue.js:54:14)",
				"    at coerceInputValueImpl (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\utilities\\coerceInputValue.js:105:35)",
				"    at coerceInputValueImpl (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\utilities\\coerceInputValue.js:54:14)",
				"    at coerceInputValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\utilities\\coerceInputValue.js:37:10)",
				"    at _loop (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\values.js:107:69)",
				"    at coerceVariableValues (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\values.js:119:16)",
				"    at getVariableValues (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\values.js:48:19)",
				"    at buildExecutionContext (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:184:61)",
				"    at executeImpl (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:89:20)",
				"    at Object.execute (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:64:35)",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\src\\requestPipeline.ts:481:30",
				"    at Generator.next (<anonymous>)",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:8:71",
				"    at new Promise (<anonymous>)",
				"    at __awaiter (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:4:12)",
				"    at execute (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:225:20)",
				"    at Object.<anonymous> (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\src\\requestPipeline.ts:364:30)",
				"    at Generator.next (<anonymous>)",
				"    at fulfilled (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:5:58)",
				"    at process._tickCallback (internal/process/next_tick.js:68:7)"
			]
		}
	}
}2020-02-19T19:23:20.527Z{
	"message": "Validation error: There are 6 working days",
	"locations": [
		{
			"line": 2,
			"column": 3
		}
	],
	"path": [
		"createScheduleTimetable"
	],
	"extensions": {
		"code": "INTERNAL_SERVER_ERROR",
		"exception": {
			"name": "SequelizeValidationError",
			"errors": [
				{
					"message": "There are 6 working days",
					"type": "Validation error",
					"path": "dayId",
					"value": "0",
					"origin": "FUNCTION",
					"instance": {
						"id": null,
						"timeFrom": "18:40",
						"timeTo": "19:00",
						"lector": "",
						"discipline": "ggggggggggggggggggggg",
						"startDate": null,
						"isEven": 0,
						"isDouble": 40,
						"yearId": "1",
						"dayId": "0",
						"updatedAt": "2020-02-19T19:23:20.517Z",
						"createdAt": "2020-02-19T19:23:20.517Z"
					},
					"validatorKey": "min",
					"validatorName": "min",
					"validatorArgs": [
						{
							"args": 0,
							"msg": "There are 6 working days"
						}
					],
					"original": {
						"validatorName": "min",
						"validatorArgs": [
							{
								"args": 0,
								"msg": "There are 6 working days"
							}
						]
					}
				}
			],
			"stacktrace": [
				"SequelizeValidationError: Validation error: There are 6 working days",
				"    at Promise.all.then (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\sequelize\\lib\\instance-validator.js:74:15)",
				"    at tryCatcher (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\util.js:16:23)",
				"    at Promise._settlePromiseFromHandler (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\promise.js:547:31)",
				"    at Promise._settlePromise (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\promise.js:604:18)",
				"    at Promise._settlePromise0 (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\promise.js:649:10)",
				"    at Promise._settlePromises (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\promise.js:729:18)",
				"    at Promise._fulfill (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\promise.js:673:18)",
				"    at PromiseArray._resolve (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\promise_array.js:127:19)",
				"    at PromiseArray._promiseFulfilled (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\promise_array.js:145:14)",
				"    at Promise._settlePromise (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\promise.js:609:26)",
				"    at Promise._settlePromise0 (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\promise.js:649:10)",
				"    at Promise._settlePromises (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\promise.js:729:18)",
				"    at Promise._fulfill (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\promise.js:673:18)",
				"    at Promise._resolveCallback (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\promise.js:466:57)",
				"    at Promise._settlePromiseFromHandler (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\promise.js:559:17)",
				"    at Promise._settlePromise (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\promise.js:604:18)",
				"    at Promise._settlePromise0 (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\promise.js:649:10)",
				"    at Promise._settlePromises (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\promise.js:729:18)",
				"    at Promise._fulfill (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\promise.js:673:18)",
				"    at PromiseArray._resolve (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\promise_array.js:127:19)",
				"    at PromiseArray._promiseFulfilled (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\promise_array.js:145:14)",
				"    at Promise._settlePromise (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\promise.js:609:26)"
			]
		}
	}
}2020-02-19T19:24:12.291Z{
	"message": "Validation error: There are 6 working days",
	"locations": [
		{
			"line": 2,
			"column": 3
		}
	],
	"path": [
		"createScheduleTimetable"
	],
	"extensions": {
		"code": "INTERNAL_SERVER_ERROR",
		"exception": {
			"name": "SequelizeValidationError",
			"errors": [
				{
					"message": "There are 6 working days",
					"type": "Validation error",
					"path": "dayId",
					"value": "0",
					"origin": "FUNCTION",
					"instance": {
						"id": null,
						"timeFrom": "18:40",
						"timeTo": "19:00",
						"lector": "",
						"discipline": "ggggggggggggggggggggg",
						"startDate": null,
						"isEven": 0,
						"isDouble": 40,
						"yearId": "1",
						"dayId": "0",
						"updatedAt": "2020-02-19T19:24:12.280Z",
						"createdAt": "2020-02-19T19:24:12.280Z"
					},
					"validatorKey": "min",
					"validatorName": "min",
					"validatorArgs": [
						{
							"args": 0,
							"msg": "There are 6 working days"
						}
					],
					"original": {
						"validatorName": "min",
						"validatorArgs": [
							{
								"args": 0,
								"msg": "There are 6 working days"
							}
						]
					}
				}
			],
			"stacktrace": [
				"SequelizeValidationError: Validation error: There are 6 working days",
				"    at Promise.all.then (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\sequelize\\lib\\instance-validator.js:74:15)",
				"    at tryCatcher (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\util.js:16:23)",
				"    at Promise._settlePromiseFromHandler (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\promise.js:547:31)",
				"    at Promise._settlePromise (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\promise.js:604:18)",
				"    at Promise._settlePromise0 (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\promise.js:649:10)",
				"    at Promise._settlePromises (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\promise.js:729:18)",
				"    at Promise._fulfill (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\promise.js:673:18)",
				"    at PromiseArray._resolve (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\promise_array.js:127:19)",
				"    at PromiseArray._promiseFulfilled (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\promise_array.js:145:14)",
				"    at Promise._settlePromise (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\promise.js:609:26)",
				"    at Promise._settlePromise0 (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\promise.js:649:10)",
				"    at Promise._settlePromises (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\promise.js:729:18)",
				"    at Promise._fulfill (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\promise.js:673:18)",
				"    at Promise._resolveCallback (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\promise.js:466:57)",
				"    at Promise._settlePromiseFromHandler (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\promise.js:559:17)",
				"    at Promise._settlePromise (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\promise.js:604:18)",
				"    at Promise._settlePromise0 (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\promise.js:649:10)",
				"    at Promise._settlePromises (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\promise.js:729:18)",
				"    at Promise._fulfill (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\promise.js:673:18)",
				"    at PromiseArray._resolve (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\promise_array.js:127:19)",
				"    at PromiseArray._promiseFulfilled (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\promise_array.js:145:14)",
				"    at Promise._settlePromise (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\promise.js:609:26)"
			]
		}
	}
}2020-02-20T12:30:28.951Z{
	"message": "Variable \"$inputData\" got invalid value \"2\" at \"inputData.isDouble\"; Expected type Int. Int cannot represent non-integer value: \"2\"",
	"locations": [
		{
			"line": 1,
			"column": 44
		}
	],
	"extensions": {
		"code": "INTERNAL_SERVER_ERROR",
		"exception": {
			"stacktrace": [
				"TypeError: Int cannot represent non-integer value: \"2\"",
				"    at GraphQLScalarType.coerceInt [as parseValue] (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\type\\scalars.js:55:11)",
				"    at coerceInputValueImpl (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\utilities\\coerceInputValue.js:127:26)",
				"    at coerceInputValueImpl (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\utilities\\coerceInputValue.js:105:35)",
				"    at coerceInputValueImpl (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\utilities\\coerceInputValue.js:54:14)",
				"    at coerceInputValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\utilities\\coerceInputValue.js:37:10)",
				"    at _loop (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\values.js:107:69)",
				"    at coerceVariableValues (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\values.js:119:16)",
				"    at getVariableValues (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\values.js:48:19)",
				"    at buildExecutionContext (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:184:61)",
				"    at executeImpl (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:89:20)",
				"    at Object.execute (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:64:35)",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\src\\requestPipeline.ts:481:30",
				"    at Generator.next (<anonymous>)",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:8:71",
				"    at new Promise (<anonymous>)",
				"    at __awaiter (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:4:12)",
				"    at execute (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:225:20)",
				"    at Object.<anonymous> (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\src\\requestPipeline.ts:364:30)",
				"    at Generator.next (<anonymous>)",
				"    at fulfilled (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:5:58)",
				"    at process._tickCallback (internal/process/next_tick.js:68:7)"
			]
		}
	}
}2020-02-20T12:31:19.277Z{
	"message": "Cannot set property 'isDouble' of null",
	"locations": [
		{
			"line": 2,
			"column": 3
		}
	],
	"path": [
		"deleteScheduleTimetable"
	],
	"extensions": {
		"code": "INTERNAL_SERVER_ERROR",
		"exception": {
			"stacktrace": [
				"TypeError: Cannot set property 'isDouble' of null",
				"    at _callee6$ (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\src\\resolvers\\mutation/education.js:63:7)",
				"    at tryCatch (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\regenerator-runtime\\runtime.js:45:40)",
				"    at Generator.invoke [as _invoke] (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\regenerator-runtime\\runtime.js:271:22)",
				"    at Generator.prototype.(anonymous function) [as next] (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\regenerator-runtime\\runtime.js:97:21)",
				"    at asyncGeneratorStep (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\src\\resolvers\\mutation\\education.js:16:103)",
				"    at _next (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\src\\resolvers\\mutation\\education.js:18:194)"
			]
		}
	}
}2020-02-20T12:32:02.782Z{
	"message": "Cannot return null for non-nullable field ScheduleTimetableDeleteDataReturn.id.",
	"locations": [
		{
			"line": 3,
			"column": 5
		}
	],
	"path": [
		"deleteScheduleTimetable",
		"id"
	],
	"extensions": {
		"code": "INTERNAL_SERVER_ERROR",
		"exception": {
			"stacktrace": [
				"Error: Cannot return null for non-nullable field ScheduleTimetableDeleteDataReturn.id.",
				"    at completeValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:560:13)",
				"    at completeValueCatchingError (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:495:19)",
				"    at resolveField (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:435:10)",
				"    at executeFields (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:275:18)",
				"    at collectAndExecuteSubfields (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:713:10)",
				"    at completeObjectValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:703:10)",
				"    at completeValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:591:12)",
				"    at completeValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:557:21)",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:492:16"
			]
		}
	}
}2020-02-20T12:33:57.152Z{
	"message": "Cannot return null for non-nullable field ScheduleTimetableDeleteDataReturn.id.",
	"locations": [
		{
			"line": 3,
			"column": 5
		}
	],
	"path": [
		"deleteScheduleTimetable",
		"id"
	],
	"extensions": {
		"code": "INTERNAL_SERVER_ERROR",
		"exception": {
			"stacktrace": [
				"Error: Cannot return null for non-nullable field ScheduleTimetableDeleteDataReturn.id.",
				"    at completeValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:560:13)",
				"    at completeValueCatchingError (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:495:19)",
				"    at resolveField (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:435:10)",
				"    at executeFields (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:275:18)",
				"    at collectAndExecuteSubfields (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:713:10)",
				"    at completeObjectValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:703:10)",
				"    at completeValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:591:12)",
				"    at completeValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:557:21)",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:492:16"
			]
		}
	}
}2020-02-20T12:38:21.739Z{
	"message": "Cannot return null for non-nullable field ScheduleTimetableDeleteDataReturn.id.",
	"locations": [
		{
			"line": 3,
			"column": 5
		}
	],
	"path": [
		"deleteScheduleTimetable",
		"id"
	],
	"extensions": {
		"code": "INTERNAL_SERVER_ERROR",
		"exception": {
			"stacktrace": [
				"Error: Cannot return null for non-nullable field ScheduleTimetableDeleteDataReturn.id.",
				"    at completeValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:560:13)",
				"    at completeValueCatchingError (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:495:19)",
				"    at resolveField (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:435:10)",
				"    at executeFields (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:275:18)",
				"    at collectAndExecuteSubfields (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:713:10)",
				"    at completeObjectValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:703:10)",
				"    at completeValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:591:12)",
				"    at completeValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:557:21)",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:492:16"
			]
		}
	}
}2020-02-20T13:48:41.014Z{
	"message": "Variable \"$inputData\" got invalid value \"50\" at \"inputData.isDouble\"; Expected type Int. Int cannot represent non-integer value: \"50\"",
	"locations": [
		{
			"line": 1,
			"column": 44
		}
	],
	"extensions": {
		"code": "INTERNAL_SERVER_ERROR",
		"exception": {
			"stacktrace": [
				"TypeError: Int cannot represent non-integer value: \"50\"",
				"    at GraphQLScalarType.coerceInt [as parseValue] (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\type\\scalars.js:55:11)",
				"    at coerceInputValueImpl (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\utilities\\coerceInputValue.js:127:26)",
				"    at coerceInputValueImpl (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\utilities\\coerceInputValue.js:105:35)",
				"    at coerceInputValueImpl (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\utilities\\coerceInputValue.js:54:14)",
				"    at coerceInputValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\utilities\\coerceInputValue.js:37:10)",
				"    at _loop (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\values.js:107:69)",
				"    at coerceVariableValues (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\values.js:119:16)",
				"    at getVariableValues (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\values.js:48:19)",
				"    at buildExecutionContext (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:184:61)",
				"    at executeImpl (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:89:20)",
				"    at Object.execute (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:64:35)",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\src\\requestPipeline.ts:481:30",
				"    at Generator.next (<anonymous>)",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:8:71",
				"    at new Promise (<anonymous>)",
				"    at __awaiter (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:4:12)",
				"    at execute (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:225:20)",
				"    at Object.<anonymous> (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\src\\requestPipeline.ts:364:30)",
				"    at Generator.next (<anonymous>)",
				"    at fulfilled (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:5:58)",
				"    at process._tickCallback (internal/process/next_tick.js:68:7)"
			]
		}
	}
}2020-02-20T14:28:18.241Z{
	"message": "Variable \"$inputData\" got invalid value \"54\" at \"inputData.isDouble\"; Expected type Int. Int cannot represent non-integer value: \"54\"",
	"locations": [
		{
			"line": 1,
			"column": 44
		}
	],
	"extensions": {
		"code": "INTERNAL_SERVER_ERROR",
		"exception": {
			"stacktrace": [
				"TypeError: Int cannot represent non-integer value: \"54\"",
				"    at GraphQLScalarType.coerceInt [as parseValue] (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\type\\scalars.js:55:11)",
				"    at coerceInputValueImpl (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\utilities\\coerceInputValue.js:127:26)",
				"    at coerceInputValueImpl (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\utilities\\coerceInputValue.js:105:35)",
				"    at coerceInputValueImpl (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\utilities\\coerceInputValue.js:54:14)",
				"    at coerceInputValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\utilities\\coerceInputValue.js:37:10)",
				"    at _loop (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\values.js:107:69)",
				"    at coerceVariableValues (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\values.js:119:16)",
				"    at getVariableValues (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\values.js:48:19)",
				"    at buildExecutionContext (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:184:61)",
				"    at executeImpl (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:89:20)",
				"    at Object.execute (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:64:35)",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\src\\requestPipeline.ts:481:30",
				"    at Generator.next (<anonymous>)",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:8:71",
				"    at new Promise (<anonymous>)",
				"    at __awaiter (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:4:12)",
				"    at execute (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:225:20)",
				"    at Object.<anonymous> (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\src\\requestPipeline.ts:364:30)",
				"    at Generator.next (<anonymous>)",
				"    at fulfilled (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:5:58)",
				"    at process._tickCallback (internal/process/next_tick.js:68:7)"
			]
		}
	}
}2020-02-20T14:38:53.333Z{
	"message": "Variable \"$id\" of required type \"ID!\" was not provided.",
	"locations": [
		{
			"line": 1,
			"column": 34
		}
	],
	"extensions": {
		"code": "INTERNAL_SERVER_ERROR",
		"exception": {
			"stacktrace": [
				"GraphQLError: Variable \"$id\" of required type \"ID!\" was not provided.",
				"    at _loop (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\values.js:92:17)",
				"    at coerceVariableValues (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\values.js:119:16)",
				"    at getVariableValues (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\values.js:48:19)",
				"    at buildExecutionContext (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:184:61)",
				"    at executeImpl (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:89:20)",
				"    at Object.execute (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:64:35)",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\src\\requestPipeline.ts:481:30",
				"    at Generator.next (<anonymous>)",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:8:71",
				"    at new Promise (<anonymous>)",
				"    at __awaiter (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:4:12)",
				"    at execute (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:225:20)",
				"    at Object.<anonymous> (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\src\\requestPipeline.ts:364:30)",
				"    at Generator.next (<anonymous>)",
				"    at fulfilled (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:5:58)",
				"    at process._tickCallback (internal/process/next_tick.js:68:7)"
			]
		}
	}
}2020-02-20T14:47:49.452Z{
	"message": "This lecture does not exist",
	"locations": [
		{
			"line": 2,
			"column": 3
		}
	],
	"path": [
		"updateScheduleTimetable"
	],
	"extensions": {
		"code": "INTERNAL_SERVER_ERROR",
		"exception": {
			"stacktrace": [
				"Error: This lecture does not exist",
				"    at _callee5$ (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\src\\resolvers\\mutation/education.js:46:29)",
				"    at tryCatch (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\regenerator-runtime\\runtime.js:45:40)",
				"    at Generator.invoke [as _invoke] (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\regenerator-runtime\\runtime.js:271:22)",
				"    at Generator.prototype.(anonymous function) [as next] (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\regenerator-runtime\\runtime.js:97:21)",
				"    at asyncGeneratorStep (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\src\\resolvers\\mutation\\education.js:16:103)",
				"    at _next (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\src\\resolvers\\mutation\\education.js:18:194)"
			]
		}
	}
}2020-02-20T14:49:49.348Z{
	"message": "This lecture does not exist",
	"locations": [
		{
			"line": 2,
			"column": 3
		}
	],
	"path": [
		"updateScheduleTimetable"
	],
	"extensions": {
		"code": "INTERNAL_SERVER_ERROR",
		"exception": {
			"stacktrace": [
				"Error: This lecture does not exist",
				"    at _callee5$ (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\src\\resolvers\\mutation/education.js:46:29)",
				"    at tryCatch (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\regenerator-runtime\\runtime.js:45:40)",
				"    at Generator.invoke [as _invoke] (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\regenerator-runtime\\runtime.js:271:22)",
				"    at Generator.prototype.(anonymous function) [as next] (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\regenerator-runtime\\runtime.js:97:21)",
				"    at asyncGeneratorStep (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\src\\resolvers\\mutation\\education.js:16:103)",
				"    at _next (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\src\\resolvers\\mutation\\education.js:18:194)"
			]
		}
	}
}2020-02-23T20:14:11.606Z{
	"message": "Validation error: jobTitle required,\nValidation error: jobTitle max 255 characters,\nValidation error: Description required,\nValidation error: Maximum 255 characters",
	"locations": [
		{
			"line": 2,
			"column": 3
		}
	],
	"path": [
		"createDepartmentPerson"
	],
	"extensions": {
		"code": "INTERNAL_SERVER_ERROR",
		"exception": {
			"name": "SequelizeValidationError",
			"errors": [
				{
					"message": "jobTitle required",
					"type": "Validation error",
					"path": "jobTitle",
					"value": "",
					"origin": "FUNCTION",
					"instance": {
						"id": null,
						"firstname": "Иванок",
						"middlename": "Иван",
						"lastname": "Иванович",
						"jobTitle": "",
						"description": "",
						"tel": "",
						"mail": "",
						"imageUrl": "/images/staff/710798ab-df90-4efa-8413-d4b9f9a3f67e.png",
						"position": 5,
						"updatedAt": "2020-02-23T20:14:11.589Z",
						"createdAt": "2020-02-23T20:14:11.589Z"
					},
					"validatorKey": "notEmpty",
					"validatorName": "notEmpty",
					"validatorArgs": [
						true
					],
					"original": {
						"validatorName": "notEmpty",
						"validatorArgs": [
							true
						]
					}
				},
				{
					"message": "jobTitle max 255 characters",
					"type": "Validation error",
					"path": "jobTitle",
					"value": "",
					"origin": "FUNCTION",
					"instance": {
						"id": null,
						"firstname": "Иванок",
						"middlename": "Иван",
						"lastname": "Иванович",
						"jobTitle": "",
						"description": "",
						"tel": "",
						"mail": "",
						"imageUrl": "/images/staff/710798ab-df90-4efa-8413-d4b9f9a3f67e.png",
						"position": 5,
						"updatedAt": "2020-02-23T20:14:11.589Z",
						"createdAt": "2020-02-23T20:14:11.589Z"
					},
					"validatorKey": "len",
					"validatorName": "len",
					"validatorArgs": [
						5,
						255
					],
					"original": {
						"validatorName": "len",
						"validatorArgs": [
							5,
							255
						]
					}
				},
				{
					"message": "Description required",
					"type": "Validation error",
					"path": "description",
					"value": "",
					"origin": "FUNCTION",
					"instance": {
						"id": null,
						"firstname": "Иванок",
						"middlename": "Иван",
						"lastname": "Иванович",
						"jobTitle": "",
						"description": "",
						"tel": "",
						"mail": "",
						"imageUrl": "/images/staff/710798ab-df90-4efa-8413-d4b9f9a3f67e.png",
						"position": 5,
						"updatedAt": "2020-02-23T20:14:11.589Z",
						"createdAt": "2020-02-23T20:14:11.589Z"
					},
					"validatorKey": "notEmpty",
					"validatorName": "notEmpty",
					"validatorArgs": [
						true
					],
					"original": {
						"validatorName": "notEmpty",
						"validatorArgs": [
							true
						]
					}
				},
				{
					"message": "Maximum 255 characters",
					"type": "Validation error",
					"path": "description",
					"value": "",
					"origin": "FUNCTION",
					"instance": {
						"id": null,
						"firstname": "Иванок",
						"middlename": "Иван",
						"lastname": "Иванович",
						"jobTitle": "",
						"description": "",
						"tel": "",
						"mail": "",
						"imageUrl": "/images/staff/710798ab-df90-4efa-8413-d4b9f9a3f67e.png",
						"position": 5,
						"updatedAt": "2020-02-23T20:14:11.589Z",
						"createdAt": "2020-02-23T20:14:11.589Z"
					},
					"validatorKey": "len",
					"validatorName": "len",
					"validatorArgs": [
						5,
						255
					],
					"original": {
						"validatorName": "len",
						"validatorArgs": [
							5,
							255
						]
					}
				}
			],
			"stacktrace": [
				"SequelizeValidationError: Validation error: jobTitle required,",
				"Validation error: jobTitle max 255 characters,",
				"Validation error: Description required,",
				"Validation error: Maximum 255 characters",
				"    at Promise.all.then (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\sequelize\\lib\\instance-validator.js:74:15)",
				"    at tryCatcher (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\util.js:16:23)",
				"    at Promise._settlePromiseFromHandler (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\promise.js:547:31)",
				"    at Promise._settlePromise (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\promise.js:604:18)",
				"    at Promise._settlePromise0 (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\promise.js:649:10)",
				"    at Promise._settlePromises (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\promise.js:729:18)",
				"    at Promise._fulfill (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\promise.js:673:18)",
				"    at PromiseArray._resolve (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\promise_array.js:127:19)",
				"    at PromiseArray._promiseFulfilled (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\promise_array.js:145:14)",
				"    at Promise._settlePromise (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\promise.js:609:26)",
				"    at Promise._settlePromise0 (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\promise.js:649:10)",
				"    at Promise._settlePromises (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\promise.js:729:18)",
				"    at _drainQueueStep (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\async.js:93:12)",
				"    at _drainQueue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\async.js:86:9)",
				"    at Async._drainQueues (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\async.js:102:5)",
				"    at Immediate.Async.drainQueues [as _onImmediate] (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\async.js:15:14)",
				"    at runCallback (timers.js:705:18)",
				"    at tryOnImmediate (timers.js:676:5)",
				"    at processImmediate (timers.js:658:5)",
				"    at process.topLevelDomainCallback (domain.js:120:23)"
			]
		}
	}
}2020-02-23T21:23:33.310Z{
	"message": "Variable \"$inputData\" got invalid value \"\" at \"inputData.onCampus\"; Expected type Boolean. Boolean cannot represent a non boolean value: \"\"",
	"locations": [
		{
			"line": 1,
			"column": 24
		}
	],
	"extensions": {
		"code": "INTERNAL_SERVER_ERROR",
		"exception": {
			"stacktrace": [
				"TypeError: Boolean cannot represent a non boolean value: \"\"",
				"    at GraphQLScalarType.coerceBoolean [as parseValue] (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\type\\scalars.js:195:11)",
				"    at coerceInputValueImpl (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\utilities\\coerceInputValue.js:127:26)",
				"    at coerceInputValueImpl (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\utilities\\coerceInputValue.js:54:14)",
				"    at coerceInputValueImpl (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\utilities\\coerceInputValue.js:105:35)",
				"    at coerceInputValueImpl (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\utilities\\coerceInputValue.js:54:14)",
				"    at coerceInputValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\utilities\\coerceInputValue.js:37:10)",
				"    at _loop (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\values.js:107:69)",
				"    at coerceVariableValues (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\values.js:119:16)",
				"    at getVariableValues (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\values.js:48:19)",
				"    at buildExecutionContext (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:184:61)",
				"    at executeImpl (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:89:20)",
				"    at Object.execute (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:64:35)",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\src\\requestPipeline.ts:481:30",
				"    at Generator.next (<anonymous>)",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:8:71",
				"    at new Promise (<anonymous>)",
				"    at __awaiter (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:4:12)",
				"    at execute (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:225:20)",
				"    at Object.<anonymous> (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\src\\requestPipeline.ts:364:30)",
				"    at Generator.next (<anonymous>)",
				"    at fulfilled (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:5:58)",
				"    at process._tickCallback (internal/process/next_tick.js:68:7)"
			]
		}
	}
}2020-02-23T21:26:29.726Z{
	"message": "Validation error: Location required,\nValidation error: Maximum 255 characters",
	"locations": [
		{
			"line": 2,
			"column": 3
		}
	],
	"path": [
		"createSeminar"
	],
	"extensions": {
		"code": "INTERNAL_SERVER_ERROR",
		"exception": {
			"name": "SequelizeValidationError",
			"errors": [
				{
					"message": "Location required",
					"type": "Validation error",
					"path": "location",
					"value": "",
					"origin": "FUNCTION",
					"instance": {
						"new": false,
						"id": null,
						"title": "Новый сминар",
						"description": "Описание",
						"content": "<p>Apr 27, 2019 -&nbsp;<strong>Chrome breakpoints</strong>&nbsp;don't&nbsp;<strong>work</strong>&nbsp;when using create-<strong>react</strong>-app. Currently there's a bug in recent versions of create-<strong>react</strong>-app where debug&nbsp;<strong>breakpoints</strong>&nbsp;aren't&nbsp;<strong>working</strong>&nbsp;in&nbsp;<strong>Chrome</strong>. In the meantime, you can get&nbsp;<strong>breakpoints working</strong>&nbsp;again via adding a --no-cache flag to your start script.</p>",
						"date": "2020-02-21T07:15:00.000Z",
						"speaker": "Иванов Иван Иванович",
						"location": "",
						"onCampus": true,
						"updatedAt": "2020-02-23T21:26:29.686Z",
						"createdAt": "2020-02-23T21:26:29.686Z"
					},
					"validatorKey": "notEmpty",
					"validatorName": "notEmpty",
					"validatorArgs": [
						true
					],
					"original": {
						"validatorName": "notEmpty",
						"validatorArgs": [
							true
						]
					}
				},
				{
					"message": "Maximum 255 characters",
					"type": "Validation error",
					"path": "location",
					"value": "",
					"origin": "FUNCTION",
					"instance": {
						"new": false,
						"id": null,
						"title": "Новый сминар",
						"description": "Описание",
						"content": "<p>Apr 27, 2019 -&nbsp;<strong>Chrome breakpoints</strong>&nbsp;don't&nbsp;<strong>work</strong>&nbsp;when using create-<strong>react</strong>-app. Currently there's a bug in recent versions of create-<strong>react</strong>-app where debug&nbsp;<strong>breakpoints</strong>&nbsp;aren't&nbsp;<strong>working</strong>&nbsp;in&nbsp;<strong>Chrome</strong>. In the meantime, you can get&nbsp;<strong>breakpoints working</strong>&nbsp;again via adding a --no-cache flag to your start script.</p>",
						"date": "2020-02-21T07:15:00.000Z",
						"speaker": "Иванов Иван Иванович",
						"location": "",
						"onCampus": true,
						"updatedAt": "2020-02-23T21:26:29.686Z",
						"createdAt": "2020-02-23T21:26:29.686Z"
					},
					"validatorKey": "len",
					"validatorName": "len",
					"validatorArgs": [
						1,
						255
					],
					"original": {
						"validatorName": "len",
						"validatorArgs": [
							1,
							255
						]
					}
				}
			],
			"stacktrace": [
				"SequelizeValidationError: Validation error: Location required,",
				"Validation error: Maximum 255 characters",
				"    at Promise.all.then (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\sequelize\\lib\\instance-validator.js:74:15)",
				"    at tryCatcher (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\util.js:16:23)",
				"    at Promise._settlePromiseFromHandler (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\promise.js:547:31)",
				"    at Promise._settlePromise (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\promise.js:604:18)",
				"    at Promise._settlePromise0 (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\promise.js:649:10)",
				"    at Promise._settlePromises (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\promise.js:729:18)",
				"    at Promise._fulfill (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\promise.js:673:18)",
				"    at PromiseArray._resolve (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\promise_array.js:127:19)",
				"    at PromiseArray._promiseFulfilled (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\promise_array.js:145:14)",
				"    at Promise._settlePromise (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\promise.js:609:26)",
				"    at Promise._settlePromise0 (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\promise.js:649:10)",
				"    at Promise._settlePromises (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\promise.js:729:18)",
				"    at _drainQueueStep (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\async.js:93:12)",
				"    at _drainQueue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\async.js:86:9)",
				"    at Async._drainQueues (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\async.js:102:5)",
				"    at Immediate.Async.drainQueues [as _onImmediate] (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\async.js:15:14)",
				"    at runCallback (timers.js:705:18)",
				"    at tryOnImmediate (timers.js:676:5)",
				"    at processImmediate (timers.js:658:5)",
				"    at process.topLevelDomainCallback (domain.js:120:23)"
			]
		}
	}
}2020-02-23T21:32:07.248Z{
	"message": "Validation error: Location required,\nValidation error: Maximum 255 characters",
	"locations": [
		{
			"line": 2,
			"column": 3
		}
	],
	"path": [
		"createSeminar"
	],
	"extensions": {
		"code": "INTERNAL_SERVER_ERROR",
		"exception": {
			"name": "SequelizeValidationError",
			"errors": [
				{
					"message": "Location required",
					"type": "Validation error",
					"path": "location",
					"value": "",
					"origin": "FUNCTION",
					"instance": {
						"new": false,
						"id": null,
						"title": "Новый семинар",
						"description": "Описание",
						"content": "<p><strong>Dialect</strong>-Specific Things. MySQL. The underlying connector library used by&nbsp;<strong>Sequelize</strong>&nbsp;for MySQL is the mysql2 npm package (version 1.5. MariaDB. The underlying connector library used by&nbsp;<strong>Sequelize</strong>&nbsp;for MariaDB is the mariadb npm package. SQLite. PostgreSQL. MSSQL.</p>",
						"date": "2020-02-21T07:12:00.000Z",
						"speaker": "Иванов Иван Иванович",
						"location": "",
						"onCampus": false,
						"updatedAt": "2020-02-23T21:32:07.242Z",
						"createdAt": "2020-02-23T21:32:07.242Z"
					},
					"validatorKey": "notEmpty",
					"validatorName": "notEmpty",
					"validatorArgs": [
						true
					],
					"original": {
						"validatorName": "notEmpty",
						"validatorArgs": [
							true
						]
					}
				},
				{
					"message": "Maximum 255 characters",
					"type": "Validation error",
					"path": "location",
					"value": "",
					"origin": "FUNCTION",
					"instance": {
						"new": false,
						"id": null,
						"title": "Новый семинар",
						"description": "Описание",
						"content": "<p><strong>Dialect</strong>-Specific Things. MySQL. The underlying connector library used by&nbsp;<strong>Sequelize</strong>&nbsp;for MySQL is the mysql2 npm package (version 1.5. MariaDB. The underlying connector library used by&nbsp;<strong>Sequelize</strong>&nbsp;for MariaDB is the mariadb npm package. SQLite. PostgreSQL. MSSQL.</p>",
						"date": "2020-02-21T07:12:00.000Z",
						"speaker": "Иванов Иван Иванович",
						"location": "",
						"onCampus": false,
						"updatedAt": "2020-02-23T21:32:07.242Z",
						"createdAt": "2020-02-23T21:32:07.242Z"
					},
					"validatorKey": "len",
					"validatorName": "len",
					"validatorArgs": [
						1,
						255
					],
					"original": {
						"validatorName": "len",
						"validatorArgs": [
							1,
							255
						]
					}
				}
			],
			"stacktrace": [
				"SequelizeValidationError: Validation error: Location required,",
				"Validation error: Maximum 255 characters",
				"    at Promise.all.then (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\sequelize\\lib\\instance-validator.js:74:15)",
				"    at tryCatcher (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\util.js:16:23)",
				"    at Promise._settlePromiseFromHandler (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\promise.js:547:31)",
				"    at Promise._settlePromise (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\promise.js:604:18)",
				"    at Promise._settlePromise0 (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\promise.js:649:10)",
				"    at Promise._settlePromises (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\promise.js:729:18)",
				"    at Promise._fulfill (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\promise.js:673:18)",
				"    at PromiseArray._resolve (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\promise_array.js:127:19)",
				"    at PromiseArray._promiseFulfilled (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\promise_array.js:145:14)",
				"    at Promise._settlePromise (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\promise.js:609:26)",
				"    at Promise._settlePromise0 (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\promise.js:649:10)",
				"    at Promise._settlePromises (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\promise.js:729:18)",
				"    at _drainQueueStep (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\async.js:93:12)",
				"    at _drainQueue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\async.js:86:9)",
				"    at Async._drainQueues (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\async.js:102:5)",
				"    at Immediate.Async.drainQueues [as _onImmediate] (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\async.js:15:14)",
				"    at runCallback (timers.js:705:18)",
				"    at tryOnImmediate (timers.js:676:5)",
				"    at processImmediate (timers.js:658:5)",
				"    at process.topLevelDomainCallback (domain.js:120:23)"
			]
		}
	}
}2020-03-06T18:53:28.512Z{
	"message": "Validation error: Middlename 100 characters",
	"locations": [
		{
			"line": 2,
			"column": 3
		}
	],
	"path": [
		"createSciencePerson"
	],
	"extensions": {
		"code": "INTERNAL_SERVER_ERROR",
		"exception": {
			"name": "SequelizeValidationError",
			"errors": [
				{
					"message": "Middlename 100 characters",
					"type": "Validation error",
					"path": "middlename",
					"value": "",
					"origin": "FUNCTION",
					"instance": {
						"id": null,
						"firstname": "Галина",
						"middlename": "",
						"lastname": "Райкина",
						"description": "научный сотрудник",
						"tel": "",
						"mail": "",
						"urlIstina": "http://istina.msu.ru/profile/RiznichenkoGalina/",
						"urlRints": "",
						"urlOrcid": "",
						"urlResearcher": "",
						"urlScopus": "",
						"type": "STAFF",
						"scienceGroupId": "4",
						"position": 4,
						"updatedAt": "2020-03-06T18:53:28.499Z",
						"createdAt": "2020-03-06T18:53:28.499Z"
					},
					"validatorKey": "len",
					"validatorName": "len",
					"validatorArgs": [
						2,
						100
					],
					"original": {
						"validatorName": "len",
						"validatorArgs": [
							2,
							100
						]
					}
				}
			],
			"stacktrace": [
				"SequelizeValidationError: Validation error: Middlename 100 characters",
				"    at Promise.all.then (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\sequelize\\lib\\instance-validator.js:74:15)",
				"    at tryCatcher (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\util.js:16:23)",
				"    at Promise._settlePromiseFromHandler (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\promise.js:547:31)",
				"    at Promise._settlePromise (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\promise.js:604:18)",
				"    at Promise._settlePromise0 (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\promise.js:649:10)",
				"    at Promise._settlePromises (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\promise.js:729:18)",
				"    at Promise._fulfill (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\promise.js:673:18)",
				"    at PromiseArray._resolve (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\promise_array.js:127:19)",
				"    at PromiseArray._promiseFulfilled (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\promise_array.js:145:14)",
				"    at Promise._settlePromise (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\promise.js:609:26)",
				"    at Promise._settlePromise0 (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\promise.js:649:10)",
				"    at Promise._settlePromises (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\promise.js:729:18)",
				"    at _drainQueueStep (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\async.js:93:12)",
				"    at _drainQueue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\async.js:86:9)",
				"    at Async._drainQueues (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\async.js:102:5)",
				"    at Immediate.Async.drainQueues [as _onImmediate] (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\async.js:15:14)",
				"    at runCallback (timers.js:705:18)",
				"    at tryOnImmediate (timers.js:676:5)",
				"    at processImmediate (timers.js:658:5)",
				"    at process.topLevelDomainCallback (domain.js:120:23)"
			]
		}
	}
}2020-03-06T19:01:23.026Z2020-03-06T19:01:23.027Z2020-03-06T19:01:23.028Z2020-03-06T19:01:23.028Z2020-03-06T19:01:23.028Z2020-03-06T19:01:23.028Z{
	"message": "Variable \"$inputData\" got invalid value { author: \"А может еще и так\", title: \"А может\", journal: \"Чебурашка\" }; Field firstname of required type String! was not provided.",
	"locations": [
		{
			"line": 1,
			"column": 52
		}
	],
	"extensions": {
		"code": "INTERNAL_SERVER_ERROR",
		"exception": {
			"stacktrace": [
				"GraphQLError: Variable \"$inputData\" got invalid value { author: \"А может еще и так\", title: \"А может\", journal: \"Чебурашка\" }; Field firstname of required type String! was not provided.",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\values.js:114:15",
				"    at coerceInputValueImpl (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\utilities\\coerceInputValue.js:99:11)",
				"    at coerceInputValueImpl (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\utilities\\coerceInputValue.js:54:14)",
				"    at coerceInputValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\utilities\\coerceInputValue.js:37:10)",
				"    at _loop (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\values.js:107:69)",
				"    at coerceVariableValues (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\values.js:119:16)",
				"    at getVariableValues (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\values.js:48:19)",
				"    at buildExecutionContext (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:184:61)",
				"    at executeImpl (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:89:20)",
				"    at Object.execute (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:64:35)",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\src\\requestPipeline.ts:481:30",
				"    at Generator.next (<anonymous>)",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:8:71",
				"    at new Promise (<anonymous>)",
				"    at __awaiter (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:4:12)",
				"    at execute (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:225:20)",
				"    at Object.<anonymous> (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\src\\requestPipeline.ts:364:30)",
				"    at Generator.next (<anonymous>)",
				"    at fulfilled (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:5:58)",
				"    at process._tickCallback (internal/process/next_tick.js:68:7)"
			]
		}
	}
}{
	"message": "Variable \"$inputData\" got invalid value { author: \"А может еще и так\", title: \"А может\", journal: \"Чебурашка\" }; Field lastname of required type String! was not provided.",
	"locations": [
		{
			"line": 1,
			"column": 52
		}
	],
	"extensions": {
		"code": "INTERNAL_SERVER_ERROR",
		"exception": {
			"stacktrace": [
				"GraphQLError: Variable \"$inputData\" got invalid value { author: \"А может еще и так\", title: \"А может\", journal: \"Чебурашка\" }; Field lastname of required type String! was not provided.",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\values.js:114:15",
				"    at coerceInputValueImpl (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\utilities\\coerceInputValue.js:99:11)",
				"    at coerceInputValueImpl (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\utilities\\coerceInputValue.js:54:14)",
				"    at coerceInputValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\utilities\\coerceInputValue.js:37:10)",
				"    at _loop (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\values.js:107:69)",
				"    at coerceVariableValues (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\values.js:119:16)",
				"    at getVariableValues (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\values.js:48:19)",
				"    at buildExecutionContext (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:184:61)",
				"    at executeImpl (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:89:20)",
				"    at Object.execute (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:64:35)",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\src\\requestPipeline.ts:481:30",
				"    at Generator.next (<anonymous>)",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:8:71",
				"    at new Promise (<anonymous>)",
				"    at __awaiter (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:4:12)",
				"    at execute (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:225:20)",
				"    at Object.<anonymous> (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\src\\requestPipeline.ts:364:30)",
				"    at Generator.next (<anonymous>)",
				"    at fulfilled (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:5:58)",
				"    at process._tickCallback (internal/process/next_tick.js:68:7)"
			]
		}
	}
}{
	"message": "Variable \"$inputData\" got invalid value { author: \"А может еще и так\", title: \"А может\", journal: \"Чебурашка\" }; Field type of required type SciencePeopleType! was not provided.",
	"locations": [
		{
			"line": 1,
			"column": 52
		}
	],
	"extensions": {
		"code": "INTERNAL_SERVER_ERROR",
		"exception": {
			"stacktrace": [
				"GraphQLError: Variable \"$inputData\" got invalid value { author: \"А может еще и так\", title: \"А может\", journal: \"Чебурашка\" }; Field type of required type SciencePeopleType! was not provided.",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\values.js:114:15",
				"    at coerceInputValueImpl (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\utilities\\coerceInputValue.js:99:11)",
				"    at coerceInputValueImpl (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\utilities\\coerceInputValue.js:54:14)",
				"    at coerceInputValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\utilities\\coerceInputValue.js:37:10)",
				"    at _loop (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\values.js:107:69)",
				"    at coerceVariableValues (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\values.js:119:16)",
				"    at getVariableValues (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\values.js:48:19)",
				"    at buildExecutionContext (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:184:61)",
				"    at executeImpl (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:89:20)",
				"    at Object.execute (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:64:35)",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\src\\requestPipeline.ts:481:30",
				"    at Generator.next (<anonymous>)",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:8:71",
				"    at new Promise (<anonymous>)",
				"    at __awaiter (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:4:12)",
				"    at execute (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:225:20)",
				"    at Object.<anonymous> (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\src\\requestPipeline.ts:364:30)",
				"    at Generator.next (<anonymous>)",
				"    at fulfilled (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:5:58)",
				"    at process._tickCallback (internal/process/next_tick.js:68:7)"
			]
		}
	}
}{
	"message": "Variable \"$inputData\" got invalid value { author: \"А может еще и так\", title: \"А может\", journal: \"Чебурашка\" }; Field \"journal\" is not defined by type SciencePeopleCreateData.",
	"locations": [
		{
			"line": 1,
			"column": 52
		}
	],
	"extensions": {
		"code": "INTERNAL_SERVER_ERROR",
		"exception": {
			"stacktrace": [
				"GraphQLError: Variable \"$inputData\" got invalid value { author: \"А может еще и так\", title: \"А может\", journal: \"Чебурашка\" }; Field \"journal\" is not defined by type SciencePeopleCreateData.",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\values.js:114:15",
				"    at coerceInputValueImpl (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\utilities\\coerceInputValue.js:114:9)",
				"    at coerceInputValueImpl (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\utilities\\coerceInputValue.js:54:14)",
				"    at coerceInputValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\utilities\\coerceInputValue.js:37:10)",
				"    at _loop (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\values.js:107:69)",
				"    at coerceVariableValues (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\values.js:119:16)",
				"    at getVariableValues (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\values.js:48:19)",
				"    at buildExecutionContext (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:184:61)",
				"    at executeImpl (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:89:20)",
				"    at Object.execute (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:64:35)",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\src\\requestPipeline.ts:481:30",
				"    at Generator.next (<anonymous>)",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:8:71",
				"    at new Promise (<anonymous>)",
				"    at __awaiter (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:4:12)",
				"    at execute (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:225:20)",
				"    at Object.<anonymous> (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\src\\requestPipeline.ts:364:30)",
				"    at Generator.next (<anonymous>)",
				"    at fulfilled (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:5:58)",
				"    at process._tickCallback (internal/process/next_tick.js:68:7)"
			]
		}
	}
}{
	"message": "Variable \"$inputData\" got invalid value { author: \"А может еще и так\", title: \"А может\", journal: \"Чебурашка\" }; Field \"author\" is not defined by type SciencePeopleCreateData.",
	"locations": [
		{
			"line": 1,
			"column": 52
		}
	],
	"extensions": {
		"code": "INTERNAL_SERVER_ERROR",
		"exception": {
			"stacktrace": [
				"GraphQLError: Variable \"$inputData\" got invalid value { author: \"А может еще и так\", title: \"А может\", journal: \"Чебурашка\" }; Field \"author\" is not defined by type SciencePeopleCreateData.",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\values.js:114:15",
				"    at coerceInputValueImpl (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\utilities\\coerceInputValue.js:114:9)",
				"    at coerceInputValueImpl (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\utilities\\coerceInputValue.js:54:14)",
				"    at coerceInputValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\utilities\\coerceInputValue.js:37:10)",
				"    at _loop (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\values.js:107:69)",
				"    at coerceVariableValues (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\values.js:119:16)",
				"    at getVariableValues (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\values.js:48:19)",
				"    at buildExecutionContext (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:184:61)",
				"    at executeImpl (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:89:20)",
				"    at Object.execute (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:64:35)",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\src\\requestPipeline.ts:481:30",
				"    at Generator.next (<anonymous>)",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:8:71",
				"    at new Promise (<anonymous>)",
				"    at __awaiter (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:4:12)",
				"    at execute (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:225:20)",
				"    at Object.<anonymous> (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\src\\requestPipeline.ts:364:30)",
				"    at Generator.next (<anonymous>)",
				"    at fulfilled (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:5:58)",
				"    at process._tickCallback (internal/process/next_tick.js:68:7)"
			]
		}
	}
}{
	"message": "Variable \"$inputData\" got invalid value { author: \"А может еще и так\", title: \"А может\", journal: \"Чебурашка\" }; Field \"title\" is not defined by type SciencePeopleCreateData.",
	"locations": [
		{
			"line": 1,
			"column": 52
		}
	],
	"extensions": {
		"code": "INTERNAL_SERVER_ERROR",
		"exception": {
			"stacktrace": [
				"GraphQLError: Variable \"$inputData\" got invalid value { author: \"А может еще и так\", title: \"А может\", journal: \"Чебурашка\" }; Field \"title\" is not defined by type SciencePeopleCreateData.",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\values.js:114:15",
				"    at coerceInputValueImpl (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\utilities\\coerceInputValue.js:114:9)",
				"    at coerceInputValueImpl (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\utilities\\coerceInputValue.js:54:14)",
				"    at coerceInputValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\utilities\\coerceInputValue.js:37:10)",
				"    at _loop (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\values.js:107:69)",
				"    at coerceVariableValues (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\values.js:119:16)",
				"    at getVariableValues (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\values.js:48:19)",
				"    at buildExecutionContext (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:184:61)",
				"    at executeImpl (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:89:20)",
				"    at Object.execute (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:64:35)",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\src\\requestPipeline.ts:481:30",
				"    at Generator.next (<anonymous>)",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:8:71",
				"    at new Promise (<anonymous>)",
				"    at __awaiter (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:4:12)",
				"    at execute (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:225:20)",
				"    at Object.<anonymous> (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\src\\requestPipeline.ts:364:30)",
				"    at Generator.next (<anonymous>)",
				"    at fulfilled (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:5:58)",
				"    at process._tickCallback (internal/process/next_tick.js:68:7)"
			]
		}
	}
}2020-03-06T19:38:27.506Z{
	"message": "Validation error: Location required,\nValidation error: Maximum 255 characters",
	"locations": [
		{
			"line": 2,
			"column": 3
		}
	],
	"path": [
		"createConference"
	],
	"extensions": {
		"code": "INTERNAL_SERVER_ERROR",
		"exception": {
			"name": "SequelizeValidationError",
			"errors": [
				{
					"message": "Location required",
					"type": "Validation error",
					"path": "location",
					"value": "",
					"origin": "FUNCTION",
					"instance": {
						"id": null,
						"title": "Конференция в Гааге",
						"description": "Конференция",
						"content": "<p>КонференцияКонференцияКонференцияКонференцияКонференция</p><p>КонференцияКонференцияКонференцияКонференцияКонференция</p><p>КонференцияКонференцияКонференцияКонференцияКонференцияКонференция</p><p>КонференцияКонференцияКонференцияКонференцияКонференцияКонференция</p><p>КонференцияКонференцияКонференцияКонференцияКонференция</p>",
						"dateFrom": "2020-03-30T00:00:00.000Z",
						"dateTo": "2020-03-31T00:00:00.000Z",
						"location": "",
						"imageUrl": "/images/conference/2ba18f38-f4a6-40ab-bbdc-b32bddf64764.jpg",
						"updatedAt": "2020-03-06T19:38:27.481Z",
						"createdAt": "2020-03-06T19:38:27.481Z"
					},
					"validatorKey": "notEmpty",
					"validatorName": "notEmpty",
					"validatorArgs": [
						true
					],
					"original": {
						"validatorName": "notEmpty",
						"validatorArgs": [
							true
						]
					}
				},
				{
					"message": "Maximum 255 characters",
					"type": "Validation error",
					"path": "location",
					"value": "",
					"origin": "FUNCTION",
					"instance": {
						"id": null,
						"title": "Конференция в Гааге",
						"description": "Конференция",
						"content": "<p>КонференцияКонференцияКонференцияКонференцияКонференция</p><p>КонференцияКонференцияКонференцияКонференцияКонференция</p><p>КонференцияКонференцияКонференцияКонференцияКонференцияКонференция</p><p>КонференцияКонференцияКонференцияКонференцияКонференцияКонференция</p><p>КонференцияКонференцияКонференцияКонференцияКонференция</p>",
						"dateFrom": "2020-03-30T00:00:00.000Z",
						"dateTo": "2020-03-31T00:00:00.000Z",
						"location": "",
						"imageUrl": "/images/conference/2ba18f38-f4a6-40ab-bbdc-b32bddf64764.jpg",
						"updatedAt": "2020-03-06T19:38:27.481Z",
						"createdAt": "2020-03-06T19:38:27.481Z"
					},
					"validatorKey": "len",
					"validatorName": "len",
					"validatorArgs": [
						1,
						255
					],
					"original": {
						"validatorName": "len",
						"validatorArgs": [
							1,
							255
						]
					}
				}
			],
			"stacktrace": [
				"SequelizeValidationError: Validation error: Location required,",
				"Validation error: Maximum 255 characters",
				"    at Promise.all.then (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\sequelize\\lib\\instance-validator.js:74:15)",
				"    at tryCatcher (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\util.js:16:23)",
				"    at Promise._settlePromiseFromHandler (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\promise.js:547:31)",
				"    at Promise._settlePromise (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\promise.js:604:18)",
				"    at Promise._settlePromise0 (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\promise.js:649:10)",
				"    at Promise._settlePromises (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\promise.js:729:18)",
				"    at Promise._fulfill (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\promise.js:673:18)",
				"    at PromiseArray._resolve (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\promise_array.js:127:19)",
				"    at PromiseArray._promiseFulfilled (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\promise_array.js:145:14)",
				"    at Promise._settlePromise (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\promise.js:609:26)",
				"    at Promise._settlePromise0 (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\promise.js:649:10)",
				"    at Promise._settlePromises (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\promise.js:729:18)",
				"    at _drainQueueStep (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\async.js:93:12)",
				"    at _drainQueue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\async.js:86:9)",
				"    at Async._drainQueues (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\async.js:102:5)",
				"    at Immediate.Async.drainQueues [as _onImmediate] (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\async.js:15:14)",
				"    at runCallback (timers.js:705:18)",
				"    at tryOnImmediate (timers.js:676:5)",
				"    at processImmediate (timers.js:658:5)",
				"    at process.topLevelDomainCallback (domain.js:120:23)"
			]
		}
	}
}2020-03-09T12:12:07.097Z{
	"message": "Cannot return null for non-nullable field ScheduleTimetable.id.",
	"locations": [
		{
			"line": 4,
			"column": 7
		}
	],
	"path": [
		"createScheduleTimetable",
		"timetable",
		"id"
	],
	"extensions": {
		"code": "INTERNAL_SERVER_ERROR",
		"exception": {
			"stacktrace": [
				"Error: Cannot return null for non-nullable field ScheduleTimetable.id.",
				"    at completeValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:560:13)",
				"    at completeValueCatchingError (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:495:19)",
				"    at resolveField (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:435:10)",
				"    at executeFields (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:275:18)",
				"    at collectAndExecuteSubfields (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:713:10)",
				"    at completeObjectValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:703:10)",
				"    at completeValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:591:12)",
				"    at completeValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:557:21)",
				"    at completeValueCatchingError (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:495:19)",
				"    at resolveField (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:435:10)",
				"    at executeFields (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:275:18)",
				"    at collectAndExecuteSubfields (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:713:10)",
				"    at completeObjectValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:703:10)",
				"    at completeValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:591:12)",
				"    at completeValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:557:21)",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:492:16"
			]
		}
	}
}2020-03-11T09:29:24.367Z{
	"message": "Unknown type \"EdicationCourseUpdateData\". Did you mean \"EducationCourseUpdateData\", \"EducationCourseCreateData\", \"EducationResourseUpdateURLData\", \"EducationResourseUpdatePDFData\", or \"EducationResourseCreateURLData\"?",
	"locations": [
		{
			"line": 1,
			"column": 54
		}
	],
	"extensions": {
		"code": "GRAPHQL_VALIDATION_FAILED",
		"exception": {
			"stacktrace": [
				"GraphQLError: Unknown type \"EdicationCourseUpdateData\". Did you mean \"EducationCourseUpdateData\", \"EducationCourseCreateData\", \"EducationResourseUpdateURLData\", \"EducationResourseUpdatePDFData\", or \"EducationResourseCreateURLData\"?",
				"    at Object.NamedType (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\validation\\rules\\KnownTypeNames.js:61:29)",
				"    at Object.enter (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\language\\visitor.js:324:29)",
				"    at Object.enter (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\language\\visitor.js:375:25)",
				"    at visit (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\language\\visitor.js:242:26)",
				"    at Object.validate (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\validation\\validate.js:73:24)",
				"    at validate (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\src\\requestPipeline.ts:443:22)",
				"    at Object.<anonymous> (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\src\\requestPipeline.ts:252:32)",
				"    at Generator.next (<anonymous>)",
				"    at fulfilled (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:5:58)",
				"    at process._tickCallback (internal/process/next_tick.js:68:7)"
			]
		}
	}
}2020-03-11T12:18:11.628Z2020-03-11T12:18:11.629Z2020-03-11T12:18:11.631Z{
	"message": "Variable \"$inputData\" got invalid value { title: \"Учебник\", educationFormId: \"1\", file: {} }; Field type of required type FILETYPE! was not provided.",
	"locations": [
		{
			"line": 1,
			"column": 53
		}
	],
	"extensions": {
		"code": "INTERNAL_SERVER_ERROR",
		"exception": {
			"stacktrace": [
				"GraphQLError: Variable \"$inputData\" got invalid value { title: \"Учебник\", educationFormId: \"1\", file: {} }; Field type of required type FILETYPE! was not provided.",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\values.js:114:15",
				"    at coerceInputValueImpl (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\utilities\\coerceInputValue.js:99:11)",
				"    at coerceInputValueImpl (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\utilities\\coerceInputValue.js:54:14)",
				"    at coerceInputValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\utilities\\coerceInputValue.js:37:10)",
				"    at _loop (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\values.js:107:69)",
				"    at coerceVariableValues (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\values.js:119:16)",
				"    at getVariableValues (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\values.js:48:19)",
				"    at buildExecutionContext (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:184:61)",
				"    at executeImpl (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:89:20)",
				"    at Object.execute (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:64:35)",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\src\\requestPipeline.ts:481:30",
				"    at Generator.next (<anonymous>)",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:8:71",
				"    at new Promise (<anonymous>)",
				"    at __awaiter (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:4:12)",
				"    at execute (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:225:20)",
				"    at Object.<anonymous> (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\src\\requestPipeline.ts:364:30)",
				"    at Generator.next (<anonymous>)",
				"    at fulfilled (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:5:58)",
				"    at process._tickCallback (internal/process/next_tick.js:68:7)"
			]
		}
	}
}{
	"message": "Variable \"$inputData\" got invalid value { title: \"Учебник\", educationFormId: \"1\", file: {} }; Field form of required type ID! was not provided.",
	"locations": [
		{
			"line": 1,
			"column": 53
		}
	],
	"extensions": {
		"code": "INTERNAL_SERVER_ERROR",
		"exception": {
			"stacktrace": [
				"GraphQLError: Variable \"$inputData\" got invalid value { title: \"Учебник\", educationFormId: \"1\", file: {} }; Field form of required type ID! was not provided.",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\values.js:114:15",
				"    at coerceInputValueImpl (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\utilities\\coerceInputValue.js:99:11)",
				"    at coerceInputValueImpl (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\utilities\\coerceInputValue.js:54:14)",
				"    at coerceInputValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\utilities\\coerceInputValue.js:37:10)",
				"    at _loop (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\values.js:107:69)",
				"    at coerceVariableValues (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\values.js:119:16)",
				"    at getVariableValues (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\values.js:48:19)",
				"    at buildExecutionContext (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:184:61)",
				"    at executeImpl (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:89:20)",
				"    at Object.execute (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:64:35)",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\src\\requestPipeline.ts:481:30",
				"    at Generator.next (<anonymous>)",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:8:71",
				"    at new Promise (<anonymous>)",
				"    at __awaiter (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:4:12)",
				"    at execute (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:225:20)",
				"    at Object.<anonymous> (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\src\\requestPipeline.ts:364:30)",
				"    at Generator.next (<anonymous>)",
				"    at fulfilled (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:5:58)",
				"    at process._tickCallback (internal/process/next_tick.js:68:7)"
			]
		}
	}
}{
	"message": "Variable \"$inputData\" got invalid value { title: \"Учебник\", educationFormId: \"1\", file: {} }; Field \"educationFormId\" is not defined by type EducationResourseCreatePDFData.",
	"locations": [
		{
			"line": 1,
			"column": 53
		}
	],
	"extensions": {
		"code": "INTERNAL_SERVER_ERROR",
		"exception": {
			"stacktrace": [
				"GraphQLError: Variable \"$inputData\" got invalid value { title: \"Учебник\", educationFormId: \"1\", file: {} }; Field \"educationFormId\" is not defined by type EducationResourseCreatePDFData.",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\values.js:114:15",
				"    at coerceInputValueImpl (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\utilities\\coerceInputValue.js:114:9)",
				"    at coerceInputValueImpl (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\utilities\\coerceInputValue.js:54:14)",
				"    at coerceInputValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\utilities\\coerceInputValue.js:37:10)",
				"    at _loop (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\values.js:107:69)",
				"    at coerceVariableValues (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\values.js:119:16)",
				"    at getVariableValues (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\values.js:48:19)",
				"    at buildExecutionContext (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:184:61)",
				"    at executeImpl (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:89:20)",
				"    at Object.execute (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:64:35)",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\src\\requestPipeline.ts:481:30",
				"    at Generator.next (<anonymous>)",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:8:71",
				"    at new Promise (<anonymous>)",
				"    at __awaiter (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:4:12)",
				"    at execute (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:225:20)",
				"    at Object.<anonymous> (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\src\\requestPipeline.ts:364:30)",
				"    at Generator.next (<anonymous>)",
				"    at fulfilled (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:5:58)",
				"    at process._tickCallback (internal/process/next_tick.js:68:7)"
			]
		}
	}
}2020-03-11T12:46:06.500Z{
	"message": "Cannot return null for non-nullable field EducationResourse.type.",
	"locations": [
		{
			"line": 8,
			"column": 5
		}
	],
	"path": [
		"createEducationResoursePDF",
		"type"
	],
	"extensions": {
		"code": "INTERNAL_SERVER_ERROR",
		"exception": {
			"stacktrace": [
				"Error: Cannot return null for non-nullable field EducationResourse.type.",
				"    at completeValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:560:13)",
				"    at completeValueCatchingError (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:495:19)",
				"    at resolveField (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:435:10)",
				"    at executeFields (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:275:18)",
				"    at collectAndExecuteSubfields (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:713:10)",
				"    at completeObjectValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:703:10)",
				"    at completeValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:591:12)",
				"    at completeValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:557:21)",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:492:16"
			]
		}
	}
}2020-03-11T13:12:39.559Z{
	"message": "Forbidden file type ",
	"locations": [
		{
			"line": 2,
			"column": 3
		}
	],
	"path": [
		"createEducationResoursePDF"
	],
	"extensions": {
		"code": "INTERNAL_SERVER_ERROR",
		"exception": {
			"code": 415,
			"stacktrace": [
				"Error: Forbidden file type ",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\src\\utils/readStreamIntoFile.js:19:23",
				"    at new Promise (<anonymous>)",
				"    at _default (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\src\\utils/readStreamIntoFile.js:6:10)",
				"    at _callee13$ (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\src\\resolvers\\mutation/education.js:156:48)",
				"    at tryCatch (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\regenerator-runtime\\runtime.js:45:40)",
				"    at Generator.invoke [as _invoke] (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\regenerator-runtime\\runtime.js:271:22)",
				"    at Generator.prototype.(anonymous function) [as next] (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\regenerator-runtime\\runtime.js:97:21)",
				"    at asyncGeneratorStep (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\src\\resolvers\\mutation\\education.js:32:103)",
				"    at _next (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\src\\resolvers\\mutation\\education.js:34:194)"
			]
		}
	}
}2020-03-11T13:42:33.681Z2020-03-11T13:42:33.682Z{
	"message": "Variable \"$inputData\" got invalid value { title: \"Лекция №1\", educationFormId: \"4\", fileLink: \"https://www.youtube.com/watch?v=k91dMnaFkNc\" }; Field file of required type String! was not provided.",
	"locations": [
		{
			"line": 1,
			"column": 53
		}
	],
	"extensions": {
		"code": "INTERNAL_SERVER_ERROR",
		"exception": {
			"stacktrace": [
				"GraphQLError: Variable \"$inputData\" got invalid value { title: \"Лекция №1\", educationFormId: \"4\", fileLink: \"https://www.youtube.com/watch?v=k91dMnaFkNc\" }; Field file of required type String! was not provided.",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\values.js:114:15",
				"    at coerceInputValueImpl (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\utilities\\coerceInputValue.js:99:11)",
				"    at coerceInputValueImpl (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\utilities\\coerceInputValue.js:54:14)",
				"    at coerceInputValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\utilities\\coerceInputValue.js:37:10)",
				"    at _loop (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\values.js:107:69)",
				"    at coerceVariableValues (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\values.js:119:16)",
				"    at getVariableValues (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\values.js:48:19)",
				"    at buildExecutionContext (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:184:61)",
				"    at executeImpl (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:89:20)",
				"    at Object.execute (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:64:35)",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\src\\requestPipeline.ts:481:30",
				"    at Generator.next (<anonymous>)",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:8:71",
				"    at new Promise (<anonymous>)",
				"    at __awaiter (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:4:12)",
				"    at execute (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:225:20)",
				"    at Object.<anonymous> (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\src\\requestPipeline.ts:364:30)",
				"    at Generator.next (<anonymous>)",
				"    at fulfilled (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:5:58)",
				"    at process._tickCallback (internal/process/next_tick.js:68:7)"
			]
		}
	}
}{
	"message": "Variable \"$inputData\" got invalid value { title: \"Лекция №1\", educationFormId: \"4\", fileLink: \"https://www.youtube.com/watch?v=k91dMnaFkNc\" }; Field \"fileLink\" is not defined by type EducationResourseCreateURLData. Did you mean file?",
	"locations": [
		{
			"line": 1,
			"column": 53
		}
	],
	"extensions": {
		"code": "INTERNAL_SERVER_ERROR",
		"exception": {
			"stacktrace": [
				"GraphQLError: Variable \"$inputData\" got invalid value { title: \"Лекция №1\", educationFormId: \"4\", fileLink: \"https://www.youtube.com/watch?v=k91dMnaFkNc\" }; Field \"fileLink\" is not defined by type EducationResourseCreateURLData. Did you mean file?",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\values.js:114:15",
				"    at coerceInputValueImpl (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\utilities\\coerceInputValue.js:114:9)",
				"    at coerceInputValueImpl (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\utilities\\coerceInputValue.js:54:14)",
				"    at coerceInputValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\utilities\\coerceInputValue.js:37:10)",
				"    at _loop (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\values.js:107:69)",
				"    at coerceVariableValues (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\values.js:119:16)",
				"    at getVariableValues (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\values.js:48:19)",
				"    at buildExecutionContext (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:184:61)",
				"    at executeImpl (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:89:20)",
				"    at Object.execute (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:64:35)",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\src\\requestPipeline.ts:481:30",
				"    at Generator.next (<anonymous>)",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:8:71",
				"    at new Promise (<anonymous>)",
				"    at __awaiter (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:4:12)",
				"    at execute (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:225:20)",
				"    at Object.<anonymous> (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\src\\requestPipeline.ts:364:30)",
				"    at Generator.next (<anonymous>)",
				"    at fulfilled (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:5:58)",
				"    at process._tickCallback (internal/process/next_tick.js:68:7)"
			]
		}
	}
}2020-03-11T13:43:51.022Z{
	"message": "notNull Violation: educationCourse.description cannot be null,\nnotNull Violation: educationCourse.read cannot be null,\nnotNull Violation: educationCourse.lector cannot be null",
	"locations": [
		{
			"line": 2,
			"column": 3
		}
	],
	"path": [
		"createEducationResourseURL"
	],
	"extensions": {
		"code": "INTERNAL_SERVER_ERROR",
		"exception": {
			"name": "SequelizeValidationError",
			"errors": [
				{
					"message": "educationCourse.description cannot be null",
					"type": "notNull Violation",
					"path": "description",
					"value": null,
					"origin": "CORE",
					"instance": {
						"id": null,
						"title": "Лекция №1",
						"updatedAt": "2020-03-11T13:43:50.961Z",
						"createdAt": "2020-03-11T13:43:50.961Z"
					},
					"validatorKey": "is_null",
					"validatorName": null,
					"validatorArgs": []
				},
				{
					"message": "educationCourse.read cannot be null",
					"type": "notNull Violation",
					"path": "read",
					"value": null,
					"origin": "CORE",
					"instance": {
						"id": null,
						"title": "Лекция №1",
						"updatedAt": "2020-03-11T13:43:50.961Z",
						"createdAt": "2020-03-11T13:43:50.961Z"
					},
					"validatorKey": "is_null",
					"validatorName": null,
					"validatorArgs": []
				},
				{
					"message": "educationCourse.lector cannot be null",
					"type": "notNull Violation",
					"path": "lector",
					"value": null,
					"origin": "CORE",
					"instance": {
						"id": null,
						"title": "Лекция №1",
						"updatedAt": "2020-03-11T13:43:50.961Z",
						"createdAt": "2020-03-11T13:43:50.961Z"
					},
					"validatorKey": "is_null",
					"validatorName": null,
					"validatorArgs": []
				}
			],
			"stacktrace": [
				"SequelizeValidationError: notNull Violation: educationCourse.description cannot be null,",
				"notNull Violation: educationCourse.read cannot be null,",
				"notNull Violation: educationCourse.lector cannot be null",
				"    at Promise.all.then (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\sequelize\\lib\\instance-validator.js:74:15)",
				"    at tryCatcher (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\util.js:16:23)",
				"    at Promise._settlePromiseFromHandler (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\promise.js:547:31)",
				"    at Promise._settlePromise (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\promise.js:604:18)",
				"    at Promise._settlePromise0 (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\promise.js:649:10)",
				"    at Promise._settlePromises (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\promise.js:729:18)",
				"    at Promise._fulfill (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\promise.js:673:18)",
				"    at PromiseArray._resolve (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\promise_array.js:127:19)",
				"    at PromiseArray._promiseFulfilled (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\promise_array.js:145:14)",
				"    at Promise._settlePromise (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\promise.js:609:26)",
				"    at Promise._settlePromise0 (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\promise.js:649:10)",
				"    at Promise._settlePromises (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\promise.js:729:18)",
				"    at _drainQueueStep (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\async.js:93:12)",
				"    at _drainQueue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\async.js:86:9)",
				"    at Async._drainQueues (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\async.js:102:5)",
				"    at Immediate.Async.drainQueues [as _onImmediate] (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\async.js:15:14)",
				"    at runCallback (timers.js:705:18)",
				"    at tryOnImmediate (timers.js:676:5)",
				"    at processImmediate (timers.js:658:5)",
				"    at process.topLevelDomainCallback (domain.js:120:23)"
			]
		}
	}
}2020-03-11T13:48:32.917Z{
	"message": "fileLink is not defined",
	"locations": [
		{
			"line": 2,
			"column": 3
		}
	],
	"path": [
		"createEducationResourseURL"
	],
	"extensions": {
		"code": "INTERNAL_SERVER_ERROR",
		"exception": {
			"stacktrace": [
				"ReferenceError: fileLink is not defined",
				"    at _callee14$ (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\src\\resolvers\\mutation/education.js:175:13)",
				"    at tryCatch (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\regenerator-runtime\\runtime.js:45:40)",
				"    at Generator.invoke [as _invoke] (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\regenerator-runtime\\runtime.js:271:22)",
				"    at Generator.prototype.(anonymous function) [as next] (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\regenerator-runtime\\runtime.js:97:21)",
				"    at asyncGeneratorStep (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\src\\resolvers\\mutation\\education.js:32:103)",
				"    at _next (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\src\\resolvers\\mutation\\education.js:34:194)"
			]
		}
	}
}2020-03-11T13:49:11.641Z{
	"message": "notNull Violation: educationResourse.fileLink cannot be null",
	"locations": [
		{
			"line": 2,
			"column": 3
		}
	],
	"path": [
		"createEducationResourseURL"
	],
	"extensions": {
		"code": "INTERNAL_SERVER_ERROR",
		"exception": {
			"name": "SequelizeValidationError",
			"errors": [
				{
					"message": "educationResourse.fileLink cannot be null",
					"type": "notNull Violation",
					"path": "fileLink",
					"value": null,
					"origin": "CORE",
					"instance": {
						"id": null,
						"title": "Лекция №1",
						"educationFormId": "4",
						"educationCourseId": "2",
						"updatedAt": "2020-03-11T13:49:11.606Z",
						"createdAt": "2020-03-11T13:49:11.606Z"
					},
					"validatorKey": "is_null",
					"validatorName": null,
					"validatorArgs": []
				}
			],
			"stacktrace": [
				"SequelizeValidationError: notNull Violation: educationResourse.fileLink cannot be null",
				"    at Promise.all.then (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\sequelize\\lib\\instance-validator.js:74:15)",
				"    at tryCatcher (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\util.js:16:23)",
				"    at Promise._settlePromiseFromHandler (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\promise.js:547:31)",
				"    at Promise._settlePromise (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\promise.js:604:18)",
				"    at Promise._settlePromise0 (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\promise.js:649:10)",
				"    at Promise._settlePromises (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\promise.js:729:18)",
				"    at Promise._fulfill (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\promise.js:673:18)",
				"    at PromiseArray._resolve (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\promise_array.js:127:19)",
				"    at PromiseArray._promiseFulfilled (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\promise_array.js:145:14)",
				"    at Promise._settlePromise (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\promise.js:609:26)",
				"    at Promise._settlePromise0 (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\promise.js:649:10)",
				"    at Promise._settlePromises (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\promise.js:729:18)",
				"    at _drainQueueStep (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\async.js:93:12)",
				"    at _drainQueue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\async.js:86:9)",
				"    at Async._drainQueues (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\async.js:102:5)",
				"    at Immediate.Async.drainQueues [as _onImmediate] (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\bluebird\\js\\release\\async.js:15:14)",
				"    at runCallback (timers.js:705:18)",
				"    at tryOnImmediate (timers.js:676:5)",
				"    at processImmediate (timers.js:658:5)",
				"    at process.topLevelDomainCallback (domain.js:120:23)"
			]
		}
	}
}2020-03-11T13:50:05.297Z{
	"message": "file is not defined",
	"locations": [
		{
			"line": 2,
			"column": 3
		}
	],
	"path": [
		"createEducationResourseURL"
	],
	"extensions": {
		"code": "INTERNAL_SERVER_ERROR",
		"exception": {
			"stacktrace": [
				"ReferenceError: file is not defined",
				"    at _callee14$ (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\src\\resolvers\\mutation/education.js:175:17)",
				"    at tryCatch (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\regenerator-runtime\\runtime.js:45:40)",
				"    at Generator.invoke [as _invoke] (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\regenerator-runtime\\runtime.js:271:22)",
				"    at Generator.prototype.(anonymous function) [as next] (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\regenerator-runtime\\runtime.js:97:21)",
				"    at asyncGeneratorStep (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\src\\resolvers\\mutation\\education.js:32:103)",
				"    at _next (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\src\\resolvers\\mutation\\education.js:34:194)"
			]
		}
	}
}2020-03-11T13:52:08.689Z2020-03-11T13:52:08.690Z{
	"message": "Variable \"$inputData\" got invalid value { title: \"Лекция №1\", educationFormId: \"4\", fileLink: \"https://www.youtube.com/watch?v=k91dMnaFkNc\" }; Field file of required type String! was not provided.",
	"locations": [
		{
			"line": 1,
			"column": 53
		}
	],
	"extensions": {
		"code": "INTERNAL_SERVER_ERROR",
		"exception": {
			"stacktrace": [
				"GraphQLError: Variable \"$inputData\" got invalid value { title: \"Лекция №1\", educationFormId: \"4\", fileLink: \"https://www.youtube.com/watch?v=k91dMnaFkNc\" }; Field file of required type String! was not provided.",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\values.js:114:15",
				"    at coerceInputValueImpl (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\utilities\\coerceInputValue.js:99:11)",
				"    at coerceInputValueImpl (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\utilities\\coerceInputValue.js:54:14)",
				"    at coerceInputValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\utilities\\coerceInputValue.js:37:10)",
				"    at _loop (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\values.js:107:69)",
				"    at coerceVariableValues (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\values.js:119:16)",
				"    at getVariableValues (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\values.js:48:19)",
				"    at buildExecutionContext (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:184:61)",
				"    at executeImpl (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:89:20)",
				"    at Object.execute (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:64:35)",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\src\\requestPipeline.ts:481:30",
				"    at Generator.next (<anonymous>)",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:8:71",
				"    at new Promise (<anonymous>)",
				"    at __awaiter (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:4:12)",
				"    at execute (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:225:20)",
				"    at Object.<anonymous> (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\src\\requestPipeline.ts:364:30)",
				"    at Generator.next (<anonymous>)",
				"    at fulfilled (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:5:58)",
				"    at process._tickCallback (internal/process/next_tick.js:68:7)"
			]
		}
	}
}{
	"message": "Variable \"$inputData\" got invalid value { title: \"Лекция №1\", educationFormId: \"4\", fileLink: \"https://www.youtube.com/watch?v=k91dMnaFkNc\" }; Field \"fileLink\" is not defined by type EducationResourseCreateURLData. Did you mean file?",
	"locations": [
		{
			"line": 1,
			"column": 53
		}
	],
	"extensions": {
		"code": "INTERNAL_SERVER_ERROR",
		"exception": {
			"stacktrace": [
				"GraphQLError: Variable \"$inputData\" got invalid value { title: \"Лекция №1\", educationFormId: \"4\", fileLink: \"https://www.youtube.com/watch?v=k91dMnaFkNc\" }; Field \"fileLink\" is not defined by type EducationResourseCreateURLData. Did you mean file?",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\values.js:114:15",
				"    at coerceInputValueImpl (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\utilities\\coerceInputValue.js:114:9)",
				"    at coerceInputValueImpl (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\utilities\\coerceInputValue.js:54:14)",
				"    at coerceInputValue (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\utilities\\coerceInputValue.js:37:10)",
				"    at _loop (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\values.js:107:69)",
				"    at coerceVariableValues (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\values.js:119:16)",
				"    at getVariableValues (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\values.js:48:19)",
				"    at buildExecutionContext (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:184:61)",
				"    at executeImpl (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:89:20)",
				"    at Object.execute (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\graphql\\execution\\execute.js:64:35)",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\src\\requestPipeline.ts:481:30",
				"    at Generator.next (<anonymous>)",
				"    at C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:8:71",
				"    at new Promise (<anonymous>)",
				"    at __awaiter (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:4:12)",
				"    at execute (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:225:20)",
				"    at Object.<anonymous> (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\src\\requestPipeline.ts:364:30)",
				"    at Generator.next (<anonymous>)",
				"    at fulfilled (C:\\Users\\Satorik\\Documents\\Projects\\___fullaps\\biophys-docker\\node\\node_modules\\apollo-server-core\\dist\\requestPipeline.js:5:58)",
				"    at process._tickCallback (internal/process/next_tick.js:68:7)"
			]
		}
	}
}